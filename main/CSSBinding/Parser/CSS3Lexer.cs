//
// CSSParser.cs
//
// Author:
//       Diyoda Sajjana <>
//
// Copyright (c) 2013 Diyoda Sajjana
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.3.1.7705
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.3.1.7705 CSS3.g3 2013-07-14 02:22:24

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162


using System.Collections.Generic;
using Antlr.Runtime;

namespace Parser
{
	[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.3.1.7705")]
	[System.CLSCompliant(false)]
	public partial class CSS3Lexer : Antlr.Runtime
	{
		public const int EOF=-1;
		public const int A=4;
		public const int ANGLE=5;
		public const int B=6;
		public const int BOM=7;
		public const int C=8;
		public const int CDC=9;
		public const int CDO=10;
		public const int CHARSET_SYM=11;
		public const int COLON=12;
		public const int COMMA=13;
		public const int COMMENT=14;
		public const int D=15;
		public const int DASHMATCH=16;
		public const int DIMENSION=17;
		public const int DOT=18;
		public const int E=19;
		public const int EMS=20;
		public const int ESCAPE=21;
		public const int EXS=22;
		public const int F=23;
		public const int FREQ=24;
		public const int G=25;
		public const int GREATER=26;
		public const int H=27;
		public const int HASH=28;
		public const int HEXCHAR=29;
		public const int I=30;
		public const int IDENT=31;
		public const int IMPORTANT_SYM=32;
		public const int IMPORT_SYM=33;
		public const int INCLUDES=34;
		public const int INVALID=35;
		public const int J=36;
		public const int K=37;
		public const int L=38;
		public const int LBRACE=39;
		public const int LBRACKET=40;
		public const int LENGTH=41;
		public const int LPAREN=42;
		public const int M=43;
		public const int MEDIA_SYM=44;
		public const int MINUS=45;
		public const int N=46;
		public const int NAME=47;
		public const int NL=48;
		public const int NMCHAR=49;
		public const int NMSTART=50;
		public const int NONASCII=51;
		public const int NUMBER=52;
		public const int O=53;
		public const int OPEQ=54;
		public const int P=55;
		public const int PAGE_SYM=56;
		public const int PERCENTAGE=57;
		public const int PLUS=58;
		public const int Q=59;
		public const int R=60;
		public const int RBRACE=61;
		public const int RBRACKET=62;
		public const int RPAREN=63;
		public const int S=64;
		public const int SEMI=65;
		public const int SOLIDUS=66;
		public const int STAR=67;
		public const int STRING=68;
		public const int T=69;
		public const int TIME=70;
		public const int U=71;
		public const int UNICODE=72;
		public const int URI=73;
		public const int URL=74;
		public const int V=75;
		public const int W=76;
		public const int WS=77;
		public const int X=78;
		public const int Y=79;
		public const int Z=80;

		// delegates
		// delegators

		public CSS3Lexer()
		{
			OnCreated();
		}

		public CSS3Lexer(ICharStream input )
			: this(input, new RecognizerSharedState())
		{
		}

		public CSS3Lexer(ICharStream input, RecognizerSharedState state)
			: base(input, state)
		{


			OnCreated();
		}
		public override string GrammarFileName { get { return "CSS3.g3"; } }


		partial void OnCreated();
		partial void EnterRule(string ruleName, int ruleIndex);
		partial void LeaveRule(string ruleName, int ruleIndex);

		partial void EnterRule_HEXCHAR();
		partial void LeaveRule_HEXCHAR();

		// $ANTLR start "HEXCHAR"
		[GrammarRule("HEXCHAR")]
		private void mHEXCHAR()
		{
			EnterRule_HEXCHAR();
			EnterRule("HEXCHAR", 1);
			TraceIn("HEXCHAR", 1);
			try
			{
				// CSS3.g3:268:25: ( ( 'a' .. 'f' | 'A' .. 'F' | '0' .. '9' ) )
				DebugEnterAlt(1);
				// CSS3.g3:
				{
					DebugLocation(268, 25);
					if ((input.LA(1)>='0' && input.LA(1)<='9')||(input.LA(1)>='A' && input.LA(1)<='F')||(input.LA(1)>='a' && input.LA(1)<='f'))
					{
						input.Consume();
						state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						Recover(mse);
						throw mse;}


				}

			}
			finally
			{
				TraceOut("HEXCHAR", 1);
				LeaveRule("HEXCHAR", 1);
				LeaveRule_HEXCHAR();
			}
		}
		// $ANTLR end "HEXCHAR"

		partial void EnterRule_NONASCII();
		partial void LeaveRule_NONASCII();

		// $ANTLR start "NONASCII"
		[GrammarRule("NONASCII")]
		private void mNONASCII()
		{
			EnterRule_NONASCII();
			EnterRule("NONASCII", 2);
			TraceIn("NONASCII", 2);
			try
			{
				// CSS3.g3:270:25: ( '\\u0080' .. '\\uFFFF' )
				DebugEnterAlt(1);
				// CSS3.g3:
				{
					DebugLocation(270, 25);
					if ((input.LA(1)>='\u0080' && input.LA(1)<='\uFFFF'))
					{
						input.Consume();
						state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						Recover(mse);
						throw mse;}


				}

			}
			finally
			{
				TraceOut("NONASCII", 2);
				LeaveRule("NONASCII", 2);
				LeaveRule_NONASCII();
			}
		}
		// $ANTLR end "NONASCII"

		partial void EnterRule_UNICODE();
		partial void LeaveRule_UNICODE();

		// $ANTLR start "UNICODE"
		[GrammarRule("UNICODE")]
		private void mUNICODE()
		{
			EnterRule_UNICODE();
			EnterRule("UNICODE", 3);
			TraceIn("UNICODE", 3);
			try
			{
				// CSS3.g3:272:25: ( '\\\\' HEXCHAR ( HEXCHAR ( HEXCHAR ( HEXCHAR ( HEXCHAR ( HEXCHAR )? )? )? )? )? ( '\\r' | '\\n' | '\\t' | '\\f' | ' ' )* )
				DebugEnterAlt(1);
				// CSS3.g3:272:27: '\\\\' HEXCHAR ( HEXCHAR ( HEXCHAR ( HEXCHAR ( HEXCHAR ( HEXCHAR )? )? )? )? )? ( '\\r' | '\\n' | '\\t' | '\\f' | ' ' )*
				{
					DebugLocation(272, 27);
					Match('\\'); if (state.failed) return;
					DebugLocation(272, 32);
					mHEXCHAR(); if (state.failed) return;
					DebugLocation(273, 33);
					// CSS3.g3:273:33: ( HEXCHAR ( HEXCHAR ( HEXCHAR ( HEXCHAR ( HEXCHAR )? )? )? )? )?
					int alt5=2;
					try { DebugEnterSubRule(5);
						try { DebugEnterDecision(5, false);
							int LA5_0 = input.LA(1);

							if (((LA5_0>='0' && LA5_0<='9')||(LA5_0>='A' && LA5_0<='F')||(LA5_0>='a' && LA5_0<='f')))
							{
								alt5 = 1;
							}
						} finally { DebugExitDecision(5); }
						switch (alt5)
						{
							case 1:
							DebugEnterAlt(1);
							// CSS3.g3:273:34: HEXCHAR ( HEXCHAR ( HEXCHAR ( HEXCHAR ( HEXCHAR )? )? )? )?
							{
								DebugLocation(273, 34);
								mHEXCHAR(); if (state.failed) return;
								DebugLocation(274, 37);
								// CSS3.g3:274:37: ( HEXCHAR ( HEXCHAR ( HEXCHAR ( HEXCHAR )? )? )? )?
								int alt4=2;
								try { DebugEnterSubRule(4);
									try { DebugEnterDecision(4, false);
										int LA4_0 = input.LA(1);

										if (((LA4_0>='0' && LA4_0<='9')||(LA4_0>='A' && LA4_0<='F')||(LA4_0>='a' && LA4_0<='f')))
										{
											alt4 = 1;
										}
									} finally { DebugExitDecision(4); }
									switch (alt4)
									{
										case 1:
										DebugEnterAlt(1);
										// CSS3.g3:274:38: HEXCHAR ( HEXCHAR ( HEXCHAR ( HEXCHAR )? )? )?
										{
											DebugLocation(274, 38);
											mHEXCHAR(); if (state.failed) return;
											DebugLocation(275, 41);
											// CSS3.g3:275:41: ( HEXCHAR ( HEXCHAR ( HEXCHAR )? )? )?
											int alt3=2;
											try { DebugEnterSubRule(3);
												try { DebugEnterDecision(3, false);
													int LA3_0 = input.LA(1);

													if (((LA3_0>='0' && LA3_0<='9')||(LA3_0>='A' && LA3_0<='F')||(LA3_0>='a' && LA3_0<='f')))
													{
														alt3 = 1;
													}
												} finally { DebugExitDecision(3); }
												switch (alt3)
												{
													case 1:
													DebugEnterAlt(1);
													// CSS3.g3:275:42: HEXCHAR ( HEXCHAR ( HEXCHAR )? )?
													{
														DebugLocation(275, 42);
														mHEXCHAR(); if (state.failed) return;
														DebugLocation(276, 45);
														// CSS3.g3:276:45: ( HEXCHAR ( HEXCHAR )? )?
														int alt2=2;
														try { DebugEnterSubRule(2);
															try { DebugEnterDecision(2, false);
																int LA2_0 = input.LA(1);

																if (((LA2_0>='0' && LA2_0<='9')||(LA2_0>='A' && LA2_0<='F')||(LA2_0>='a' && LA2_0<='f')))
																{
																	alt2 = 1;
																}
															} finally { DebugExitDecision(2); }
															switch (alt2)
															{
																case 1:
																DebugEnterAlt(1);
																// CSS3.g3:276:46: HEXCHAR ( HEXCHAR )?
																{
																	DebugLocation(276, 46);
																	mHEXCHAR(); if (state.failed) return;
																	DebugLocation(276, 54);
																	// CSS3.g3:276:54: ( HEXCHAR )?
																	int alt1=2;
																	try { DebugEnterSubRule(1);
																		try { DebugEnterDecision(1, false);
																			int LA1_0 = input.LA(1);

																			if (((LA1_0>='0' && LA1_0<='9')||(LA1_0>='A' && LA1_0<='F')||(LA1_0>='a' && LA1_0<='f')))
																			{
																				alt1 = 1;
																			}
																		} finally { DebugExitDecision(1); }
																		switch (alt1)
																		{
																			case 1:
																			DebugEnterAlt(1);
																			// CSS3.g3:
																			{
																				DebugLocation(276, 54);
																				input.Consume();
																				state.failed=false;

																			}
																			break;

																		}
																	} finally { DebugExitSubRule(1); }


																}
																break;

															}
														} finally { DebugExitSubRule(2); }


													}
													break;

												}
											} finally { DebugExitSubRule(3); }


										}
										break;

									}
								} finally { DebugExitSubRule(4); }


							}
							break;

						}
					} finally { DebugExitSubRule(5); }

					DebugLocation(280, 33);
					// CSS3.g3:280:33: ( '\\r' | '\\n' | '\\t' | '\\f' | ' ' )*
					try { DebugEnterSubRule(6);
						while (true)
						{
							int alt6=2;
							try { DebugEnterDecision(6, false);
								int LA6_0 = input.LA(1);

								if (((LA6_0>='\t' && LA6_0<='\n')||(LA6_0>='\f' && LA6_0<='\r')||LA6_0==' '))
								{
									alt6 = 1;
								}


							} finally { DebugExitDecision(6); }
							switch ( alt6 )
							{
								case 1:
								DebugEnterAlt(1);
								// CSS3.g3:
								{
									DebugLocation(280, 33);
									input.Consume();
									state.failed=false;

								}
								break;

								default:
								goto loop6;
							}
						}

						loop6:
							;

					} finally { DebugExitSubRule(6); }


				}

			}
			finally
			{
				TraceOut("UNICODE", 3);
				LeaveRule("UNICODE", 3);
				LeaveRule_UNICODE();
			}
		}
		// $ANTLR end "UNICODE"

		partial void EnterRule_ESCAPE();
		partial void LeaveRule_ESCAPE();

		// $ANTLR start "ESCAPE"
		[GrammarRule("ESCAPE")]
		private void mESCAPE()
		{
			EnterRule_ESCAPE();
			EnterRule("ESCAPE", 4);
			TraceIn("ESCAPE", 4);
			try
			{
				// CSS3.g3:282:25: ( UNICODE | '\\\\' ~ ( '\\r' | '\\n' | '\\f' | HEXCHAR ) )
				int alt7=2;
				try { DebugEnterDecision(7, false);
					int LA7_0 = input.LA(1);

					if ((LA7_0=='\\'))
					{
						int LA7_1 = input.LA(2);

						if (((LA7_1>='\u0000' && LA7_1<='\t')||LA7_1=='\u000B'||(LA7_1>='\u000E' && LA7_1<='/')||(LA7_1>=':' && LA7_1<='@')||(LA7_1>='G' && LA7_1<='`')||(LA7_1>='g' && LA7_1<='\uFFFF')))
						{
							alt7 = 2;
						}
						else if (((LA7_1>='0' && LA7_1<='9')||(LA7_1>='A' && LA7_1<='F')||(LA7_1>='a' && LA7_1<='f')))
						{
							alt7 = 1;
						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return;}
							NoViableAltException nvae = new NoViableAltException("", 7, 1, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae = new NoViableAltException("", 7, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				} finally { DebugExitDecision(7); }
				switch (alt7)
				{
					case 1:
					DebugEnterAlt(1);
					// CSS3.g3:282:27: UNICODE
					{
						DebugLocation(282, 27);
						mUNICODE(); if (state.failed) return;

					}
					break;
					case 2:
					DebugEnterAlt(2);
					// CSS3.g3:282:37: '\\\\' ~ ( '\\r' | '\\n' | '\\f' | HEXCHAR )
					{
						DebugLocation(282, 37);
						Match('\\'); if (state.failed) return;
						DebugLocation(282, 42);
						input.Consume();
						state.failed=false;

					}
					break;

				}
			}
			finally
			{
				TraceOut("ESCAPE", 4);
				LeaveRule("ESCAPE", 4);
				LeaveRule_ESCAPE();
			}
		}
		// $ANTLR end "ESCAPE"

		partial void EnterRule_NMSTART();
		partial void LeaveRule_NMSTART();

		// $ANTLR start "NMSTART"
		[GrammarRule("NMSTART")]
		private void mNMSTART()
		{
			EnterRule_NMSTART();
			EnterRule("NMSTART", 5);
			TraceIn("NMSTART", 5);
			try
			{
				// CSS3.g3:284:25: ( '_' | 'a' .. 'z' | 'A' .. 'Z' | NONASCII | ESCAPE )
				int alt8=5;
				try { DebugEnterDecision(8, false);
					int LA8_0 = input.LA(1);

					if ((LA8_0=='_'))
					{
						alt8 = 1;
					}
					else if (((LA8_0>='a' && LA8_0<='z')))
					{
						alt8 = 2;
					}
					else if (((LA8_0>='A' && LA8_0<='Z')))
					{
						alt8 = 3;
					}
					else if (((LA8_0>='\u0080' && LA8_0<='\uFFFF')))
					{
						alt8 = 4;
					}
					else if ((LA8_0=='\\'))
					{
						alt8 = 5;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae = new NoViableAltException("", 8, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				} finally { DebugExitDecision(8); }
				switch (alt8)
				{
					case 1:
					DebugEnterAlt(1);
					// CSS3.g3:284:27: '_'
					{
						DebugLocation(284, 27);
						Match('_'); if (state.failed) return;

					}
					break;
					case 2:
					DebugEnterAlt(2);
					// CSS3.g3:285:27: 'a' .. 'z'
					{
						DebugLocation(285, 27);
						MatchRange('a','z'); if (state.failed) return;

					}
					break;
					case 3:
					DebugEnterAlt(3);
					// CSS3.g3:286:27: 'A' .. 'Z'
					{
						DebugLocation(286, 27);
						MatchRange('A','Z'); if (state.failed) return;

					}
					break;
					case 4:
					DebugEnterAlt(4);
					// CSS3.g3:287:27: NONASCII
					{
						DebugLocation(287, 27);
						mNONASCII(); if (state.failed) return;

					}
					break;
					case 5:
					DebugEnterAlt(5);
					// CSS3.g3:288:27: ESCAPE
					{
						DebugLocation(288, 27);
						mESCAPE(); if (state.failed) return;

					}
					break;

				}
			}
			finally
			{
				TraceOut("NMSTART", 5);
				LeaveRule("NMSTART", 5);
				LeaveRule_NMSTART();
			}
		}
		// $ANTLR end "NMSTART"

		partial void EnterRule_NMCHAR();
		partial void LeaveRule_NMCHAR();

		// $ANTLR start "NMCHAR"
		[GrammarRule("NMCHAR")]
		private void mNMCHAR()
		{
			EnterRule_NMCHAR();
			EnterRule("NMCHAR", 6);
			TraceIn("NMCHAR", 6);
			try
			{
				// CSS3.g3:291:25: ( '_' | 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '-' | NONASCII | ESCAPE )
				int alt9=7;
				try { DebugEnterDecision(9, false);
					int LA9_0 = input.LA(1);

					if ((LA9_0=='_'))
					{
						alt9 = 1;
					}
					else if (((LA9_0>='a' && LA9_0<='z')))
					{
						alt9 = 2;
					}
					else if (((LA9_0>='A' && LA9_0<='Z')))
					{
						alt9 = 3;
					}
					else if (((LA9_0>='0' && LA9_0<='9')))
					{
						alt9 = 4;
					}
					else if ((LA9_0=='-'))
					{
						alt9 = 5;
					}
					else if (((LA9_0>='\u0080' && LA9_0<='\uFFFF')))
					{
						alt9 = 6;
					}
					else if ((LA9_0=='\\'))
					{
						alt9 = 7;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae = new NoViableAltException("", 9, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				} finally { DebugExitDecision(9); }
				switch (alt9)
				{
					case 1:
					DebugEnterAlt(1);
					// CSS3.g3:291:27: '_'
					{
						DebugLocation(291, 27);
						Match('_'); if (state.failed) return;

					}
					break;
					case 2:
					DebugEnterAlt(2);
					// CSS3.g3:292:27: 'a' .. 'z'
					{
						DebugLocation(292, 27);
						MatchRange('a','z'); if (state.failed) return;

					}
					break;
					case 3:
					DebugEnterAlt(3);
					// CSS3.g3:293:27: 'A' .. 'Z'
					{
						DebugLocation(293, 27);
						MatchRange('A','Z'); if (state.failed) return;

					}
					break;
					case 4:
					DebugEnterAlt(4);
					// CSS3.g3:294:27: '0' .. '9'
					{
						DebugLocation(294, 27);
						MatchRange('0','9'); if (state.failed) return;

					}
					break;
					case 5:
					DebugEnterAlt(5);
					// CSS3.g3:295:27: '-'
					{
						DebugLocation(295, 27);
						Match('-'); if (state.failed) return;

					}
					break;
					case 6:
					DebugEnterAlt(6);
					// CSS3.g3:296:27: NONASCII
					{
						DebugLocation(296, 27);
						mNONASCII(); if (state.failed) return;

					}
					break;
					case 7:
					DebugEnterAlt(7);
					// CSS3.g3:297:27: ESCAPE
					{
						DebugLocation(297, 27);
						mESCAPE(); if (state.failed) return;

					}
					break;

				}
			}
			finally
			{
				TraceOut("NMCHAR", 6);
				LeaveRule("NMCHAR", 6);
				LeaveRule_NMCHAR();
			}
		}
		// $ANTLR end "NMCHAR"

		partial void EnterRule_NAME();
		partial void LeaveRule_NAME();

		// $ANTLR start "NAME"
		[GrammarRule("NAME")]
		private void mNAME()
		{
			EnterRule_NAME();
			EnterRule("NAME", 7);
			TraceIn("NAME", 7);
			try
			{
				// CSS3.g3:300:25: ( ( NMCHAR )+ )
				DebugEnterAlt(1);
				// CSS3.g3:300:27: ( NMCHAR )+
				{
					DebugLocation(300, 27);
					// CSS3.g3:300:27: ( NMCHAR )+
					int cnt10=0;
					try { DebugEnterSubRule(10);
						while (true)
						{
							int alt10=2;
							try { DebugEnterDecision(10, false);
								int LA10_0 = input.LA(1);

								if ((LA10_0=='-'||(LA10_0>='0' && LA10_0<='9')||(LA10_0>='A' && LA10_0<='Z')||LA10_0=='\\'||LA10_0=='_'||(LA10_0>='a' && LA10_0<='z')||(LA10_0>='\u0080' && LA10_0<='\uFFFF')))
								{
									alt10 = 1;
								}


							} finally { DebugExitDecision(10); }
							switch (alt10)
							{
								case 1:
								DebugEnterAlt(1);
								// CSS3.g3:300:27: NMCHAR
								{
									DebugLocation(300, 27);
									mNMCHAR(); if (state.failed) return;

								}
								break;

								default:
								if (cnt10 >= 1)
									goto loop10;

								if (state.backtracking>0) {state.failed=true; return;}
								EarlyExitException eee10 = new EarlyExitException( 10, input );
								DebugRecognitionException(eee10);
								throw eee10;
							}
							cnt10++;
						}
						loop10:
							;

					} finally { DebugExitSubRule(10); }


				}

			}
			finally
			{
				TraceOut("NAME", 7);
				LeaveRule("NAME", 7);
				LeaveRule_NAME();
			}
		}
		// $ANTLR end "NAME"

		partial void EnterRule_URL();
		partial void LeaveRule_URL();

		// $ANTLR start "URL"
		[GrammarRule("URL")]
		private void mURL()
		{
			EnterRule_URL();
			EnterRule("URL", 8);
			TraceIn("URL", 8);
			try
			{
				// CSS3.g3:302:25: ( ( '[' | '!' | '#' | '$' | '%' | '&' | '*' | '-' | '~' | NONASCII | ESCAPE )* )
				DebugEnterAlt(1);
				// CSS3.g3:302:27: ( '[' | '!' | '#' | '$' | '%' | '&' | '*' | '-' | '~' | NONASCII | ESCAPE )*
				{
					DebugLocation(302, 27);
					// CSS3.g3:302:27: ( '[' | '!' | '#' | '$' | '%' | '&' | '*' | '-' | '~' | NONASCII | ESCAPE )*
					try { DebugEnterSubRule(11);
						while (true)
						{
							int alt11=12;
							try { DebugEnterDecision(11, false);
								try
								{
									alt11 = dfa11.Predict(input);
								}
								catch (NoViableAltException nvae)
								{
									DebugRecognitionException(nvae);
									throw;
								}
							} finally { DebugExitDecision(11); }
							switch ( alt11 )
							{
								case 1:
								DebugEnterAlt(1);
								// CSS3.g3:303:31: '['
								{
									DebugLocation(303, 31);
									Match('['); if (state.failed) return;

								}
								break;
								case 2:
								DebugEnterAlt(2);
								// CSS3.g3:303:35: '!'
								{
									DebugLocation(303, 35);
									Match('!'); if (state.failed) return;

								}
								break;
								case 3:
								DebugEnterAlt(3);
								// CSS3.g3:303:39: '#'
								{
									DebugLocation(303, 39);
									Match('#'); if (state.failed) return;

								}
								break;
								case 4:
								DebugEnterAlt(4);
								// CSS3.g3:303:43: '$'
								{
									DebugLocation(303, 43);
									Match('$'); if (state.failed) return;

								}
								break;
								case 5:
								DebugEnterAlt(5);
								// CSS3.g3:303:47: '%'
								{
									DebugLocation(303, 47);
									Match('%'); if (state.failed) return;

								}
								break;
								case 6:
								DebugEnterAlt(6);
								// CSS3.g3:303:51: '&'
								{
									DebugLocation(303, 51);
									Match('&'); if (state.failed) return;

								}
								break;
								case 7:
								DebugEnterAlt(7);
								// CSS3.g3:303:55: '*'
								{
									DebugLocation(303, 55);
									Match('*'); if (state.failed) return;

								}
								break;
								case 8:
								DebugEnterAlt(8);
								// CSS3.g3:303:59: '-'
								{
									DebugLocation(303, 59);
									Match('-'); if (state.failed) return;

								}
								break;
								case 9:
								DebugEnterAlt(9);
								// CSS3.g3:303:63: '~'
								{
									DebugLocation(303, 63);
									Match('~'); if (state.failed) return;

								}
								break;
								case 10:
								DebugEnterAlt(10);
								// CSS3.g3:304:31: NONASCII
								{
									DebugLocation(304, 31);
									mNONASCII(); if (state.failed) return;

								}
								break;
								case 11:
								DebugEnterAlt(11);
								// CSS3.g3:305:31: ESCAPE
								{
									DebugLocation(305, 31);
									mESCAPE(); if (state.failed) return;

								}
								break;

								default:
								goto loop11;
							}
						}

						loop11:
							;

					} finally { DebugExitSubRule(11); }


				}

			}
			finally
			{
				TraceOut("URL", 8);
				LeaveRule("URL", 8);
				LeaveRule_URL();
			}
		}
		// $ANTLR end "URL"

		partial void EnterRule_A();
		partial void LeaveRule_A();

		// $ANTLR start "A"
		[GrammarRule("A")]
		private void mA()
		{
			EnterRule_A();
			EnterRule("A", 9);
			TraceIn("A", 9);
			try
			{
				// CSS3.g3:315:17: ( ( 'a' | 'A' ) ( '\\r' | '\\n' | '\\t' | '\\f' | ' ' )* | '\\\\' ( '0' ( '0' ( '0' ( '0' )? )? )? )? ( '4' | '6' ) '1' )
				int alt17=2;
				try { DebugEnterDecision(17, false);
					int LA17_0 = input.LA(1);

					if ((LA17_0=='A'||LA17_0=='a'))
					{
						alt17 = 1;
					}
					else if ((LA17_0=='\\'))
					{
						alt17 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae = new NoViableAltException("", 17, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				} finally { DebugExitDecision(17); }
				switch (alt17)
				{
					case 1:
					DebugEnterAlt(1);
					// CSS3.g3:315:21: ( 'a' | 'A' ) ( '\\r' | '\\n' | '\\t' | '\\f' | ' ' )*
					{
						DebugLocation(315, 21);
						input.Consume();
						state.failed=false;
						DebugLocation(315, 31);
						// CSS3.g3:315:31: ( '\\r' | '\\n' | '\\t' | '\\f' | ' ' )*
						try { DebugEnterSubRule(12);
							while (true)
							{
								int alt12=2;
								try { DebugEnterDecision(12, false);
									int LA12_0 = input.LA(1);

									if (((LA12_0>='\t' && LA12_0<='\n')||(LA12_0>='\f' && LA12_0<='\r')||LA12_0==' '))
									{
										alt12 = 1;
									}


								} finally { DebugExitDecision(12); }
								switch ( alt12 )
								{
									case 1:
									DebugEnterAlt(1);
									// CSS3.g3:
									{
										DebugLocation(315, 31);
										input.Consume();
										state.failed=false;

									}
									break;

									default:
									goto loop12;
								}
							}

							loop12:
								;

						} finally { DebugExitSubRule(12); }


					}
					break;
					case 2:
					DebugEnterAlt(2);
					// CSS3.g3:316:21: '\\\\' ( '0' ( '0' ( '0' ( '0' )? )? )? )? ( '4' | '6' ) '1'
					{
						DebugLocation(316, 21);
						Match('\\'); if (state.failed) return;
						DebugLocation(316, 26);
						// CSS3.g3:316:26: ( '0' ( '0' ( '0' ( '0' )? )? )? )?
						int alt16=2;
						try { DebugEnterSubRule(16);
							try { DebugEnterDecision(16, false);
								int LA16_0 = input.LA(1);

								if ((LA16_0=='0'))
								{
									alt16 = 1;
								}
							} finally { DebugExitDecision(16); }
							switch (alt16)
							{
								case 1:
								DebugEnterAlt(1);
								// CSS3.g3:316:27: '0' ( '0' ( '0' ( '0' )? )? )?
								{
									DebugLocation(316, 27);
									Match('0'); if (state.failed) return;
									DebugLocation(316, 31);
									// CSS3.g3:316:31: ( '0' ( '0' ( '0' )? )? )?
									int alt15=2;
									try { DebugEnterSubRule(15);
										try { DebugEnterDecision(15, false);
											int LA15_0 = input.LA(1);

											if ((LA15_0=='0'))
											{
												alt15 = 1;
											}
										} finally { DebugExitDecision(15); }
										switch (alt15)
										{
											case 1:
											DebugEnterAlt(1);
											// CSS3.g3:316:32: '0' ( '0' ( '0' )? )?
											{
												DebugLocation(316, 32);
												Match('0'); if (state.failed) return;
												DebugLocation(316, 36);
												// CSS3.g3:316:36: ( '0' ( '0' )? )?
												int alt14=2;
												try { DebugEnterSubRule(14);
													try { DebugEnterDecision(14, false);
														int LA14_0 = input.LA(1);

														if ((LA14_0=='0'))
														{
															alt14 = 1;
														}
													} finally { DebugExitDecision(14); }
													switch (alt14)
													{
														case 1:
														DebugEnterAlt(1);
														// CSS3.g3:316:37: '0' ( '0' )?
														{
															DebugLocation(316, 37);
															Match('0'); if (state.failed) return;
															DebugLocation(316, 41);
															// CSS3.g3:316:41: ( '0' )?
															int alt13=2;
															try { DebugEnterSubRule(13);
																try { DebugEnterDecision(13, false);
																	int LA13_0 = input.LA(1);

																	if ((LA13_0=='0'))
																	{
																		alt13 = 1;
																	}
																} finally { DebugExitDecision(13); }
																switch (alt13)
																{
																	case 1:
																	DebugEnterAlt(1);
																	// CSS3.g3:316:41: '0'
																	{
																		DebugLocation(316, 41);
																		Match('0'); if (state.failed) return;

																	}
																	break;

																}
															} finally { DebugExitSubRule(13); }


														}
														break;

													}
												} finally { DebugExitSubRule(14); }


											}
											break;

										}
									} finally { DebugExitSubRule(15); }


								}
								break;

							}
						} finally { DebugExitSubRule(16); }

						DebugLocation(316, 52);
						input.Consume();
						state.failed=false;
						DebugLocation(316, 61);
						Match('1'); if (state.failed) return;

					}
					break;

				}
			}
			finally
			{
				TraceOut("A", 9);
				LeaveRule("A", 9);
				LeaveRule_A();
			}
		}
		// $ANTLR end "A"

		partial void EnterRule_B();
		partial void LeaveRule_B();

		// $ANTLR start "B"
		[GrammarRule("B")]
		private void mB()
		{
			EnterRule_B();
			EnterRule("B", 10);
			TraceIn("B", 10);
			try
			{
				// CSS3.g3:318:17: ( ( 'b' | 'B' ) ( '\\r' | '\\n' | '\\t' | '\\f' | ' ' )* | '\\\\' ( '0' ( '0' ( '0' ( '0' )? )? )? )? ( '4' | '6' ) '2' )
				int alt23=2;
				try { DebugEnterDecision(23, false);
					int LA23_0 = input.LA(1);

					if ((LA23_0=='B'||LA23_0=='b'))
					{
						alt23 = 1;
					}
					else if ((LA23_0=='\\'))
					{
						alt23 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae = new NoViableAltException("", 23, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				} finally { DebugExitDecision(23); }
				switch (alt23)
				{
					case 1:
					DebugEnterAlt(1);
					// CSS3.g3:318:21: ( 'b' | 'B' ) ( '\\r' | '\\n' | '\\t' | '\\f' | ' ' )*
					{
						DebugLocation(318, 21);
						input.Consume();
						state.failed=false;
						DebugLocation(318, 31);
						// CSS3.g3:318:31: ( '\\r' | '\\n' | '\\t' | '\\f' | ' ' )*
						try { DebugEnterSubRule(18);
							while (true)
							{
								int alt18=2;
								try { DebugEnterDecision(18, false);
									int LA18_0 = input.LA(1);

									if (((LA18_0>='\t' && LA18_0<='\n')||(LA18_0>='\f' && LA18_0<='\r')||LA18_0==' '))
									{
										alt18 = 1;
									}


								} finally { DebugExitDecision(18); }
								switch ( alt18 )
								{
									case 1:
									DebugEnterAlt(1);
									// CSS3.g3:
									{
										DebugLocation(318, 31);
										input.Consume();
										state.failed=false;

									}
									break;

									default:
									goto loop18;
								}
							}

							loop18:
								;

						} finally { DebugExitSubRule(18); }


					}
					break;
					case 2:
					DebugEnterAlt(2);
					// CSS3.g3:319:21: '\\\\' ( '0' ( '0' ( '0' ( '0' )? )? )? )? ( '4' | '6' ) '2'
					{
						DebugLocation(319, 21);
						Match('\\'); if (state.failed) return;
						DebugLocation(319, 26);
						// CSS3.g3:319:26: ( '0' ( '0' ( '0' ( '0' )? )? )? )?
						int alt22=2;
						try { DebugEnterSubRule(22);
							try { DebugEnterDecision(22, false);
								int LA22_0 = input.LA(1);

								if ((LA22_0=='0'))
								{
									alt22 = 1;
								}
							} finally { DebugExitDecision(22); }
							switch (alt22)
							{
								case 1:
								DebugEnterAlt(1);
								// CSS3.g3:319:27: '0' ( '0' ( '0' ( '0' )? )? )?
								{
									DebugLocation(319, 27);
									Match('0'); if (state.failed) return;
									DebugLocation(319, 31);
									// CSS3.g3:319:31: ( '0' ( '0' ( '0' )? )? )?
									int alt21=2;
									try { DebugEnterSubRule(21);
										try { DebugEnterDecision(21, false);
											int LA21_0 = input.LA(1);

											if ((LA21_0=='0'))
											{
												alt21 = 1;
											}
										} finally { DebugExitDecision(21); }
										switch (alt21)
										{
											case 1:
											DebugEnterAlt(1);
											// CSS3.g3:319:32: '0' ( '0' ( '0' )? )?
											{
												DebugLocation(319, 32);
												Match('0'); if (state.failed) return;
												DebugLocation(319, 36);
												// CSS3.g3:319:36: ( '0' ( '0' )? )?
												int alt20=2;
												try { DebugEnterSubRule(20);
													try { DebugEnterDecision(20, false);
														int LA20_0 = input.LA(1);

														if ((LA20_0=='0'))
														{
															alt20 = 1;
														}
													} finally { DebugExitDecision(20); }
													switch (alt20)
													{
														case 1:
														DebugEnterAlt(1);
														// CSS3.g3:319:37: '0' ( '0' )?
														{
															DebugLocation(319, 37);
															Match('0'); if (state.failed) return;
															DebugLocation(319, 41);
															// CSS3.g3:319:41: ( '0' )?
															int alt19=2;
															try { DebugEnterSubRule(19);
																try { DebugEnterDecision(19, false);
																	int LA19_0 = input.LA(1);

																	if ((LA19_0=='0'))
																	{
																		alt19 = 1;
																	}
																} finally { DebugExitDecision(19); }
																switch (alt19)
																{
																	case 1:
																	DebugEnterAlt(1);
																	// CSS3.g3:319:41: '0'
																	{
																		DebugLocation(319, 41);
																		Match('0'); if (state.failed) return;

																	}
																	break;

																}
															} finally { DebugExitSubRule(19); }


														}
														break;

													}
												} finally { DebugExitSubRule(20); }


											}
											break;

										}
									} finally { DebugExitSubRule(21); }


								}
								break;

							}
						} finally { DebugExitSubRule(22); }

						DebugLocation(319, 52);
						input.Consume();
						state.failed=false;
						DebugLocation(319, 61);
						Match('2'); if (state.failed) return;

					}
					break;

				}
			}
			finally
			{
				TraceOut("B", 10);
				LeaveRule("B", 10);
				LeaveRule_B();
			}
		}
		// $ANTLR end "B"

		partial void EnterRule_C();
		partial void LeaveRule_C();

		// $ANTLR start "C"
		[GrammarRule("C")]
		private void mC()
		{
			EnterRule_C();
			EnterRule("C", 11);
			TraceIn("C", 11);
			try
			{
				// CSS3.g3:321:17: ( ( 'c' | 'C' ) ( '\\r' | '\\n' | '\\t' | '\\f' | ' ' )* | '\\\\' ( '0' ( '0' ( '0' ( '0' )? )? )? )? ( '4' | '6' ) '3' )
				int alt29=2;
				try { DebugEnterDecision(29, false);
					int LA29_0 = input.LA(1);

					if ((LA29_0=='C'||LA29_0=='c'))
					{
						alt29 = 1;
					}
					else if ((LA29_0=='\\'))
					{
						alt29 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae = new NoViableAltException("", 29, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				} finally { DebugExitDecision(29); }
				switch (alt29)
				{
					case 1:
					DebugEnterAlt(1);
					// CSS3.g3:321:21: ( 'c' | 'C' ) ( '\\r' | '\\n' | '\\t' | '\\f' | ' ' )*
					{
						DebugLocation(321, 21);
						input.Consume();
						state.failed=false;
						DebugLocation(321, 31);
						// CSS3.g3:321:31: ( '\\r' | '\\n' | '\\t' | '\\f' | ' ' )*
						try { DebugEnterSubRule(24);
							while (true)
							{
								int alt24=2;
								try { DebugEnterDecision(24, false);
									int LA24_0 = input.LA(1);

									if (((LA24_0>='\t' && LA24_0<='\n')||(LA24_0>='\f' && LA24_0<='\r')||LA24_0==' '))
									{
										alt24 = 1;
									}


								} finally { DebugExitDecision(24); }
								switch ( alt24 )
								{
									case 1:
									DebugEnterAlt(1);
									// CSS3.g3:
									{
										DebugLocation(321, 31);
										input.Consume();
										state.failed=false;

									}
									break;

									default:
									goto loop24;
								}
							}

							loop24:
								;

						} finally { DebugExitSubRule(24); }


					}
					break;
					case 2:
					DebugEnterAlt(2);
					// CSS3.g3:322:21: '\\\\' ( '0' ( '0' ( '0' ( '0' )? )? )? )? ( '4' | '6' ) '3'
					{
						DebugLocation(322, 21);
						Match('\\'); if (state.failed) return;
						DebugLocation(322, 26);
						// CSS3.g3:322:26: ( '0' ( '0' ( '0' ( '0' )? )? )? )?
						int alt28=2;
						try { DebugEnterSubRule(28);
							try { DebugEnterDecision(28, false);
								int LA28_0 = input.LA(1);

								if ((LA28_0=='0'))
								{
									alt28 = 1;
								}
							} finally { DebugExitDecision(28); }
							switch (alt28)
							{
								case 1:
								DebugEnterAlt(1);
								// CSS3.g3:322:27: '0' ( '0' ( '0' ( '0' )? )? )?
								{
									DebugLocation(322, 27);
									Match('0'); if (state.failed) return;
									DebugLocation(322, 31);
									// CSS3.g3:322:31: ( '0' ( '0' ( '0' )? )? )?
									int alt27=2;
									try { DebugEnterSubRule(27);
										try { DebugEnterDecision(27, false);
											int LA27_0 = input.LA(1);

											if ((LA27_0=='0'))
											{
												alt27 = 1;
											}
										} finally { DebugExitDecision(27); }
										switch (alt27)
										{
											case 1:
											DebugEnterAlt(1);
											// CSS3.g3:322:32: '0' ( '0' ( '0' )? )?
											{
												DebugLocation(322, 32);
												Match('0'); if (state.failed) return;
												DebugLocation(322, 36);
												// CSS3.g3:322:36: ( '0' ( '0' )? )?
												int alt26=2;
												try { DebugEnterSubRule(26);
													try { DebugEnterDecision(26, false);
														int LA26_0 = input.LA(1);

														if ((LA26_0=='0'))
														{
															alt26 = 1;
														}
													} finally { DebugExitDecision(26); }
													switch (alt26)
													{
														case 1:
														DebugEnterAlt(1);
														// CSS3.g3:322:37: '0' ( '0' )?
														{
															DebugLocation(322, 37);
															Match('0'); if (state.failed) return;
															DebugLocation(322, 41);
															// CSS3.g3:322:41: ( '0' )?
															int alt25=2;
															try { DebugEnterSubRule(25);
																try { DebugEnterDecision(25, false);
																	int LA25_0 = input.LA(1);

																	if ((LA25_0=='0'))
																	{
																		alt25 = 1;
																	}
																} finally { DebugExitDecision(25); }
																switch (alt25)
																{
																	case 1:
																	DebugEnterAlt(1);
																	// CSS3.g3:322:41: '0'
																	{
																		DebugLocation(322, 41);
																		Match('0'); if (state.failed) return;

																	}
																	break;

																}
															} finally { DebugExitSubRule(25); }


														}
														break;

													}
												} finally { DebugExitSubRule(26); }


											}
											break;

										}
									} finally { DebugExitSubRule(27); }


								}
								break;

							}
						} finally { DebugExitSubRule(28); }

						DebugLocation(322, 52);
						input.Consume();
						state.failed=false;
						DebugLocation(322, 61);
						Match('3'); if (state.failed) return;

					}
					break;

				}
			}
			finally
			{
				TraceOut("C", 11);
				LeaveRule("C", 11);
				LeaveRule_C();
			}
		}
		// $ANTLR end "C"

		partial void EnterRule_D();
		partial void LeaveRule_D();

		// $ANTLR start "D"
		[GrammarRule("D")]
		private void mD()
		{
			EnterRule_D();
			EnterRule("D", 12);
			TraceIn("D", 12);
			try
			{
				// CSS3.g3:324:17: ( ( 'd' | 'D' ) ( '\\r' | '\\n' | '\\t' | '\\f' | ' ' )* | '\\\\' ( '0' ( '0' ( '0' ( '0' )? )? )? )? ( '4' | '6' ) '4' )
				int alt35=2;
				try { DebugEnterDecision(35, false);
					int LA35_0 = input.LA(1);

					if ((LA35_0=='D'||LA35_0=='d'))
					{
						alt35 = 1;
					}
					else if ((LA35_0=='\\'))
					{
						alt35 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae = new NoViableAltException("", 35, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				} finally { DebugExitDecision(35); }
				switch (alt35)
				{
					case 1:
					DebugEnterAlt(1);
					// CSS3.g3:324:21: ( 'd' | 'D' ) ( '\\r' | '\\n' | '\\t' | '\\f' | ' ' )*
					{
						DebugLocation(324, 21);
						input.Consume();
						state.failed=false;
						DebugLocation(324, 31);
						// CSS3.g3:324:31: ( '\\r' | '\\n' | '\\t' | '\\f' | ' ' )*
						try { DebugEnterSubRule(30);
							while (true)
							{
								int alt30=2;
								try { DebugEnterDecision(30, false);
									int LA30_0 = input.LA(1);

									if (((LA30_0>='\t' && LA30_0<='\n')||(LA30_0>='\f' && LA30_0<='\r')||LA30_0==' '))
									{
										alt30 = 1;
									}


								} finally { DebugExitDecision(30); }
								switch ( alt30 )
								{
									case 1:
									DebugEnterAlt(1);
									// CSS3.g3:
									{
										DebugLocation(324, 31);
										input.Consume();
										state.failed=false;

									}
									break;

									default:
									goto loop30;
								}
							}

							loop30:
								;

						} finally { DebugExitSubRule(30); }


					}
					break;
					case 2:
					DebugEnterAlt(2);
					// CSS3.g3:325:21: '\\\\' ( '0' ( '0' ( '0' ( '0' )? )? )? )? ( '4' | '6' ) '4'
					{
						DebugLocation(325, 21);
						Match('\\'); if (state.failed) return;
						DebugLocation(325, 26);
						// CSS3.g3:325:26: ( '0' ( '0' ( '0' ( '0' )? )? )? )?
						int alt34=2;
						try { DebugEnterSubRule(34);
							try { DebugEnterDecision(34, false);
								int LA34_0 = input.LA(1);

								if ((LA34_0=='0'))
								{
									alt34 = 1;
								}
							} finally { DebugExitDecision(34); }
							switch (alt34)
							{
								case 1:
								DebugEnterAlt(1);
								// CSS3.g3:325:27: '0' ( '0' ( '0' ( '0' )? )? )?
								{
									DebugLocation(325, 27);
									Match('0'); if (state.failed) return;
									DebugLocation(325, 31);
									// CSS3.g3:325:31: ( '0' ( '0' ( '0' )? )? )?
									int alt33=2;
									try { DebugEnterSubRule(33);
										try { DebugEnterDecision(33, false);
											int LA33_0 = input.LA(1);

											if ((LA33_0=='0'))
											{
												alt33 = 1;
											}
										} finally { DebugExitDecision(33); }
										switch (alt33)
										{
											case 1:
											DebugEnterAlt(1);
											// CSS3.g3:325:32: '0' ( '0' ( '0' )? )?
											{
												DebugLocation(325, 32);
												Match('0'); if (state.failed) return;
												DebugLocation(325, 36);
												// CSS3.g3:325:36: ( '0' ( '0' )? )?
												int alt32=2;
												try { DebugEnterSubRule(32);
													try { DebugEnterDecision(32, false);
														int LA32_0 = input.LA(1);

														if ((LA32_0=='0'))
														{
															alt32 = 1;
														}
													} finally { DebugExitDecision(32); }
													switch (alt32)
													{
														case 1:
														DebugEnterAlt(1);
														// CSS3.g3:325:37: '0' ( '0' )?
														{
															DebugLocation(325, 37);
															Match('0'); if (state.failed) return;
															DebugLocation(325, 41);
															// CSS3.g3:325:41: ( '0' )?
															int alt31=2;
															try { DebugEnterSubRule(31);
																try { DebugEnterDecision(31, false);
																	int LA31_0 = input.LA(1);

																	if ((LA31_0=='0'))
																	{
																		alt31 = 1;
																	}
																} finally { DebugExitDecision(31); }
																switch (alt31)
																{
																	case 1:
																	DebugEnterAlt(1);
																	// CSS3.g3:325:41: '0'
																	{
																		DebugLocation(325, 41);
																		Match('0'); if (state.failed) return;

																	}
																	break;

																}
															} finally { DebugExitSubRule(31); }


														}
														break;

													}
												} finally { DebugExitSubRule(32); }


											}
											break;

										}
									} finally { DebugExitSubRule(33); }


								}
								break;

							}
						} finally { DebugExitSubRule(34); }

						DebugLocation(325, 52);
						input.Consume();
						state.failed=false;
						DebugLocation(325, 61);
						Match('4'); if (state.failed) return;

					}
					break;

				}
			}
			finally
			{
				TraceOut("D", 12);
				LeaveRule("D", 12);
				LeaveRule_D();
			}
		}
		// $ANTLR end "D"

		partial void EnterRule_E();
		partial void LeaveRule_E();

		// $ANTLR start "E"
		[GrammarRule("E")]
		private void mE()
		{
			EnterRule_E();
			EnterRule("E", 13);
			TraceIn("E", 13);
			try
			{
				// CSS3.g3:327:17: ( ( 'e' | 'E' ) ( '\\r' | '\\n' | '\\t' | '\\f' | ' ' )* | '\\\\' ( '0' ( '0' ( '0' ( '0' )? )? )? )? ( '4' | '6' ) '5' )
				int alt41=2;
				try { DebugEnterDecision(41, false);
					int LA41_0 = input.LA(1);

					if ((LA41_0=='E'||LA41_0=='e'))
					{
						alt41 = 1;
					}
					else if ((LA41_0=='\\'))
					{
						alt41 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae = new NoViableAltException("", 41, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				} finally { DebugExitDecision(41); }
				switch (alt41)
				{
					case 1:
					DebugEnterAlt(1);
					// CSS3.g3:327:21: ( 'e' | 'E' ) ( '\\r' | '\\n' | '\\t' | '\\f' | ' ' )*
					{
						DebugLocation(327, 21);
						input.Consume();
						state.failed=false;
						DebugLocation(327, 31);
						// CSS3.g3:327:31: ( '\\r' | '\\n' | '\\t' | '\\f' | ' ' )*
						try { DebugEnterSubRule(36);
							while (true)
							{
								int alt36=2;
								try { DebugEnterDecision(36, false);
									int LA36_0 = input.LA(1);

									if (((LA36_0>='\t' && LA36_0<='\n')||(LA36_0>='\f' && LA36_0<='\r')||LA36_0==' '))
									{
										alt36 = 1;
									}


								} finally { DebugExitDecision(36); }
								switch ( alt36 )
								{
									case 1:
									DebugEnterAlt(1);
									// CSS3.g3:
									{
										DebugLocation(327, 31);
										input.Consume();
										state.failed=false;

									}
									break;

									default:
									goto loop36;
								}
							}

							loop36:
								;

						} finally { DebugExitSubRule(36); }


					}
					break;
					case 2:
					DebugEnterAlt(2);
					// CSS3.g3:328:21: '\\\\' ( '0' ( '0' ( '0' ( '0' )? )? )? )? ( '4' | '6' ) '5'
					{
						DebugLocation(328, 21);
						Match('\\'); if (state.failed) return;
						DebugLocation(328, 26);
						// CSS3.g3:328:26: ( '0' ( '0' ( '0' ( '0' )? )? )? )?
						int alt40=2;
						try { DebugEnterSubRule(40);
							try { DebugEnterDecision(40, false);
								int LA40_0 = input.LA(1);

								if ((LA40_0=='0'))
								{
									alt40 = 1;
								}
							} finally { DebugExitDecision(40); }
							switch (alt40)
							{
								case 1:
								DebugEnterAlt(1);
								// CSS3.g3:328:27: '0' ( '0' ( '0' ( '0' )? )? )?
								{
									DebugLocation(328, 27);
									Match('0'); if (state.failed) return;
									DebugLocation(328, 31);
									// CSS3.g3:328:31: ( '0' ( '0' ( '0' )? )? )?
									int alt39=2;
									try { DebugEnterSubRule(39);
										try { DebugEnterDecision(39, false);
											int LA39_0 = input.LA(1);

											if ((LA39_0=='0'))
											{
												alt39 = 1;
											}
										} finally { DebugExitDecision(39); }
										switch (alt39)
										{
											case 1:
											DebugEnterAlt(1);
											// CSS3.g3:328:32: '0' ( '0' ( '0' )? )?
											{
												DebugLocation(328, 32);
												Match('0'); if (state.failed) return;
												DebugLocation(328, 36);
												// CSS3.g3:328:36: ( '0' ( '0' )? )?
												int alt38=2;
												try { DebugEnterSubRule(38);
													try { DebugEnterDecision(38, false);
														int LA38_0 = input.LA(1);

														if ((LA38_0=='0'))
														{
															alt38 = 1;
														}
													} finally { DebugExitDecision(38); }
													switch (alt38)
													{
														case 1:
														DebugEnterAlt(1);
														// CSS3.g3:328:37: '0' ( '0' )?
														{
															DebugLocation(328, 37);
															Match('0'); if (state.failed) return;
															DebugLocation(328, 41);
															// CSS3.g3:328:41: ( '0' )?
															int alt37=2;
															try { DebugEnterSubRule(37);
																try { DebugEnterDecision(37, false);
																	int LA37_0 = input.LA(1);

																	if ((LA37_0=='0'))
																	{
																		alt37 = 1;
																	}
																} finally { DebugExitDecision(37); }
																switch (alt37)
																{
																	case 1:
																	DebugEnterAlt(1);
																	// CSS3.g3:328:41: '0'
																	{
																		DebugLocation(328, 41);
																		Match('0'); if (state.failed) return;

																	}
																	break;

																}
															} finally { DebugExitSubRule(37); }


														}
														break;

													}
												} finally { DebugExitSubRule(38); }


											}
											break;

										}
									} finally { DebugExitSubRule(39); }


								}
								break;

							}
						} finally { DebugExitSubRule(40); }

						DebugLocation(328, 52);
						input.Consume();
						state.failed=false;
						DebugLocation(328, 61);
						Match('5'); if (state.failed) return;

					}
					break;

				}
			}
			finally
			{
				TraceOut("E", 13);
				LeaveRule("E", 13);
				LeaveRule_E();
			}
		}
		// $ANTLR end "E"

		partial void EnterRule_F();
		partial void LeaveRule_F();

		// $ANTLR start "F"
		[GrammarRule("F")]
		private void mF()
		{
			EnterRule_F();
			EnterRule("F", 14);
			TraceIn("F", 14);
			try
			{
				// CSS3.g3:330:17: ( ( 'f' | 'F' ) ( '\\r' | '\\n' | '\\t' | '\\f' | ' ' )* | '\\\\' ( '0' ( '0' ( '0' ( '0' )? )? )? )? ( '4' | '6' ) '6' )
				int alt47=2;
				try { DebugEnterDecision(47, false);
					int LA47_0 = input.LA(1);

					if ((LA47_0=='F'||LA47_0=='f'))
					{
						alt47 = 1;
					}
					else if ((LA47_0=='\\'))
					{
						alt47 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae = new NoViableAltException("", 47, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				} finally { DebugExitDecision(47); }
				switch (alt47)
				{
					case 1:
					DebugEnterAlt(1);
					// CSS3.g3:330:21: ( 'f' | 'F' ) ( '\\r' | '\\n' | '\\t' | '\\f' | ' ' )*
					{
						DebugLocation(330, 21);
						input.Consume();
						state.failed=false;
						DebugLocation(330, 31);
						// CSS3.g3:330:31: ( '\\r' | '\\n' | '\\t' | '\\f' | ' ' )*
						try { DebugEnterSubRule(42);
							while (true)
							{
								int alt42=2;
								try { DebugEnterDecision(42, false);
									int LA42_0 = input.LA(1);

									if (((LA42_0>='\t' && LA42_0<='\n')||(LA42_0>='\f' && LA42_0<='\r')||LA42_0==' '))
									{
										alt42 = 1;
									}


								} finally { DebugExitDecision(42); }
								switch ( alt42 )
								{
									case 1:
									DebugEnterAlt(1);
									// CSS3.g3:
									{
										DebugLocation(330, 31);
										input.Consume();
										state.failed=false;

									}
									break;

									default:
									goto loop42;
								}
							}

							loop42:
								;

						} finally { DebugExitSubRule(42); }


					}
					break;
					case 2:
					DebugEnterAlt(2);
					// CSS3.g3:331:21: '\\\\' ( '0' ( '0' ( '0' ( '0' )? )? )? )? ( '4' | '6' ) '6'
					{
						DebugLocation(331, 21);
						Match('\\'); if (state.failed) return;
						DebugLocation(331, 26);
						// CSS3.g3:331:26: ( '0' ( '0' ( '0' ( '0' )? )? )? )?
						int alt46=2;
						try { DebugEnterSubRule(46);
							try { DebugEnterDecision(46, false);
								int LA46_0 = input.LA(1);

								if ((LA46_0=='0'))
								{
									alt46 = 1;
								}
							} finally { DebugExitDecision(46); }
							switch (alt46)
							{
								case 1:
								DebugEnterAlt(1);
								// CSS3.g3:331:27: '0' ( '0' ( '0' ( '0' )? )? )?
								{
									DebugLocation(331, 27);
									Match('0'); if (state.failed) return;
									DebugLocation(331, 31);
									// CSS3.g3:331:31: ( '0' ( '0' ( '0' )? )? )?
									int alt45=2;
									try { DebugEnterSubRule(45);
										try { DebugEnterDecision(45, false);
											int LA45_0 = input.LA(1);

											if ((LA45_0=='0'))
											{
												alt45 = 1;
											}
										} finally { DebugExitDecision(45); }
										switch (alt45)
										{
											case 1:
											DebugEnterAlt(1);
											// CSS3.g3:331:32: '0' ( '0' ( '0' )? )?
											{
												DebugLocation(331, 32);
												Match('0'); if (state.failed) return;
												DebugLocation(331, 36);
												// CSS3.g3:331:36: ( '0' ( '0' )? )?
												int alt44=2;
												try { DebugEnterSubRule(44);
													try { DebugEnterDecision(44, false);
														int LA44_0 = input.LA(1);

														if ((LA44_0=='0'))
														{
															alt44 = 1;
														}
													} finally { DebugExitDecision(44); }
													switch (alt44)
													{
														case 1:
														DebugEnterAlt(1);
														// CSS3.g3:331:37: '0' ( '0' )?
														{
															DebugLocation(331, 37);
															Match('0'); if (state.failed) return;
															DebugLocation(331, 41);
															// CSS3.g3:331:41: ( '0' )?
															int alt43=2;
															try { DebugEnterSubRule(43);
																try { DebugEnterDecision(43, false);
																	int LA43_0 = input.LA(1);

																	if ((LA43_0=='0'))
																	{
																		alt43 = 1;
																	}
																} finally { DebugExitDecision(43); }
																switch (alt43)
																{
																	case 1:
																	DebugEnterAlt(1);
																	// CSS3.g3:331:41: '0'
																	{
																		DebugLocation(331, 41);
																		Match('0'); if (state.failed) return;

																	}
																	break;

																}
															} finally { DebugExitSubRule(43); }


														}
														break;

													}
												} finally { DebugExitSubRule(44); }


											}
											break;

										}
									} finally { DebugExitSubRule(45); }


								}
								break;

							}
						} finally { DebugExitSubRule(46); }

						DebugLocation(331, 52);
						input.Consume();
						state.failed=false;
						DebugLocation(331, 61);
						Match('6'); if (state.failed) return;

					}
					break;

				}
			}
			finally
			{
				TraceOut("F", 14);
				LeaveRule("F", 14);
				LeaveRule_F();
			}
		}
		// $ANTLR end "F"

		partial void EnterRule_G();
		partial void LeaveRule_G();

		// $ANTLR start "G"
		[GrammarRule("G")]
		private void mG()
		{
			EnterRule_G();
			EnterRule("G", 15);
			TraceIn("G", 15);
			try
			{
				// CSS3.g3:333:17: ( ( 'g' | 'G' ) ( '\\r' | '\\n' | '\\t' | '\\f' | ' ' )* | '\\\\' ( 'g' | 'G' | ( '0' ( '0' ( '0' ( '0' )? )? )? )? ( '4' | '6' ) '7' ) )
				int alt54=2;
				try { DebugEnterDecision(54, false);
					int LA54_0 = input.LA(1);

					if ((LA54_0=='G'||LA54_0=='g'))
					{
						alt54 = 1;
					}
					else if ((LA54_0=='\\'))
					{
						alt54 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae = new NoViableAltException("", 54, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				} finally { DebugExitDecision(54); }
				switch (alt54)
				{
					case 1:
					DebugEnterAlt(1);
					// CSS3.g3:333:21: ( 'g' | 'G' ) ( '\\r' | '\\n' | '\\t' | '\\f' | ' ' )*
					{
						DebugLocation(333, 21);
						input.Consume();
						state.failed=false;
						DebugLocation(333, 31);
						// CSS3.g3:333:31: ( '\\r' | '\\n' | '\\t' | '\\f' | ' ' )*
						try { DebugEnterSubRule(48);
							while (true)
							{
								int alt48=2;
								try { DebugEnterDecision(48, false);
									int LA48_0 = input.LA(1);

									if (((LA48_0>='\t' && LA48_0<='\n')||(LA48_0>='\f' && LA48_0<='\r')||LA48_0==' '))
									{
										alt48 = 1;
									}


								} finally { DebugExitDecision(48); }
								switch ( alt48 )
								{
									case 1:
									DebugEnterAlt(1);
									// CSS3.g3:
									{
										DebugLocation(333, 31);
										input.Consume();
										state.failed=false;

									}
									break;

									default:
									goto loop48;
								}
							}

							loop48:
								;

						} finally { DebugExitSubRule(48); }


					}
					break;
					case 2:
					DebugEnterAlt(2);
					// CSS3.g3:334:21: '\\\\' ( 'g' | 'G' | ( '0' ( '0' ( '0' ( '0' )? )? )? )? ( '4' | '6' ) '7' )
					{
						DebugLocation(334, 21);
						Match('\\'); if (state.failed) return;
						DebugLocation(335, 25);
						// CSS3.g3:335:25: ( 'g' | 'G' | ( '0' ( '0' ( '0' ( '0' )? )? )? )? ( '4' | '6' ) '7' )
						int alt53=3;
						try { DebugEnterSubRule(53);
							try { DebugEnterDecision(53, false);
								switch (input.LA(1))
								{
									case 'g':
								{
									alt53 = 1;
								}
									break;
									case 'G':
								{
									alt53 = 2;
								}
									break;
									case '0':
									case '4':
									case '6':
								{
									alt53 = 3;
								}
									break;
									default:
								{
									if (state.backtracking>0) {state.failed=true; return;}
									NoViableAltException nvae = new NoViableAltException("", 53, 0, input);
									DebugRecognitionException(nvae);
									throw nvae;
								}
								}

							} finally { DebugExitDecision(53); }
							switch (alt53)
							{
								case 1:
								DebugEnterAlt(1);
								// CSS3.g3:336:31: 'g'
								{
									DebugLocation(336, 31);
									Match('g'); if (state.failed) return;

								}
								break;
								case 2:
								DebugEnterAlt(2);
								// CSS3.g3:337:31: 'G'
								{
									DebugLocation(337, 31);
									Match('G'); if (state.failed) return;

								}
								break;
								case 3:
								DebugEnterAlt(3);
								// CSS3.g3:338:31: ( '0' ( '0' ( '0' ( '0' )? )? )? )? ( '4' | '6' ) '7'
								{
									DebugLocation(338, 31);
									// CSS3.g3:338:31: ( '0' ( '0' ( '0' ( '0' )? )? )? )?
									int alt52=2;
									try { DebugEnterSubRule(52);
										try { DebugEnterDecision(52, false);
											int LA52_0 = input.LA(1);

											if ((LA52_0=='0'))
											{
												alt52 = 1;
											}
										} finally { DebugExitDecision(52); }
										switch (alt52)
										{
											case 1:
											DebugEnterAlt(1);
											// CSS3.g3:338:32: '0' ( '0' ( '0' ( '0' )? )? )?
											{
												DebugLocation(338, 32);
												Match('0'); if (state.failed) return;
												DebugLocation(338, 36);
												// CSS3.g3:338:36: ( '0' ( '0' ( '0' )? )? )?
												int alt51=2;
												try { DebugEnterSubRule(51);
													try { DebugEnterDecision(51, false);
														int LA51_0 = input.LA(1);

														if ((LA51_0=='0'))
														{
															alt51 = 1;
														}
													} finally { DebugExitDecision(51); }
													switch (alt51)
													{
														case 1:
														DebugEnterAlt(1);
														// CSS3.g3:338:37: '0' ( '0' ( '0' )? )?
														{
															DebugLocation(338, 37);
															Match('0'); if (state.failed) return;
															DebugLocation(338, 41);
															// CSS3.g3:338:41: ( '0' ( '0' )? )?
															int alt50=2;
															try { DebugEnterSubRule(50);
																try { DebugEnterDecision(50, false);
																	int LA50_0 = input.LA(1);

																	if ((LA50_0=='0'))
																	{
																		alt50 = 1;
																	}
																} finally { DebugExitDecision(50); }
																switch (alt50)
																{
																	case 1:
																	DebugEnterAlt(1);
																	// CSS3.g3:338:42: '0' ( '0' )?
																	{
																		DebugLocation(338, 42);
																		Match('0'); if (state.failed) return;
																		DebugLocation(338, 46);
																		// CSS3.g3:338:46: ( '0' )?
																		int alt49=2;
																		try { DebugEnterSubRule(49);
																			try { DebugEnterDecision(49, false);
																				int LA49_0 = input.LA(1);

																				if ((LA49_0=='0'))
																				{
																					alt49 = 1;
																				}
																			} finally { DebugExitDecision(49); }
																			switch (alt49)
																			{
																				case 1:
																				DebugEnterAlt(1);
																				// CSS3.g3:338:46: '0'
																				{
																					DebugLocation(338, 46);
																					Match('0'); if (state.failed) return;

																				}
																				break;

																			}
																		} finally { DebugExitSubRule(49); }


																	}
																	break;

																}
															} finally { DebugExitSubRule(50); }


														}
														break;

													}
												} finally { DebugExitSubRule(51); }


											}
											break;

										}
									} finally { DebugExitSubRule(52); }

									DebugLocation(338, 57);
									input.Consume();
									state.failed=false;
									DebugLocation(338, 66);
									Match('7'); if (state.failed) return;

								}
								break;

							}
						} finally { DebugExitSubRule(53); }


					}
					break;

				}
			}
			finally
			{
				TraceOut("G", 15);
				LeaveRule("G", 15);
				LeaveRule_G();
			}
		}
		// $ANTLR end "G"

		partial void EnterRule_H();
		partial void LeaveRule_H();

		// $ANTLR start "H"
		[GrammarRule("H")]
		private void mH()
		{
			EnterRule_H();
			EnterRule("H", 16);
			TraceIn("H", 16);
			try
			{
				// CSS3.g3:341:17: ( ( 'h' | 'H' ) ( '\\r' | '\\n' | '\\t' | '\\f' | ' ' )* | '\\\\' ( 'h' | 'H' | ( '0' ( '0' ( '0' ( '0' )? )? )? )? ( '4' | '6' ) '8' ) )
				int alt61=2;
				try { DebugEnterDecision(61, false);
					int LA61_0 = input.LA(1);

					if ((LA61_0=='H'||LA61_0=='h'))
					{
						alt61 = 1;
					}
					else if ((LA61_0=='\\'))
					{
						alt61 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae = new NoViableAltException("", 61, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				} finally { DebugExitDecision(61); }
				switch (alt61)
				{
					case 1:
					DebugEnterAlt(1);
					// CSS3.g3:341:21: ( 'h' | 'H' ) ( '\\r' | '\\n' | '\\t' | '\\f' | ' ' )*
					{
						DebugLocation(341, 21);
						input.Consume();
						state.failed=false;
						DebugLocation(341, 31);
						// CSS3.g3:341:31: ( '\\r' | '\\n' | '\\t' | '\\f' | ' ' )*
						try { DebugEnterSubRule(55);
							while (true)
							{
								int alt55=2;
								try { DebugEnterDecision(55, false);
									int LA55_0 = input.LA(1);

									if (((LA55_0>='\t' && LA55_0<='\n')||(LA55_0>='\f' && LA55_0<='\r')||LA55_0==' '))
									{
										alt55 = 1;
									}


								} finally { DebugExitDecision(55); }
								switch ( alt55 )
								{
									case 1:
									DebugEnterAlt(1);
									// CSS3.g3:
									{
										DebugLocation(341, 31);
										input.Consume();
										state.failed=false;

									}
									break;

									default:
									goto loop55;
								}
							}

							loop55:
								;

						} finally { DebugExitSubRule(55); }


					}
					break;
					case 2:
					DebugEnterAlt(2);
					// CSS3.g3:342:19: '\\\\' ( 'h' | 'H' | ( '0' ( '0' ( '0' ( '0' )? )? )? )? ( '4' | '6' ) '8' )
					{
						DebugLocation(342, 19);
						Match('\\'); if (state.failed) return;
						DebugLocation(343, 25);
						// CSS3.g3:343:25: ( 'h' | 'H' | ( '0' ( '0' ( '0' ( '0' )? )? )? )? ( '4' | '6' ) '8' )
						int alt60=3;
						try { DebugEnterSubRule(60);
							try { DebugEnterDecision(60, false);
								switch (input.LA(1))
								{
									case 'h':
								{
									alt60 = 1;
								}
									break;
									case 'H':
								{
									alt60 = 2;
								}
									break;
									case '0':
									case '4':
									case '6':
								{
									alt60 = 3;
								}
									break;
									default:
								{
									if (state.backtracking>0) {state.failed=true; return;}
									NoViableAltException nvae = new NoViableAltException("", 60, 0, input);
									DebugRecognitionException(nvae);
									throw nvae;
								}
								}

							} finally { DebugExitDecision(60); }
							switch (alt60)
							{
								case 1:
								DebugEnterAlt(1);
								// CSS3.g3:344:31: 'h'
								{
									DebugLocation(344, 31);
									Match('h'); if (state.failed) return;

								}
								break;
								case 2:
								DebugEnterAlt(2);
								// CSS3.g3:345:31: 'H'
								{
									DebugLocation(345, 31);
									Match('H'); if (state.failed) return;

								}
								break;
								case 3:
								DebugEnterAlt(3);
								// CSS3.g3:346:31: ( '0' ( '0' ( '0' ( '0' )? )? )? )? ( '4' | '6' ) '8'
								{
									DebugLocation(346, 31);
									// CSS3.g3:346:31: ( '0' ( '0' ( '0' ( '0' )? )? )? )?
									int alt59=2;
									try { DebugEnterSubRule(59);
										try { DebugEnterDecision(59, false);
											int LA59_0 = input.LA(1);

											if ((LA59_0=='0'))
											{
												alt59 = 1;
											}
										} finally { DebugExitDecision(59); }
										switch (alt59)
										{
											case 1:
											DebugEnterAlt(1);
											// CSS3.g3:346:32: '0' ( '0' ( '0' ( '0' )? )? )?
											{
												DebugLocation(346, 32);
												Match('0'); if (state.failed) return;
												DebugLocation(346, 36);
												// CSS3.g3:346:36: ( '0' ( '0' ( '0' )? )? )?
												int alt58=2;
												try { DebugEnterSubRule(58);
													try { DebugEnterDecision(58, false);
														int LA58_0 = input.LA(1);

														if ((LA58_0=='0'))
														{
															alt58 = 1;
														}
													} finally { DebugExitDecision(58); }
													switch (alt58)
													{
														case 1:
														DebugEnterAlt(1);
														// CSS3.g3:346:37: '0' ( '0' ( '0' )? )?
														{
															DebugLocation(346, 37);
															Match('0'); if (state.failed) return;
															DebugLocation(346, 41);
															// CSS3.g3:346:41: ( '0' ( '0' )? )?
															int alt57=2;
															try { DebugEnterSubRule(57);
																try { DebugEnterDecision(57, false);
																	int LA57_0 = input.LA(1);

																	if ((LA57_0=='0'))
																	{
																		alt57 = 1;
																	}
																} finally { DebugExitDecision(57); }
																switch (alt57)
																{
																	case 1:
																	DebugEnterAlt(1);
																	// CSS3.g3:346:42: '0' ( '0' )?
																	{
																		DebugLocation(346, 42);
																		Match('0'); if (state.failed) return;
																		DebugLocation(346, 46);
																		// CSS3.g3:346:46: ( '0' )?
																		int alt56=2;
																		try { DebugEnterSubRule(56);
																			try { DebugEnterDecision(56, false);
																				int LA56_0 = input.LA(1);

																				if ((LA56_0=='0'))
																				{
																					alt56 = 1;
																				}
																			} finally { DebugExitDecision(56); }
																			switch (alt56)
																			{
																				case 1:
																				DebugEnterAlt(1);
																				// CSS3.g3:346:46: '0'
																				{
																					DebugLocation(346, 46);
																					Match('0'); if (state.failed) return;

																				}
																				break;

																			}
																		} finally { DebugExitSubRule(56); }


																	}
																	break;

																}
															} finally { DebugExitSubRule(57); }


														}
														break;

													}
												} finally { DebugExitSubRule(58); }


											}
											break;

										}
									} finally { DebugExitSubRule(59); }

									DebugLocation(346, 57);
									input.Consume();
									state.failed=false;
									DebugLocation(346, 66);
									Match('8'); if (state.failed) return;

								}
								break;

							}
						} finally { DebugExitSubRule(60); }


					}
					break;

				}
			}
			finally
			{
				TraceOut("H", 16);
				LeaveRule("H", 16);
				LeaveRule_H();
			}
		}
		// $ANTLR end "H"

		partial void EnterRule_I();
		partial void LeaveRule_I();

		// $ANTLR start "I"
		[GrammarRule("I")]
		private void mI()
		{
			EnterRule_I();
			EnterRule("I", 17);
			TraceIn("I", 17);
			try
			{
				// CSS3.g3:349:17: ( ( 'i' | 'I' ) ( '\\r' | '\\n' | '\\t' | '\\f' | ' ' )* | '\\\\' ( 'i' | 'I' | ( '0' ( '0' ( '0' ( '0' )? )? )? )? ( '4' | '6' ) '9' ) )
				int alt68=2;
				try { DebugEnterDecision(68, false);
					int LA68_0 = input.LA(1);

					if ((LA68_0=='I'||LA68_0=='i'))
					{
						alt68 = 1;
					}
					else if ((LA68_0=='\\'))
					{
						alt68 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae = new NoViableAltException("", 68, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				} finally { DebugExitDecision(68); }
				switch (alt68)
				{
					case 1:
					DebugEnterAlt(1);
					// CSS3.g3:349:21: ( 'i' | 'I' ) ( '\\r' | '\\n' | '\\t' | '\\f' | ' ' )*
					{
						DebugLocation(349, 21);
						input.Consume();
						state.failed=false;
						DebugLocation(349, 31);
						// CSS3.g3:349:31: ( '\\r' | '\\n' | '\\t' | '\\f' | ' ' )*
						try { DebugEnterSubRule(62);
							while (true)
							{
								int alt62=2;
								try { DebugEnterDecision(62, false);
									int LA62_0 = input.LA(1);

									if (((LA62_0>='\t' && LA62_0<='\n')||(LA62_0>='\f' && LA62_0<='\r')||LA62_0==' '))
									{
										alt62 = 1;
									}


								} finally { DebugExitDecision(62); }
								switch ( alt62 )
								{
									case 1:
									DebugEnterAlt(1);
									// CSS3.g3:
									{
										DebugLocation(349, 31);
										input.Consume();
										state.failed=false;

									}
									break;

									default:
									goto loop62;
								}
							}

							loop62:
								;

						} finally { DebugExitSubRule(62); }


					}
					break;
					case 2:
					DebugEnterAlt(2);
					// CSS3.g3:350:19: '\\\\' ( 'i' | 'I' | ( '0' ( '0' ( '0' ( '0' )? )? )? )? ( '4' | '6' ) '9' )
					{
						DebugLocation(350, 19);
						Match('\\'); if (state.failed) return;
						DebugLocation(351, 25);
						// CSS3.g3:351:25: ( 'i' | 'I' | ( '0' ( '0' ( '0' ( '0' )? )? )? )? ( '4' | '6' ) '9' )
						int alt67=3;
						try { DebugEnterSubRule(67);
							try { DebugEnterDecision(67, false);
								switch (input.LA(1))
								{
									case 'i':
								{
									alt67 = 1;
								}
									break;
									case 'I':
								{
									alt67 = 2;
								}
									break;
									case '0':
									case '4':
									case '6':
								{
									alt67 = 3;
								}
									break;
									default:
								{
									if (state.backtracking>0) {state.failed=true; return;}
									NoViableAltException nvae = new NoViableAltException("", 67, 0, input);
									DebugRecognitionException(nvae);
									throw nvae;
								}
								}

							} finally { DebugExitDecision(67); }
							switch (alt67)
							{
								case 1:
								DebugEnterAlt(1);
								// CSS3.g3:352:31: 'i'
								{
									DebugLocation(352, 31);
									Match('i'); if (state.failed) return;

								}
								break;
								case 2:
								DebugEnterAlt(2);
								// CSS3.g3:353:31: 'I'
								{
									DebugLocation(353, 31);
									Match('I'); if (state.failed) return;

								}
								break;
								case 3:
								DebugEnterAlt(3);
								// CSS3.g3:354:31: ( '0' ( '0' ( '0' ( '0' )? )? )? )? ( '4' | '6' ) '9'
								{
									DebugLocation(354, 31);
									// CSS3.g3:354:31: ( '0' ( '0' ( '0' ( '0' )? )? )? )?
									int alt66=2;
									try { DebugEnterSubRule(66);
										try { DebugEnterDecision(66, false);
											int LA66_0 = input.LA(1);

											if ((LA66_0=='0'))
											{
												alt66 = 1;
											}
										} finally { DebugExitDecision(66); }
										switch (alt66)
										{
											case 1:
											DebugEnterAlt(1);
											// CSS3.g3:354:32: '0' ( '0' ( '0' ( '0' )? )? )?
											{
												DebugLocation(354, 32);
												Match('0'); if (state.failed) return;
												DebugLocation(354, 36);
												// CSS3.g3:354:36: ( '0' ( '0' ( '0' )? )? )?
												int alt65=2;
												try { DebugEnterSubRule(65);
													try { DebugEnterDecision(65, false);
														int LA65_0 = input.LA(1);

														if ((LA65_0=='0'))
														{
															alt65 = 1;
														}
													} finally { DebugExitDecision(65); }
													switch (alt65)
													{
														case 1:
														DebugEnterAlt(1);
														// CSS3.g3:354:37: '0' ( '0' ( '0' )? )?
														{
															DebugLocation(354, 37);
															Match('0'); if (state.failed) return;
															DebugLocation(354, 41);
															// CSS3.g3:354:41: ( '0' ( '0' )? )?
															int alt64=2;
															try { DebugEnterSubRule(64);
																try { DebugEnterDecision(64, false);
																	int LA64_0 = input.LA(1);

																	if ((LA64_0=='0'))
																	{
																		alt64 = 1;
																	}
																} finally { DebugExitDecision(64); }
																switch (alt64)
																{
																	case 1:
																	DebugEnterAlt(1);
																	// CSS3.g3:354:42: '0' ( '0' )?
																	{
																		DebugLocation(354, 42);
																		Match('0'); if (state.failed) return;
																		DebugLocation(354, 46);
																		// CSS3.g3:354:46: ( '0' )?
																		int alt63=2;
																		try { DebugEnterSubRule(63);
																			try { DebugEnterDecision(63, false);
																				int LA63_0 = input.LA(1);

																				if ((LA63_0=='0'))
																				{
																					alt63 = 1;
																				}
																			} finally { DebugExitDecision(63); }
																			switch (alt63)
																			{
																				case 1:
																				DebugEnterAlt(1);
																				// CSS3.g3:354:46: '0'
																				{
																					DebugLocation(354, 46);
																					Match('0'); if (state.failed) return;

																				}
																				break;

																			}
																		} finally { DebugExitSubRule(63); }


																	}
																	break;

																}
															} finally { DebugExitSubRule(64); }


														}
														break;

													}
												} finally { DebugExitSubRule(65); }


											}
											break;

										}
									} finally { DebugExitSubRule(66); }

									DebugLocation(354, 57);
									input.Consume();
									state.failed=false;
									DebugLocation(354, 66);
									Match('9'); if (state.failed) return;

								}
								break;

							}
						} finally { DebugExitSubRule(67); }


					}
					break;

				}
			}
			finally
			{
				TraceOut("I", 17);
				LeaveRule("I", 17);
				LeaveRule_I();
			}
		}
		// $ANTLR end "I"

		partial void EnterRule_J();
		partial void LeaveRule_J();

		// $ANTLR start "J"
		[GrammarRule("J")]
		private void mJ()
		{
			EnterRule_J();
			EnterRule("J", 18);
			TraceIn("J", 18);
			try
			{
				// CSS3.g3:357:17: ( ( 'j' | 'J' ) ( '\\r' | '\\n' | '\\t' | '\\f' | ' ' )* | '\\\\' ( 'j' | 'J' | ( '0' ( '0' ( '0' ( '0' )? )? )? )? ( '4' | '6' ) ( 'A' | 'a' ) ) )
				int alt75=2;
				try { DebugEnterDecision(75, false);
					int LA75_0 = input.LA(1);

					if ((LA75_0=='J'||LA75_0=='j'))
					{
						alt75 = 1;
					}
					else if ((LA75_0=='\\'))
					{
						alt75 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae = new NoViableAltException("", 75, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				} finally { DebugExitDecision(75); }
				switch (alt75)
				{
					case 1:
					DebugEnterAlt(1);
					// CSS3.g3:357:21: ( 'j' | 'J' ) ( '\\r' | '\\n' | '\\t' | '\\f' | ' ' )*
					{
						DebugLocation(357, 21);
						input.Consume();
						state.failed=false;
						DebugLocation(357, 31);
						// CSS3.g3:357:31: ( '\\r' | '\\n' | '\\t' | '\\f' | ' ' )*
						try { DebugEnterSubRule(69);
							while (true)
							{
								int alt69=2;
								try { DebugEnterDecision(69, false);
									int LA69_0 = input.LA(1);

									if (((LA69_0>='\t' && LA69_0<='\n')||(LA69_0>='\f' && LA69_0<='\r')||LA69_0==' '))
									{
										alt69 = 1;
									}


								} finally { DebugExitDecision(69); }
								switch ( alt69 )
								{
									case 1:
									DebugEnterAlt(1);
									// CSS3.g3:
									{
										DebugLocation(357, 31);
										input.Consume();
										state.failed=false;

									}
									break;

									default:
									goto loop69;
								}
							}

							loop69:
								;

						} finally { DebugExitSubRule(69); }


					}
					break;
					case 2:
					DebugEnterAlt(2);
					// CSS3.g3:358:19: '\\\\' ( 'j' | 'J' | ( '0' ( '0' ( '0' ( '0' )? )? )? )? ( '4' | '6' ) ( 'A' | 'a' ) )
					{
						DebugLocation(358, 19);
						Match('\\'); if (state.failed) return;
						DebugLocation(359, 25);
						// CSS3.g3:359:25: ( 'j' | 'J' | ( '0' ( '0' ( '0' ( '0' )? )? )? )? ( '4' | '6' ) ( 'A' | 'a' ) )
						int alt74=3;
						try { DebugEnterSubRule(74);
							try { DebugEnterDecision(74, false);
								switch (input.LA(1))
								{
									case 'j':
								{
									alt74 = 1;
								}
									break;
									case 'J':
								{
									alt74 = 2;
								}
									break;
									case '0':
									case '4':
									case '6':
								{
									alt74 = 3;
								}
									break;
									default:
								{
									if (state.backtracking>0) {state.failed=true; return;}
									NoViableAltException nvae = new NoViableAltException("", 74, 0, input);
									DebugRecognitionException(nvae);
									throw nvae;
								}
								}

							} finally { DebugExitDecision(74); }
							switch (alt74)
							{
								case 1:
								DebugEnterAlt(1);
								// CSS3.g3:360:31: 'j'
								{
									DebugLocation(360, 31);
									Match('j'); if (state.failed) return;

								}
								break;
								case 2:
								DebugEnterAlt(2);
								// CSS3.g3:361:31: 'J'
								{
									DebugLocation(361, 31);
									Match('J'); if (state.failed) return;

								}
								break;
								case 3:
								DebugEnterAlt(3);
								// CSS3.g3:362:31: ( '0' ( '0' ( '0' ( '0' )? )? )? )? ( '4' | '6' ) ( 'A' | 'a' )
								{
									DebugLocation(362, 31);
									// CSS3.g3:362:31: ( '0' ( '0' ( '0' ( '0' )? )? )? )?
									int alt73=2;
									try { DebugEnterSubRule(73);
										try { DebugEnterDecision(73, false);
											int LA73_0 = input.LA(1);

											if ((LA73_0=='0'))
											{
												alt73 = 1;
											}
										} finally { DebugExitDecision(73); }
										switch (alt73)
										{
											case 1:
											DebugEnterAlt(1);
											// CSS3.g3:362:32: '0' ( '0' ( '0' ( '0' )? )? )?
											{
												DebugLocation(362, 32);
												Match('0'); if (state.failed) return;
												DebugLocation(362, 36);
												// CSS3.g3:362:36: ( '0' ( '0' ( '0' )? )? )?
												int alt72=2;
												try { DebugEnterSubRule(72);
													try { DebugEnterDecision(72, false);
														int LA72_0 = input.LA(1);

														if ((LA72_0=='0'))
														{
															alt72 = 1;
														}
													} finally { DebugExitDecision(72); }
													switch (alt72)
													{
														case 1:
														DebugEnterAlt(1);
														// CSS3.g3:362:37: '0' ( '0' ( '0' )? )?
														{
															DebugLocation(362, 37);
															Match('0'); if (state.failed) return;
															DebugLocation(362, 41);
															// CSS3.g3:362:41: ( '0' ( '0' )? )?
															int alt71=2;
															try { DebugEnterSubRule(71);
																try { DebugEnterDecision(71, false);
																	int LA71_0 = input.LA(1);

																	if ((LA71_0=='0'))
																	{
																		alt71 = 1;
																	}
																} finally { DebugExitDecision(71); }
																switch (alt71)
																{
																	case 1:
																	DebugEnterAlt(1);
																	// CSS3.g3:362:42: '0' ( '0' )?
																	{
																		DebugLocation(362, 42);
																		Match('0'); if (state.failed) return;
																		DebugLocation(362, 46);
																		// CSS3.g3:362:46: ( '0' )?
																		int alt70=2;
																		try { DebugEnterSubRule(70);
																			try { DebugEnterDecision(70, false);
																				int LA70_0 = input.LA(1);

																				if ((LA70_0=='0'))
																				{
																					alt70 = 1;
																				}
																			} finally { DebugExitDecision(70); }
																			switch (alt70)
																			{
																				case 1:
																				DebugEnterAlt(1);
																				// CSS3.g3:362:46: '0'
																				{
																					DebugLocation(362, 46);
																					Match('0'); if (state.failed) return;

																				}
																				break;

																			}
																		} finally { DebugExitSubRule(70); }


																	}
																	break;

																}
															} finally { DebugExitSubRule(71); }


														}
														break;

													}
												} finally { DebugExitSubRule(72); }


											}
											break;

										}
									} finally { DebugExitSubRule(73); }

									DebugLocation(362, 57);
									input.Consume();
									state.failed=false;
									DebugLocation(362, 66);
									input.Consume();
									state.failed=false;

								}
								break;

							}
						} finally { DebugExitSubRule(74); }


					}
					break;

				}
			}
			finally
			{
				TraceOut("J", 18);
				LeaveRule("J", 18);
				LeaveRule_J();
			}
		}
		// $ANTLR end "J"

		partial void EnterRule_K();
		partial void LeaveRule_K();

		// $ANTLR start "K"
		[GrammarRule("K")]
		private void mK()
		{
			EnterRule_K();
			EnterRule("K", 19);
			TraceIn("K", 19);
			try
			{
				// CSS3.g3:365:17: ( ( 'k' | 'K' ) ( '\\r' | '\\n' | '\\t' | '\\f' | ' ' )* | '\\\\' ( 'k' | 'K' | ( '0' ( '0' ( '0' ( '0' )? )? )? )? ( '4' | '6' ) ( 'B' | 'b' ) ) )
				int alt82=2;
				try { DebugEnterDecision(82, false);
					int LA82_0 = input.LA(1);

					if ((LA82_0=='K'||LA82_0=='k'))
					{
						alt82 = 1;
					}
					else if ((LA82_0=='\\'))
					{
						alt82 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae = new NoViableAltException("", 82, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				} finally { DebugExitDecision(82); }
				switch (alt82)
				{
					case 1:
					DebugEnterAlt(1);
					// CSS3.g3:365:21: ( 'k' | 'K' ) ( '\\r' | '\\n' | '\\t' | '\\f' | ' ' )*
					{
						DebugLocation(365, 21);
						input.Consume();
						state.failed=false;
						DebugLocation(365, 31);
						// CSS3.g3:365:31: ( '\\r' | '\\n' | '\\t' | '\\f' | ' ' )*
						try { DebugEnterSubRule(76);
							while (true)
							{
								int alt76=2;
								try { DebugEnterDecision(76, false);
									int LA76_0 = input.LA(1);

									if (((LA76_0>='\t' && LA76_0<='\n')||(LA76_0>='\f' && LA76_0<='\r')||LA76_0==' '))
									{
										alt76 = 1;
									}


								} finally { DebugExitDecision(76); }
								switch ( alt76 )
								{
									case 1:
									DebugEnterAlt(1);
									// CSS3.g3:
									{
										DebugLocation(365, 31);
										input.Consume();
										state.failed=false;

									}
									break;

									default:
									goto loop76;
								}
							}

							loop76:
								;

						} finally { DebugExitSubRule(76); }


					}
					break;
					case 2:
					DebugEnterAlt(2);
					// CSS3.g3:366:19: '\\\\' ( 'k' | 'K' | ( '0' ( '0' ( '0' ( '0' )? )? )? )? ( '4' | '6' ) ( 'B' | 'b' ) )
					{
						DebugLocation(366, 19);
						Match('\\'); if (state.failed) return;
						DebugLocation(367, 25);
						// CSS3.g3:367:25: ( 'k' | 'K' | ( '0' ( '0' ( '0' ( '0' )? )? )? )? ( '4' | '6' ) ( 'B' | 'b' ) )
						int alt81=3;
						try { DebugEnterSubRule(81);
							try { DebugEnterDecision(81, false);
								switch (input.LA(1))
								{
									case 'k':
								{
									alt81 = 1;
								}
									break;
									case 'K':
								{
									alt81 = 2;
								}
									break;
									case '0':
									case '4':
									case '6':
								{
									alt81 = 3;
								}
									break;
									default:
								{
									if (state.backtracking>0) {state.failed=true; return;}
									NoViableAltException nvae = new NoViableAltException("", 81, 0, input);
									DebugRecognitionException(nvae);
									throw nvae;
								}
								}

							} finally { DebugExitDecision(81); }
							switch (alt81)
							{
								case 1:
								DebugEnterAlt(1);
								// CSS3.g3:368:31: 'k'
								{
									DebugLocation(368, 31);
									Match('k'); if (state.failed) return;

								}
								break;
								case 2:
								DebugEnterAlt(2);
								// CSS3.g3:369:31: 'K'
								{
									DebugLocation(369, 31);
									Match('K'); if (state.failed) return;

								}
								break;
								case 3:
								DebugEnterAlt(3);
								// CSS3.g3:370:31: ( '0' ( '0' ( '0' ( '0' )? )? )? )? ( '4' | '6' ) ( 'B' | 'b' )
								{
									DebugLocation(370, 31);
									// CSS3.g3:370:31: ( '0' ( '0' ( '0' ( '0' )? )? )? )?
									int alt80=2;
									try { DebugEnterSubRule(80);
										try { DebugEnterDecision(80, false);
											int LA80_0 = input.LA(1);

											if ((LA80_0=='0'))
											{
												alt80 = 1;
											}
										} finally { DebugExitDecision(80); }
										switch (alt80)
										{
											case 1:
											DebugEnterAlt(1);
											// CSS3.g3:370:32: '0' ( '0' ( '0' ( '0' )? )? )?
											{
												DebugLocation(370, 32);
												Match('0'); if (state.failed) return;
												DebugLocation(370, 36);
												// CSS3.g3:370:36: ( '0' ( '0' ( '0' )? )? )?
												int alt79=2;
												try { DebugEnterSubRule(79);
													try { DebugEnterDecision(79, false);
														int LA79_0 = input.LA(1);

														if ((LA79_0=='0'))
														{
															alt79 = 1;
														}
													} finally { DebugExitDecision(79); }
													switch (alt79)
													{
														case 1:
														DebugEnterAlt(1);
														// CSS3.g3:370:37: '0' ( '0' ( '0' )? )?
														{
															DebugLocation(370, 37);
															Match('0'); if (state.failed) return;
															DebugLocation(370, 41);
															// CSS3.g3:370:41: ( '0' ( '0' )? )?
															int alt78=2;
															try { DebugEnterSubRule(78);
																try { DebugEnterDecision(78, false);
																	int LA78_0 = input.LA(1);

																	if ((LA78_0=='0'))
																	{
																		alt78 = 1;
																	}
																} finally { DebugExitDecision(78); }
																switch (alt78)
																{
																	case 1:
																	DebugEnterAlt(1);
																	// CSS3.g3:370:42: '0' ( '0' )?
																	{
																		DebugLocation(370, 42);
																		Match('0'); if (state.failed) return;
																		DebugLocation(370, 46);
																		// CSS3.g3:370:46: ( '0' )?
																		int alt77=2;
																		try { DebugEnterSubRule(77);
																			try { DebugEnterDecision(77, false);
																				int LA77_0 = input.LA(1);

																				if ((LA77_0=='0'))
																				{
																					alt77 = 1;
																				}
																			} finally { DebugExitDecision(77); }
																			switch (alt77)
																			{
																				case 1:
																				DebugEnterAlt(1);
																				// CSS3.g3:370:46: '0'
																				{
																					DebugLocation(370, 46);
																					Match('0'); if (state.failed) return;

																				}
																				break;

																			}
																		} finally { DebugExitSubRule(77); }


																	}
																	break;

																}
															} finally { DebugExitSubRule(78); }


														}
														break;

													}
												} finally { DebugExitSubRule(79); }


											}
											break;

										}
									} finally { DebugExitSubRule(80); }

									DebugLocation(370, 57);
									input.Consume();
									state.failed=false;
									DebugLocation(370, 66);
									input.Consume();
									state.failed=false;

								}
								break;

							}
						} finally { DebugExitSubRule(81); }


					}
					break;

				}
			}
			finally
			{
				TraceOut("K", 19);
				LeaveRule("K", 19);
				LeaveRule_K();
			}
		}
		// $ANTLR end "K"

		partial void EnterRule_L();
		partial void LeaveRule_L();

		// $ANTLR start "L"
		[GrammarRule("L")]
		private void mL()
		{
			EnterRule_L();
			EnterRule("L", 20);
			TraceIn("L", 20);
			try
			{
				// CSS3.g3:373:17: ( ( 'l' | 'L' ) ( '\\r' | '\\n' | '\\t' | '\\f' | ' ' )* | '\\\\' ( 'l' | 'L' | ( '0' ( '0' ( '0' ( '0' )? )? )? )? ( '4' | '6' ) ( 'C' | 'c' ) ) )
				int alt89=2;
				try { DebugEnterDecision(89, false);
					int LA89_0 = input.LA(1);

					if ((LA89_0=='L'||LA89_0=='l'))
					{
						alt89 = 1;
					}
					else if ((LA89_0=='\\'))
					{
						alt89 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae = new NoViableAltException("", 89, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				} finally { DebugExitDecision(89); }
				switch (alt89)
				{
					case 1:
					DebugEnterAlt(1);
					// CSS3.g3:373:21: ( 'l' | 'L' ) ( '\\r' | '\\n' | '\\t' | '\\f' | ' ' )*
					{
						DebugLocation(373, 21);
						input.Consume();
						state.failed=false;
						DebugLocation(373, 31);
						// CSS3.g3:373:31: ( '\\r' | '\\n' | '\\t' | '\\f' | ' ' )*
						try { DebugEnterSubRule(83);
							while (true)
							{
								int alt83=2;
								try { DebugEnterDecision(83, false);
									int LA83_0 = input.LA(1);

									if (((LA83_0>='\t' && LA83_0<='\n')||(LA83_0>='\f' && LA83_0<='\r')||LA83_0==' '))
									{
										alt83 = 1;
									}


								} finally { DebugExitDecision(83); }
								switch ( alt83 )
								{
									case 1:
									DebugEnterAlt(1);
									// CSS3.g3:
									{
										DebugLocation(373, 31);
										input.Consume();
										state.failed=false;

									}
									break;

									default:
									goto loop83;
								}
							}

							loop83:
								;

						} finally { DebugExitSubRule(83); }


					}
					break;
					case 2:
					DebugEnterAlt(2);
					// CSS3.g3:374:19: '\\\\' ( 'l' | 'L' | ( '0' ( '0' ( '0' ( '0' )? )? )? )? ( '4' | '6' ) ( 'C' | 'c' ) )
					{
						DebugLocation(374, 19);
						Match('\\'); if (state.failed) return;
						DebugLocation(375, 25);
						// CSS3.g3:375:25: ( 'l' | 'L' | ( '0' ( '0' ( '0' ( '0' )? )? )? )? ( '4' | '6' ) ( 'C' | 'c' ) )
						int alt88=3;
						try { DebugEnterSubRule(88);
							try { DebugEnterDecision(88, false);
								switch (input.LA(1))
								{
									case 'l':
								{
									alt88 = 1;
								}
									break;
									case 'L':
								{
									alt88 = 2;
								}
									break;
									case '0':
									case '4':
									case '6':
								{
									alt88 = 3;
								}
									break;
									default:
								{
									if (state.backtracking>0) {state.failed=true; return;}
									NoViableAltException nvae = new NoViableAltException("", 88, 0, input);
									DebugRecognitionException(nvae);
									throw nvae;
								}
								}

							} finally { DebugExitDecision(88); }
							switch (alt88)
							{
								case 1:
								DebugEnterAlt(1);
								// CSS3.g3:376:31: 'l'
								{
									DebugLocation(376, 31);
									Match('l'); if (state.failed) return;

								}
								break;
								case 2:
								DebugEnterAlt(2);
								// CSS3.g3:377:31: 'L'
								{
									DebugLocation(377, 31);
									Match('L'); if (state.failed) return;

								}
								break;
								case 3:
								DebugEnterAlt(3);
								// CSS3.g3:378:31: ( '0' ( '0' ( '0' ( '0' )? )? )? )? ( '4' | '6' ) ( 'C' | 'c' )
								{
									DebugLocation(378, 31);
									// CSS3.g3:378:31: ( '0' ( '0' ( '0' ( '0' )? )? )? )?
									int alt87=2;
									try { DebugEnterSubRule(87);
										try { DebugEnterDecision(87, false);
											int LA87_0 = input.LA(1);

											if ((LA87_0=='0'))
											{
												alt87 = 1;
											}
										} finally { DebugExitDecision(87); }
										switch (alt87)
										{
											case 1:
											DebugEnterAlt(1);
											// CSS3.g3:378:32: '0' ( '0' ( '0' ( '0' )? )? )?
											{
												DebugLocation(378, 32);
												Match('0'); if (state.failed) return;
												DebugLocation(378, 36);
												// CSS3.g3:378:36: ( '0' ( '0' ( '0' )? )? )?
												int alt86=2;
												try { DebugEnterSubRule(86);
													try { DebugEnterDecision(86, false);
														int LA86_0 = input.LA(1);

														if ((LA86_0=='0'))
														{
															alt86 = 1;
														}
													} finally { DebugExitDecision(86); }
													switch (alt86)
													{
														case 1:
														DebugEnterAlt(1);
														// CSS3.g3:378:37: '0' ( '0' ( '0' )? )?
														{
															DebugLocation(378, 37);
															Match('0'); if (state.failed) return;
															DebugLocation(378, 41);
															// CSS3.g3:378:41: ( '0' ( '0' )? )?
															int alt85=2;
															try { DebugEnterSubRule(85);
																try { DebugEnterDecision(85, false);
																	int LA85_0 = input.LA(1);

																	if ((LA85_0=='0'))
																	{
																		alt85 = 1;
																	}
																} finally { DebugExitDecision(85); }
																switch (alt85)
																{
																	case 1:
																	DebugEnterAlt(1);
																	// CSS3.g3:378:42: '0' ( '0' )?
																	{
																		DebugLocation(378, 42);
																		Match('0'); if (state.failed) return;
																		DebugLocation(378, 46);
																		// CSS3.g3:378:46: ( '0' )?
																		int alt84=2;
																		try { DebugEnterSubRule(84);
																			try { DebugEnterDecision(84, false);
																				int LA84_0 = input.LA(1);

																				if ((LA84_0=='0'))
																				{
																					alt84 = 1;
																				}
																			} finally { DebugExitDecision(84); }
																			switch (alt84)
																			{
																				case 1:
																				DebugEnterAlt(1);
																				// CSS3.g3:378:46: '0'
																				{
																					DebugLocation(378, 46);
																					Match('0'); if (state.failed) return;

																				}
																				break;

																			}
																		} finally { DebugExitSubRule(84); }


																	}
																	break;

																}
															} finally { DebugExitSubRule(85); }


														}
														break;

													}
												} finally { DebugExitSubRule(86); }


											}
											break;

										}
									} finally { DebugExitSubRule(87); }

									DebugLocation(378, 57);
									input.Consume();
									state.failed=false;
									DebugLocation(378, 66);
									input.Consume();
									state.failed=false;

								}
								break;

							}
						} finally { DebugExitSubRule(88); }


					}
					break;

				}
			}
			finally
			{
				TraceOut("L", 20);
				LeaveRule("L", 20);
				LeaveRule_L();
			}
		}
		// $ANTLR end "L"

		partial void EnterRule_M();
		partial void LeaveRule_M();

		// $ANTLR start "M"
		[GrammarRule("M")]
		private void mM()
		{
			EnterRule_M();
			EnterRule("M", 21);
			TraceIn("M", 21);
			try
			{
				// CSS3.g3:381:17: ( ( 'm' | 'M' ) ( '\\r' | '\\n' | '\\t' | '\\f' | ' ' )* | '\\\\' ( 'm' | 'M' | ( '0' ( '0' ( '0' ( '0' )? )? )? )? ( '4' | '6' ) ( 'D' | 'd' ) ) )
				int alt96=2;
				try { DebugEnterDecision(96, false);
					int LA96_0 = input.LA(1);

					if ((LA96_0=='M'||LA96_0=='m'))
					{
						alt96 = 1;
					}
					else if ((LA96_0=='\\'))
					{
						alt96 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae = new NoViableAltException("", 96, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				} finally { DebugExitDecision(96); }
				switch (alt96)
				{
					case 1:
					DebugEnterAlt(1);
					// CSS3.g3:381:21: ( 'm' | 'M' ) ( '\\r' | '\\n' | '\\t' | '\\f' | ' ' )*
					{
						DebugLocation(381, 21);
						input.Consume();
						state.failed=false;
						DebugLocation(381, 31);
						// CSS3.g3:381:31: ( '\\r' | '\\n' | '\\t' | '\\f' | ' ' )*
						try { DebugEnterSubRule(90);
							while (true)
							{
								int alt90=2;
								try { DebugEnterDecision(90, false);
									int LA90_0 = input.LA(1);

									if (((LA90_0>='\t' && LA90_0<='\n')||(LA90_0>='\f' && LA90_0<='\r')||LA90_0==' '))
									{
										alt90 = 1;
									}


								} finally { DebugExitDecision(90); }
								switch ( alt90 )
								{
									case 1:
									DebugEnterAlt(1);
									// CSS3.g3:
									{
										DebugLocation(381, 31);
										input.Consume();
										state.failed=false;

									}
									break;

									default:
									goto loop90;
								}
							}

							loop90:
								;

						} finally { DebugExitSubRule(90); }


					}
					break;
					case 2:
					DebugEnterAlt(2);
					// CSS3.g3:382:19: '\\\\' ( 'm' | 'M' | ( '0' ( '0' ( '0' ( '0' )? )? )? )? ( '4' | '6' ) ( 'D' | 'd' ) )
					{
						DebugLocation(382, 19);
						Match('\\'); if (state.failed) return;
						DebugLocation(383, 25);
						// CSS3.g3:383:25: ( 'm' | 'M' | ( '0' ( '0' ( '0' ( '0' )? )? )? )? ( '4' | '6' ) ( 'D' | 'd' ) )
						int alt95=3;
						try { DebugEnterSubRule(95);
							try { DebugEnterDecision(95, false);
								switch (input.LA(1))
								{
									case 'm':
								{
									alt95 = 1;
								}
									break;
									case 'M':
								{
									alt95 = 2;
								}
									break;
									case '0':
									case '4':
									case '6':
								{
									alt95 = 3;
								}
									break;
									default:
								{
									if (state.backtracking>0) {state.failed=true; return;}
									NoViableAltException nvae = new NoViableAltException("", 95, 0, input);
									DebugRecognitionException(nvae);
									throw nvae;
								}
								}

							} finally { DebugExitDecision(95); }
							switch (alt95)
							{
								case 1:
								DebugEnterAlt(1);
								// CSS3.g3:384:31: 'm'
								{
									DebugLocation(384, 31);
									Match('m'); if (state.failed) return;

								}
								break;
								case 2:
								DebugEnterAlt(2);
								// CSS3.g3:385:31: 'M'
								{
									DebugLocation(385, 31);
									Match('M'); if (state.failed) return;

								}
								break;
								case 3:
								DebugEnterAlt(3);
								// CSS3.g3:386:31: ( '0' ( '0' ( '0' ( '0' )? )? )? )? ( '4' | '6' ) ( 'D' | 'd' )
								{
									DebugLocation(386, 31);
									// CSS3.g3:386:31: ( '0' ( '0' ( '0' ( '0' )? )? )? )?
									int alt94=2;
									try { DebugEnterSubRule(94);
										try { DebugEnterDecision(94, false);
											int LA94_0 = input.LA(1);

											if ((LA94_0=='0'))
											{
												alt94 = 1;
											}
										} finally { DebugExitDecision(94); }
										switch (alt94)
										{
											case 1:
											DebugEnterAlt(1);
											// CSS3.g3:386:32: '0' ( '0' ( '0' ( '0' )? )? )?
											{
												DebugLocation(386, 32);
												Match('0'); if (state.failed) return;
												DebugLocation(386, 36);
												// CSS3.g3:386:36: ( '0' ( '0' ( '0' )? )? )?
												int alt93=2;
												try { DebugEnterSubRule(93);
													try { DebugEnterDecision(93, false);
														int LA93_0 = input.LA(1);

														if ((LA93_0=='0'))
														{
															alt93 = 1;
														}
													} finally { DebugExitDecision(93); }
													switch (alt93)
													{
														case 1:
														DebugEnterAlt(1);
														// CSS3.g3:386:37: '0' ( '0' ( '0' )? )?
														{
															DebugLocation(386, 37);
															Match('0'); if (state.failed) return;
															DebugLocation(386, 41);
															// CSS3.g3:386:41: ( '0' ( '0' )? )?
															int alt92=2;
															try { DebugEnterSubRule(92);
																try { DebugEnterDecision(92, false);
																	int LA92_0 = input.LA(1);

																	if ((LA92_0=='0'))
																	{
																		alt92 = 1;
																	}
																} finally { DebugExitDecision(92); }
																switch (alt92)
																{
																	case 1:
																	DebugEnterAlt(1);
																	// CSS3.g3:386:42: '0' ( '0' )?
																	{
																		DebugLocation(386, 42);
																		Match('0'); if (state.failed) return;
																		DebugLocation(386, 46);
																		// CSS3.g3:386:46: ( '0' )?
																		int alt91=2;
																		try { DebugEnterSubRule(91);
																			try { DebugEnterDecision(91, false);
																				int LA91_0 = input.LA(1);

																				if ((LA91_0=='0'))
																				{
																					alt91 = 1;
																				}
																			} finally { DebugExitDecision(91); }
																			switch (alt91)
																			{
																				case 1:
																				DebugEnterAlt(1);
																				// CSS3.g3:386:46: '0'
																				{
																					DebugLocation(386, 46);
																					Match('0'); if (state.failed) return;

																				}
																				break;

																			}
																		} finally { DebugExitSubRule(91); }


																	}
																	break;

																}
															} finally { DebugExitSubRule(92); }


														}
														break;

													}
												} finally { DebugExitSubRule(93); }


											}
											break;

										}
									} finally { DebugExitSubRule(94); }

									DebugLocation(386, 57);
									input.Consume();
									state.failed=false;
									DebugLocation(386, 66);
									input.Consume();
									state.failed=false;

								}
								break;

							}
						} finally { DebugExitSubRule(95); }


					}
					break;

				}
			}
			finally
			{
				TraceOut("M", 21);
				LeaveRule("M", 21);
				LeaveRule_M();
			}
		}
		// $ANTLR end "M"

		partial void EnterRule_N();
		partial void LeaveRule_N();

		// $ANTLR start "N"
		[GrammarRule("N")]
		private void mN()
		{
			EnterRule_N();
			EnterRule("N", 22);
			TraceIn("N", 22);
			try
			{
				// CSS3.g3:389:17: ( ( 'n' | 'N' ) ( '\\r' | '\\n' | '\\t' | '\\f' | ' ' )* | '\\\\' ( 'n' | 'N' | ( '0' ( '0' ( '0' ( '0' )? )? )? )? ( '4' | '6' ) ( 'E' | 'e' ) ) )
				int alt103=2;
				try { DebugEnterDecision(103, false);
					int LA103_0 = input.LA(1);

					if ((LA103_0=='N'||LA103_0=='n'))
					{
						alt103 = 1;
					}
					else if ((LA103_0=='\\'))
					{
						alt103 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae = new NoViableAltException("", 103, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				} finally { DebugExitDecision(103); }
				switch (alt103)
				{
					case 1:
					DebugEnterAlt(1);
					// CSS3.g3:389:21: ( 'n' | 'N' ) ( '\\r' | '\\n' | '\\t' | '\\f' | ' ' )*
					{
						DebugLocation(389, 21);
						input.Consume();
						state.failed=false;
						DebugLocation(389, 31);
						// CSS3.g3:389:31: ( '\\r' | '\\n' | '\\t' | '\\f' | ' ' )*
						try { DebugEnterSubRule(97);
							while (true)
							{
								int alt97=2;
								try { DebugEnterDecision(97, false);
									int LA97_0 = input.LA(1);

									if (((LA97_0>='\t' && LA97_0<='\n')||(LA97_0>='\f' && LA97_0<='\r')||LA97_0==' '))
									{
										alt97 = 1;
									}


								} finally { DebugExitDecision(97); }
								switch ( alt97 )
								{
									case 1:
									DebugEnterAlt(1);
									// CSS3.g3:
									{
										DebugLocation(389, 31);
										input.Consume();
										state.failed=false;

									}
									break;

									default:
									goto loop97;
								}
							}

							loop97:
								;

						} finally { DebugExitSubRule(97); }


					}
					break;
					case 2:
					DebugEnterAlt(2);
					// CSS3.g3:390:19: '\\\\' ( 'n' | 'N' | ( '0' ( '0' ( '0' ( '0' )? )? )? )? ( '4' | '6' ) ( 'E' | 'e' ) )
					{
						DebugLocation(390, 19);
						Match('\\'); if (state.failed) return;
						DebugLocation(391, 25);
						// CSS3.g3:391:25: ( 'n' | 'N' | ( '0' ( '0' ( '0' ( '0' )? )? )? )? ( '4' | '6' ) ( 'E' | 'e' ) )
						int alt102=3;
						try { DebugEnterSubRule(102);
							try { DebugEnterDecision(102, false);
								switch (input.LA(1))
								{
									case 'n':
								{
									alt102 = 1;
								}
									break;
									case 'N':
								{
									alt102 = 2;
								}
									break;
									case '0':
									case '4':
									case '6':
								{
									alt102 = 3;
								}
									break;
									default:
								{
									if (state.backtracking>0) {state.failed=true; return;}
									NoViableAltException nvae = new NoViableAltException("", 102, 0, input);
									DebugRecognitionException(nvae);
									throw nvae;
								}
								}

							} finally { DebugExitDecision(102); }
							switch (alt102)
							{
								case 1:
								DebugEnterAlt(1);
								// CSS3.g3:392:31: 'n'
								{
									DebugLocation(392, 31);
									Match('n'); if (state.failed) return;

								}
								break;
								case 2:
								DebugEnterAlt(2);
								// CSS3.g3:393:31: 'N'
								{
									DebugLocation(393, 31);
									Match('N'); if (state.failed) return;

								}
								break;
								case 3:
								DebugEnterAlt(3);
								// CSS3.g3:394:31: ( '0' ( '0' ( '0' ( '0' )? )? )? )? ( '4' | '6' ) ( 'E' | 'e' )
								{
									DebugLocation(394, 31);
									// CSS3.g3:394:31: ( '0' ( '0' ( '0' ( '0' )? )? )? )?
									int alt101=2;
									try { DebugEnterSubRule(101);
										try { DebugEnterDecision(101, false);
											int LA101_0 = input.LA(1);

											if ((LA101_0=='0'))
											{
												alt101 = 1;
											}
										} finally { DebugExitDecision(101); }
										switch (alt101)
										{
											case 1:
											DebugEnterAlt(1);
											// CSS3.g3:394:32: '0' ( '0' ( '0' ( '0' )? )? )?
											{
												DebugLocation(394, 32);
												Match('0'); if (state.failed) return;
												DebugLocation(394, 36);
												// CSS3.g3:394:36: ( '0' ( '0' ( '0' )? )? )?
												int alt100=2;
												try { DebugEnterSubRule(100);
													try { DebugEnterDecision(100, false);
														int LA100_0 = input.LA(1);

														if ((LA100_0=='0'))
														{
															alt100 = 1;
														}
													} finally { DebugExitDecision(100); }
													switch (alt100)
													{
														case 1:
														DebugEnterAlt(1);
														// CSS3.g3:394:37: '0' ( '0' ( '0' )? )?
														{
															DebugLocation(394, 37);
															Match('0'); if (state.failed) return;
															DebugLocation(394, 41);
															// CSS3.g3:394:41: ( '0' ( '0' )? )?
															int alt99=2;
															try { DebugEnterSubRule(99);
																try { DebugEnterDecision(99, false);
																	int LA99_0 = input.LA(1);

																	if ((LA99_0=='0'))
																	{
																		alt99 = 1;
																	}
																} finally { DebugExitDecision(99); }
																switch (alt99)
																{
																	case 1:
																	DebugEnterAlt(1);
																	// CSS3.g3:394:42: '0' ( '0' )?
																	{
																		DebugLocation(394, 42);
																		Match('0'); if (state.failed) return;
																		DebugLocation(394, 46);
																		// CSS3.g3:394:46: ( '0' )?
																		int alt98=2;
																		try { DebugEnterSubRule(98);
																			try { DebugEnterDecision(98, false);
																				int LA98_0 = input.LA(1);

																				if ((LA98_0=='0'))
																				{
																					alt98 = 1;
																				}
																			} finally { DebugExitDecision(98); }
																			switch (alt98)
																			{
																				case 1:
																				DebugEnterAlt(1);
																				// CSS3.g3:394:46: '0'
																				{
																					DebugLocation(394, 46);
																					Match('0'); if (state.failed) return;

																				}
																				break;

																			}
																		} finally { DebugExitSubRule(98); }


																	}
																	break;

																}
															} finally { DebugExitSubRule(99); }


														}
														break;

													}
												} finally { DebugExitSubRule(100); }


											}
											break;

										}
									} finally { DebugExitSubRule(101); }

									DebugLocation(394, 57);
									input.Consume();
									state.failed=false;
									DebugLocation(394, 66);
									input.Consume();
									state.failed=false;

								}
								break;

							}
						} finally { DebugExitSubRule(102); }


					}
					break;

				}
			}
			finally
			{
				TraceOut("N", 22);
				LeaveRule("N", 22);
				LeaveRule_N();
			}
		}
		// $ANTLR end "N"

		partial void EnterRule_O();
		partial void LeaveRule_O();

		// $ANTLR start "O"
		[GrammarRule("O")]
		private void mO()
		{
			EnterRule_O();
			EnterRule("O", 23);
			TraceIn("O", 23);
			try
			{
				// CSS3.g3:397:17: ( ( 'o' | 'O' ) ( '\\r' | '\\n' | '\\t' | '\\f' | ' ' )* | '\\\\' ( 'o' | 'O' | ( '0' ( '0' ( '0' ( '0' )? )? )? )? ( '4' | '6' ) ( 'F' | 'f' ) ) )
				int alt110=2;
				try { DebugEnterDecision(110, false);
					int LA110_0 = input.LA(1);

					if ((LA110_0=='O'||LA110_0=='o'))
					{
						alt110 = 1;
					}
					else if ((LA110_0=='\\'))
					{
						alt110 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae = new NoViableAltException("", 110, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				} finally { DebugExitDecision(110); }
				switch (alt110)
				{
					case 1:
					DebugEnterAlt(1);
					// CSS3.g3:397:21: ( 'o' | 'O' ) ( '\\r' | '\\n' | '\\t' | '\\f' | ' ' )*
					{
						DebugLocation(397, 21);
						input.Consume();
						state.failed=false;
						DebugLocation(397, 31);
						// CSS3.g3:397:31: ( '\\r' | '\\n' | '\\t' | '\\f' | ' ' )*
						try { DebugEnterSubRule(104);
							while (true)
							{
								int alt104=2;
								try { DebugEnterDecision(104, false);
									int LA104_0 = input.LA(1);

									if (((LA104_0>='\t' && LA104_0<='\n')||(LA104_0>='\f' && LA104_0<='\r')||LA104_0==' '))
									{
										alt104 = 1;
									}


								} finally { DebugExitDecision(104); }
								switch ( alt104 )
								{
									case 1:
									DebugEnterAlt(1);
									// CSS3.g3:
									{
										DebugLocation(397, 31);
										input.Consume();
										state.failed=false;

									}
									break;

									default:
									goto loop104;
								}
							}

							loop104:
								;

						} finally { DebugExitSubRule(104); }


					}
					break;
					case 2:
					DebugEnterAlt(2);
					// CSS3.g3:398:19: '\\\\' ( 'o' | 'O' | ( '0' ( '0' ( '0' ( '0' )? )? )? )? ( '4' | '6' ) ( 'F' | 'f' ) )
					{
						DebugLocation(398, 19);
						Match('\\'); if (state.failed) return;
						DebugLocation(399, 25);
						// CSS3.g3:399:25: ( 'o' | 'O' | ( '0' ( '0' ( '0' ( '0' )? )? )? )? ( '4' | '6' ) ( 'F' | 'f' ) )
						int alt109=3;
						try { DebugEnterSubRule(109);
							try { DebugEnterDecision(109, false);
								switch (input.LA(1))
								{
									case 'o':
								{
									alt109 = 1;
								}
									break;
									case 'O':
								{
									alt109 = 2;
								}
									break;
									case '0':
									case '4':
									case '6':
								{
									alt109 = 3;
								}
									break;
									default:
								{
									if (state.backtracking>0) {state.failed=true; return;}
									NoViableAltException nvae = new NoViableAltException("", 109, 0, input);
									DebugRecognitionException(nvae);
									throw nvae;
								}
								}

							} finally { DebugExitDecision(109); }
							switch (alt109)
							{
								case 1:
								DebugEnterAlt(1);
								// CSS3.g3:400:31: 'o'
								{
									DebugLocation(400, 31);
									Match('o'); if (state.failed) return;

								}
								break;
								case 2:
								DebugEnterAlt(2);
								// CSS3.g3:401:31: 'O'
								{
									DebugLocation(401, 31);
									Match('O'); if (state.failed) return;

								}
								break;
								case 3:
								DebugEnterAlt(3);
								// CSS3.g3:402:31: ( '0' ( '0' ( '0' ( '0' )? )? )? )? ( '4' | '6' ) ( 'F' | 'f' )
								{
									DebugLocation(402, 31);
									// CSS3.g3:402:31: ( '0' ( '0' ( '0' ( '0' )? )? )? )?
									int alt108=2;
									try { DebugEnterSubRule(108);
										try { DebugEnterDecision(108, false);
											int LA108_0 = input.LA(1);

											if ((LA108_0=='0'))
											{
												alt108 = 1;
											}
										} finally { DebugExitDecision(108); }
										switch (alt108)
										{
											case 1:
											DebugEnterAlt(1);
											// CSS3.g3:402:32: '0' ( '0' ( '0' ( '0' )? )? )?
											{
												DebugLocation(402, 32);
												Match('0'); if (state.failed) return;
												DebugLocation(402, 36);
												// CSS3.g3:402:36: ( '0' ( '0' ( '0' )? )? )?
												int alt107=2;
												try { DebugEnterSubRule(107);
													try { DebugEnterDecision(107, false);
														int LA107_0 = input.LA(1);

														if ((LA107_0=='0'))
														{
															alt107 = 1;
														}
													} finally { DebugExitDecision(107); }
													switch (alt107)
													{
														case 1:
														DebugEnterAlt(1);
														// CSS3.g3:402:37: '0' ( '0' ( '0' )? )?
														{
															DebugLocation(402, 37);
															Match('0'); if (state.failed) return;
															DebugLocation(402, 41);
															// CSS3.g3:402:41: ( '0' ( '0' )? )?
															int alt106=2;
															try { DebugEnterSubRule(106);
																try { DebugEnterDecision(106, false);
																	int LA106_0 = input.LA(1);

																	if ((LA106_0=='0'))
																	{
																		alt106 = 1;
																	}
																} finally { DebugExitDecision(106); }
																switch (alt106)
																{
																	case 1:
																	DebugEnterAlt(1);
																	// CSS3.g3:402:42: '0' ( '0' )?
																	{
																		DebugLocation(402, 42);
																		Match('0'); if (state.failed) return;
																		DebugLocation(402, 46);
																		// CSS3.g3:402:46: ( '0' )?
																		int alt105=2;
																		try { DebugEnterSubRule(105);
																			try { DebugEnterDecision(105, false);
																				int LA105_0 = input.LA(1);

																				if ((LA105_0=='0'))
																				{
																					alt105 = 1;
																				}
																			} finally { DebugExitDecision(105); }
																			switch (alt105)
																			{
																				case 1:
																				DebugEnterAlt(1);
																				// CSS3.g3:402:46: '0'
																				{
																					DebugLocation(402, 46);
																					Match('0'); if (state.failed) return;

																				}
																				break;

																			}
																		} finally { DebugExitSubRule(105); }


																	}
																	break;

																}
															} finally { DebugExitSubRule(106); }


														}
														break;

													}
												} finally { DebugExitSubRule(107); }


											}
											break;

										}
									} finally { DebugExitSubRule(108); }

									DebugLocation(402, 57);
									input.Consume();
									state.failed=false;
									DebugLocation(402, 66);
									input.Consume();
									state.failed=false;

								}
								break;

							}
						} finally { DebugExitSubRule(109); }


					}
					break;

				}
			}
			finally
			{
				TraceOut("O", 23);
				LeaveRule("O", 23);
				LeaveRule_O();
			}
		}
		// $ANTLR end "O"

		partial void EnterRule_P();
		partial void LeaveRule_P();

		// $ANTLR start "P"
		[GrammarRule("P")]
		private void mP()
		{
			EnterRule_P();
			EnterRule("P", 24);
			TraceIn("P", 24);
			try
			{
				// CSS3.g3:405:17: ( ( 'p' | 'P' ) ( '\\r' | '\\n' | '\\t' | '\\f' | ' ' )* | '\\\\' ( 'p' | 'P' | ( '0' ( '0' ( '0' ( '0' )? )? )? )? ( '5' | '7' ) ( '0' ) ) )
				int alt117=2;
				try { DebugEnterDecision(117, false);
					int LA117_0 = input.LA(1);

					if ((LA117_0=='P'||LA117_0=='p'))
					{
						alt117 = 1;
					}
					else if ((LA117_0=='\\'))
					{
						alt117 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae = new NoViableAltException("", 117, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				} finally { DebugExitDecision(117); }
				switch (alt117)
				{
					case 1:
					DebugEnterAlt(1);
					// CSS3.g3:405:21: ( 'p' | 'P' ) ( '\\r' | '\\n' | '\\t' | '\\f' | ' ' )*
					{
						DebugLocation(405, 21);
						input.Consume();
						state.failed=false;
						DebugLocation(405, 31);
						// CSS3.g3:405:31: ( '\\r' | '\\n' | '\\t' | '\\f' | ' ' )*
						try { DebugEnterSubRule(111);
							while (true)
							{
								int alt111=2;
								try { DebugEnterDecision(111, false);
									int LA111_0 = input.LA(1);

									if (((LA111_0>='\t' && LA111_0<='\n')||(LA111_0>='\f' && LA111_0<='\r')||LA111_0==' '))
									{
										alt111 = 1;
									}


								} finally { DebugExitDecision(111); }
								switch ( alt111 )
								{
									case 1:
									DebugEnterAlt(1);
									// CSS3.g3:
									{
										DebugLocation(405, 31);
										input.Consume();
										state.failed=false;

									}
									break;

									default:
									goto loop111;
								}
							}

							loop111:
								;

						} finally { DebugExitSubRule(111); }


					}
					break;
					case 2:
					DebugEnterAlt(2);
					// CSS3.g3:406:19: '\\\\' ( 'p' | 'P' | ( '0' ( '0' ( '0' ( '0' )? )? )? )? ( '5' | '7' ) ( '0' ) )
					{
						DebugLocation(406, 19);
						Match('\\'); if (state.failed) return;
						DebugLocation(407, 25);
						// CSS3.g3:407:25: ( 'p' | 'P' | ( '0' ( '0' ( '0' ( '0' )? )? )? )? ( '5' | '7' ) ( '0' ) )
						int alt116=3;
						try { DebugEnterSubRule(116);
							try { DebugEnterDecision(116, false);
								switch (input.LA(1))
								{
									case 'p':
								{
									alt116 = 1;
								}
									break;
									case 'P':
								{
									alt116 = 2;
								}
									break;
									case '0':
									case '5':
									case '7':
								{
									alt116 = 3;
								}
									break;
									default:
								{
									if (state.backtracking>0) {state.failed=true; return;}
									NoViableAltException nvae = new NoViableAltException("", 116, 0, input);
									DebugRecognitionException(nvae);
									throw nvae;
								}
								}

							} finally { DebugExitDecision(116); }
							switch (alt116)
							{
								case 1:
								DebugEnterAlt(1);
								// CSS3.g3:408:31: 'p'
								{
									DebugLocation(408, 31);
									Match('p'); if (state.failed) return;

								}
								break;
								case 2:
								DebugEnterAlt(2);
								// CSS3.g3:409:31: 'P'
								{
									DebugLocation(409, 31);
									Match('P'); if (state.failed) return;

								}
								break;
								case 3:
								DebugEnterAlt(3);
								// CSS3.g3:410:31: ( '0' ( '0' ( '0' ( '0' )? )? )? )? ( '5' | '7' ) ( '0' )
								{
									DebugLocation(410, 31);
									// CSS3.g3:410:31: ( '0' ( '0' ( '0' ( '0' )? )? )? )?
									int alt115=2;
									try { DebugEnterSubRule(115);
										try { DebugEnterDecision(115, false);
											int LA115_0 = input.LA(1);

											if ((LA115_0=='0'))
											{
												alt115 = 1;
											}
										} finally { DebugExitDecision(115); }
										switch (alt115)
										{
											case 1:
											DebugEnterAlt(1);
											// CSS3.g3:410:32: '0' ( '0' ( '0' ( '0' )? )? )?
											{
												DebugLocation(410, 32);
												Match('0'); if (state.failed) return;
												DebugLocation(410, 36);
												// CSS3.g3:410:36: ( '0' ( '0' ( '0' )? )? )?
												int alt114=2;
												try { DebugEnterSubRule(114);
													try { DebugEnterDecision(114, false);
														int LA114_0 = input.LA(1);

														if ((LA114_0=='0'))
														{
															alt114 = 1;
														}
													} finally { DebugExitDecision(114); }
													switch (alt114)
													{
														case 1:
														DebugEnterAlt(1);
														// CSS3.g3:410:37: '0' ( '0' ( '0' )? )?
														{
															DebugLocation(410, 37);
															Match('0'); if (state.failed) return;
															DebugLocation(410, 41);
															// CSS3.g3:410:41: ( '0' ( '0' )? )?
															int alt113=2;
															try { DebugEnterSubRule(113);
																try { DebugEnterDecision(113, false);
																	int LA113_0 = input.LA(1);

																	if ((LA113_0=='0'))
																	{
																		alt113 = 1;
																	}
																} finally { DebugExitDecision(113); }
																switch (alt113)
																{
																	case 1:
																	DebugEnterAlt(1);
																	// CSS3.g3:410:42: '0' ( '0' )?
																	{
																		DebugLocation(410, 42);
																		Match('0'); if (state.failed) return;
																		DebugLocation(410, 46);
																		// CSS3.g3:410:46: ( '0' )?
																		int alt112=2;
																		try { DebugEnterSubRule(112);
																			try { DebugEnterDecision(112, false);
																				int LA112_0 = input.LA(1);

																				if ((LA112_0=='0'))
																				{
																					alt112 = 1;
																				}
																			} finally { DebugExitDecision(112); }
																			switch (alt112)
																			{
																				case 1:
																				DebugEnterAlt(1);
																				// CSS3.g3:410:46: '0'
																				{
																					DebugLocation(410, 46);
																					Match('0'); if (state.failed) return;

																				}
																				break;

																			}
																		} finally { DebugExitSubRule(112); }


																	}
																	break;

																}
															} finally { DebugExitSubRule(113); }


														}
														break;

													}
												} finally { DebugExitSubRule(114); }


											}
											break;

										}
									} finally { DebugExitSubRule(115); }

									DebugLocation(410, 57);
									input.Consume();
									state.failed=false;
									DebugLocation(410, 66);
									// CSS3.g3:410:66: ( '0' )
									DebugEnterAlt(1);
									// CSS3.g3:410:67: '0'
									{
										DebugLocation(410, 67);
										Match('0'); if (state.failed) return;

									}


								}
								break;

							}
						} finally { DebugExitSubRule(116); }


					}
					break;

				}
			}
			finally
			{
				TraceOut("P", 24);
				LeaveRule("P", 24);
				LeaveRule_P();
			}
		}
		// $ANTLR end "P"

		partial void EnterRule_Q();
		partial void LeaveRule_Q();

		// $ANTLR start "Q"
		[GrammarRule("Q")]
		private void mQ()
		{
			EnterRule_Q();
			EnterRule("Q", 25);
			TraceIn("Q", 25);
			try
			{
				// CSS3.g3:413:17: ( ( 'q' | 'Q' ) ( '\\r' | '\\n' | '\\t' | '\\f' | ' ' )* | '\\\\' ( 'q' | 'Q' | ( '0' ( '0' ( '0' ( '0' )? )? )? )? ( '5' | '7' ) ( '1' ) ) )
				int alt124=2;
				try { DebugEnterDecision(124, false);
					int LA124_0 = input.LA(1);

					if ((LA124_0=='Q'||LA124_0=='q'))
					{
						alt124 = 1;
					}
					else if ((LA124_0=='\\'))
					{
						alt124 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae = new NoViableAltException("", 124, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				} finally { DebugExitDecision(124); }
				switch (alt124)
				{
					case 1:
					DebugEnterAlt(1);
					// CSS3.g3:413:21: ( 'q' | 'Q' ) ( '\\r' | '\\n' | '\\t' | '\\f' | ' ' )*
					{
						DebugLocation(413, 21);
						input.Consume();
						state.failed=false;
						DebugLocation(413, 31);
						// CSS3.g3:413:31: ( '\\r' | '\\n' | '\\t' | '\\f' | ' ' )*
						try { DebugEnterSubRule(118);
							while (true)
							{
								int alt118=2;
								try { DebugEnterDecision(118, false);
									int LA118_0 = input.LA(1);

									if (((LA118_0>='\t' && LA118_0<='\n')||(LA118_0>='\f' && LA118_0<='\r')||LA118_0==' '))
									{
										alt118 = 1;
									}


								} finally { DebugExitDecision(118); }
								switch ( alt118 )
								{
									case 1:
									DebugEnterAlt(1);
									// CSS3.g3:
									{
										DebugLocation(413, 31);
										input.Consume();
										state.failed=false;

									}
									break;

									default:
									goto loop118;
								}
							}

							loop118:
								;

						} finally { DebugExitSubRule(118); }


					}
					break;
					case 2:
					DebugEnterAlt(2);
					// CSS3.g3:414:19: '\\\\' ( 'q' | 'Q' | ( '0' ( '0' ( '0' ( '0' )? )? )? )? ( '5' | '7' ) ( '1' ) )
					{
						DebugLocation(414, 19);
						Match('\\'); if (state.failed) return;
						DebugLocation(415, 25);
						// CSS3.g3:415:25: ( 'q' | 'Q' | ( '0' ( '0' ( '0' ( '0' )? )? )? )? ( '5' | '7' ) ( '1' ) )
						int alt123=3;
						try { DebugEnterSubRule(123);
							try { DebugEnterDecision(123, false);
								switch (input.LA(1))
								{
									case 'q':
								{
									alt123 = 1;
								}
									break;
									case 'Q':
								{
									alt123 = 2;
								}
									break;
									case '0':
									case '5':
									case '7':
								{
									alt123 = 3;
								}
									break;
									default:
								{
									if (state.backtracking>0) {state.failed=true; return;}
									NoViableAltException nvae = new NoViableAltException("", 123, 0, input);
									DebugRecognitionException(nvae);
									throw nvae;
								}
								}

							} finally { DebugExitDecision(123); }
							switch (alt123)
							{
								case 1:
								DebugEnterAlt(1);
								// CSS3.g3:416:31: 'q'
								{
									DebugLocation(416, 31);
									Match('q'); if (state.failed) return;

								}
								break;
								case 2:
								DebugEnterAlt(2);
								// CSS3.g3:417:31: 'Q'
								{
									DebugLocation(417, 31);
									Match('Q'); if (state.failed) return;

								}
								break;
								case 3:
								DebugEnterAlt(3);
								// CSS3.g3:418:31: ( '0' ( '0' ( '0' ( '0' )? )? )? )? ( '5' | '7' ) ( '1' )
								{
									DebugLocation(418, 31);
									// CSS3.g3:418:31: ( '0' ( '0' ( '0' ( '0' )? )? )? )?
									int alt122=2;
									try { DebugEnterSubRule(122);
										try { DebugEnterDecision(122, false);
											int LA122_0 = input.LA(1);

											if ((LA122_0=='0'))
											{
												alt122 = 1;
											}
										} finally { DebugExitDecision(122); }
										switch (alt122)
										{
											case 1:
											DebugEnterAlt(1);
											// CSS3.g3:418:32: '0' ( '0' ( '0' ( '0' )? )? )?
											{
												DebugLocation(418, 32);
												Match('0'); if (state.failed) return;
												DebugLocation(418, 36);
												// CSS3.g3:418:36: ( '0' ( '0' ( '0' )? )? )?
												int alt121=2;
												try { DebugEnterSubRule(121);
													try { DebugEnterDecision(121, false);
														int LA121_0 = input.LA(1);

														if ((LA121_0=='0'))
														{
															alt121 = 1;
														}
													} finally { DebugExitDecision(121); }
													switch (alt121)
													{
														case 1:
														DebugEnterAlt(1);
														// CSS3.g3:418:37: '0' ( '0' ( '0' )? )?
														{
															DebugLocation(418, 37);
															Match('0'); if (state.failed) return;
															DebugLocation(418, 41);
															// CSS3.g3:418:41: ( '0' ( '0' )? )?
															int alt120=2;
															try { DebugEnterSubRule(120);
																try { DebugEnterDecision(120, false);
																	int LA120_0 = input.LA(1);

																	if ((LA120_0=='0'))
																	{
																		alt120 = 1;
																	}
																} finally { DebugExitDecision(120); }
																switch (alt120)
																{
																	case 1:
																	DebugEnterAlt(1);
																	// CSS3.g3:418:42: '0' ( '0' )?
																	{
																		DebugLocation(418, 42);
																		Match('0'); if (state.failed) return;
																		DebugLocation(418, 46);
																		// CSS3.g3:418:46: ( '0' )?
																		int alt119=2;
																		try { DebugEnterSubRule(119);
																			try { DebugEnterDecision(119, false);
																				int LA119_0 = input.LA(1);

																				if ((LA119_0=='0'))
																				{
																					alt119 = 1;
																				}
																			} finally { DebugExitDecision(119); }
																			switch (alt119)
																			{
																				case 1:
																				DebugEnterAlt(1);
																				// CSS3.g3:418:46: '0'
																				{
																					DebugLocation(418, 46);
																					Match('0'); if (state.failed) return;

																				}
																				break;

																			}
																		} finally { DebugExitSubRule(119); }


																	}
																	break;

																}
															} finally { DebugExitSubRule(120); }


														}
														break;

													}
												} finally { DebugExitSubRule(121); }


											}
											break;

										}
									} finally { DebugExitSubRule(122); }

									DebugLocation(418, 57);
									input.Consume();
									state.failed=false;
									DebugLocation(418, 66);
									// CSS3.g3:418:66: ( '1' )
									DebugEnterAlt(1);
									// CSS3.g3:418:67: '1'
									{
										DebugLocation(418, 67);
										Match('1'); if (state.failed) return;

									}


								}
								break;

							}
						} finally { DebugExitSubRule(123); }


					}
					break;

				}
			}
			finally
			{
				TraceOut("Q", 25);
				LeaveRule("Q", 25);
				LeaveRule_Q();
			}
		}
		// $ANTLR end "Q"

		partial void EnterRule_R();
		partial void LeaveRule_R();

		// $ANTLR start "R"
		[GrammarRule("R")]
		private void mR()
		{
			EnterRule_R();
			EnterRule("R", 26);
			TraceIn("R", 26);
			try
			{
				// CSS3.g3:421:17: ( ( 'r' | 'R' ) ( '\\r' | '\\n' | '\\t' | '\\f' | ' ' )* | '\\\\' ( 'r' | 'R' | ( '0' ( '0' ( '0' ( '0' )? )? )? )? ( '5' | '7' ) ( '2' ) ) )
				int alt131=2;
				try { DebugEnterDecision(131, false);
					int LA131_0 = input.LA(1);

					if ((LA131_0=='R'||LA131_0=='r'))
					{
						alt131 = 1;
					}
					else if ((LA131_0=='\\'))
					{
						alt131 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae = new NoViableAltException("", 131, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				} finally { DebugExitDecision(131); }
				switch (alt131)
				{
					case 1:
					DebugEnterAlt(1);
					// CSS3.g3:421:21: ( 'r' | 'R' ) ( '\\r' | '\\n' | '\\t' | '\\f' | ' ' )*
					{
						DebugLocation(421, 21);
						input.Consume();
						state.failed=false;
						DebugLocation(421, 31);
						// CSS3.g3:421:31: ( '\\r' | '\\n' | '\\t' | '\\f' | ' ' )*
						try { DebugEnterSubRule(125);
							while (true)
							{
								int alt125=2;
								try { DebugEnterDecision(125, false);
									int LA125_0 = input.LA(1);

									if (((LA125_0>='\t' && LA125_0<='\n')||(LA125_0>='\f' && LA125_0<='\r')||LA125_0==' '))
									{
										alt125 = 1;
									}


								} finally { DebugExitDecision(125); }
								switch ( alt125 )
								{
									case 1:
									DebugEnterAlt(1);
									// CSS3.g3:
									{
										DebugLocation(421, 31);
										input.Consume();
										state.failed=false;

									}
									break;

									default:
									goto loop125;
								}
							}

							loop125:
								;

						} finally { DebugExitSubRule(125); }


					}
					break;
					case 2:
					DebugEnterAlt(2);
					// CSS3.g3:422:19: '\\\\' ( 'r' | 'R' | ( '0' ( '0' ( '0' ( '0' )? )? )? )? ( '5' | '7' ) ( '2' ) )
					{
						DebugLocation(422, 19);
						Match('\\'); if (state.failed) return;
						DebugLocation(423, 25);
						// CSS3.g3:423:25: ( 'r' | 'R' | ( '0' ( '0' ( '0' ( '0' )? )? )? )? ( '5' | '7' ) ( '2' ) )
						int alt130=3;
						try { DebugEnterSubRule(130);
							try { DebugEnterDecision(130, false);
								switch (input.LA(1))
								{
									case 'r':
								{
									alt130 = 1;
								}
									break;
									case 'R':
								{
									alt130 = 2;
								}
									break;
									case '0':
									case '5':
									case '7':
								{
									alt130 = 3;
								}
									break;
									default:
								{
									if (state.backtracking>0) {state.failed=true; return;}
									NoViableAltException nvae = new NoViableAltException("", 130, 0, input);
									DebugRecognitionException(nvae);
									throw nvae;
								}
								}

							} finally { DebugExitDecision(130); }
							switch (alt130)
							{
								case 1:
								DebugEnterAlt(1);
								// CSS3.g3:424:31: 'r'
								{
									DebugLocation(424, 31);
									Match('r'); if (state.failed) return;

								}
								break;
								case 2:
								DebugEnterAlt(2);
								// CSS3.g3:425:31: 'R'
								{
									DebugLocation(425, 31);
									Match('R'); if (state.failed) return;

								}
								break;
								case 3:
								DebugEnterAlt(3);
								// CSS3.g3:426:31: ( '0' ( '0' ( '0' ( '0' )? )? )? )? ( '5' | '7' ) ( '2' )
								{
									DebugLocation(426, 31);
									// CSS3.g3:426:31: ( '0' ( '0' ( '0' ( '0' )? )? )? )?
									int alt129=2;
									try { DebugEnterSubRule(129);
										try { DebugEnterDecision(129, false);
											int LA129_0 = input.LA(1);

											if ((LA129_0=='0'))
											{
												alt129 = 1;
											}
										} finally { DebugExitDecision(129); }
										switch (alt129)
										{
											case 1:
											DebugEnterAlt(1);
											// CSS3.g3:426:32: '0' ( '0' ( '0' ( '0' )? )? )?
											{
												DebugLocation(426, 32);
												Match('0'); if (state.failed) return;
												DebugLocation(426, 36);
												// CSS3.g3:426:36: ( '0' ( '0' ( '0' )? )? )?
												int alt128=2;
												try { DebugEnterSubRule(128);
													try { DebugEnterDecision(128, false);
														int LA128_0 = input.LA(1);

														if ((LA128_0=='0'))
														{
															alt128 = 1;
														}
													} finally { DebugExitDecision(128); }
													switch (alt128)
													{
														case 1:
														DebugEnterAlt(1);
														// CSS3.g3:426:37: '0' ( '0' ( '0' )? )?
														{
															DebugLocation(426, 37);
															Match('0'); if (state.failed) return;
															DebugLocation(426, 41);
															// CSS3.g3:426:41: ( '0' ( '0' )? )?
															int alt127=2;
															try { DebugEnterSubRule(127);
																try { DebugEnterDecision(127, false);
																	int LA127_0 = input.LA(1);

																	if ((LA127_0=='0'))
																	{
																		alt127 = 1;
																	}
																} finally { DebugExitDecision(127); }
																switch (alt127)
																{
																	case 1:
																	DebugEnterAlt(1);
																	// CSS3.g3:426:42: '0' ( '0' )?
																	{
																		DebugLocation(426, 42);
																		Match('0'); if (state.failed) return;
																		DebugLocation(426, 46);
																		// CSS3.g3:426:46: ( '0' )?
																		int alt126=2;
																		try { DebugEnterSubRule(126);
																			try { DebugEnterDecision(126, false);
																				int LA126_0 = input.LA(1);

																				if ((LA126_0=='0'))
																				{
																					alt126 = 1;
																				}
																			} finally { DebugExitDecision(126); }
																			switch (alt126)
																			{
																				case 1:
																				DebugEnterAlt(1);
																				// CSS3.g3:426:46: '0'
																				{
																					DebugLocation(426, 46);
																					Match('0'); if (state.failed) return;

																				}
																				break;

																			}
																		} finally { DebugExitSubRule(126); }


																	}
																	break;

																}
															} finally { DebugExitSubRule(127); }


														}
														break;

													}
												} finally { DebugExitSubRule(128); }


											}
											break;

										}
									} finally { DebugExitSubRule(129); }

									DebugLocation(426, 57);
									input.Consume();
									state.failed=false;
									DebugLocation(426, 66);
									// CSS3.g3:426:66: ( '2' )
									DebugEnterAlt(1);
									// CSS3.g3:426:67: '2'
									{
										DebugLocation(426, 67);
										Match('2'); if (state.failed) return;

									}


								}
								break;

							}
						} finally { DebugExitSubRule(130); }


					}
					break;

				}
			}
			finally
			{
				TraceOut("R", 26);
				LeaveRule("R", 26);
				LeaveRule_R();
			}
		}
		// $ANTLR end "R"

		partial void EnterRule_S();
		partial void LeaveRule_S();

		// $ANTLR start "S"
		[GrammarRule("S")]
		private void mS()
		{
			EnterRule_S();
			EnterRule("S", 27);
			TraceIn("S", 27);
			try
			{
				// CSS3.g3:429:17: ( ( 's' | 'S' ) ( '\\r' | '\\n' | '\\t' | '\\f' | ' ' )* | '\\\\' ( 's' | 'S' | ( '0' ( '0' ( '0' ( '0' )? )? )? )? ( '5' | '7' ) ( '3' ) ) )
				int alt138=2;
				try { DebugEnterDecision(138, false);
					int LA138_0 = input.LA(1);

					if ((LA138_0=='S'||LA138_0=='s'))
					{
						alt138 = 1;
					}
					else if ((LA138_0=='\\'))
					{
						alt138 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae = new NoViableAltException("", 138, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				} finally { DebugExitDecision(138); }
				switch (alt138)
				{
					case 1:
					DebugEnterAlt(1);
					// CSS3.g3:429:21: ( 's' | 'S' ) ( '\\r' | '\\n' | '\\t' | '\\f' | ' ' )*
					{
						DebugLocation(429, 21);
						input.Consume();
						state.failed=false;
						DebugLocation(429, 31);
						// CSS3.g3:429:31: ( '\\r' | '\\n' | '\\t' | '\\f' | ' ' )*
						try { DebugEnterSubRule(132);
							while (true)
							{
								int alt132=2;
								try { DebugEnterDecision(132, false);
									int LA132_0 = input.LA(1);

									if (((LA132_0>='\t' && LA132_0<='\n')||(LA132_0>='\f' && LA132_0<='\r')||LA132_0==' '))
									{
										alt132 = 1;
									}


								} finally { DebugExitDecision(132); }
								switch ( alt132 )
								{
									case 1:
									DebugEnterAlt(1);
									// CSS3.g3:
									{
										DebugLocation(429, 31);
										input.Consume();
										state.failed=false;

									}
									break;

									default:
									goto loop132;
								}
							}

							loop132:
								;

						} finally { DebugExitSubRule(132); }


					}
					break;
					case 2:
					DebugEnterAlt(2);
					// CSS3.g3:430:19: '\\\\' ( 's' | 'S' | ( '0' ( '0' ( '0' ( '0' )? )? )? )? ( '5' | '7' ) ( '3' ) )
					{
						DebugLocation(430, 19);
						Match('\\'); if (state.failed) return;
						DebugLocation(431, 25);
						// CSS3.g3:431:25: ( 's' | 'S' | ( '0' ( '0' ( '0' ( '0' )? )? )? )? ( '5' | '7' ) ( '3' ) )
						int alt137=3;
						try { DebugEnterSubRule(137);
							try { DebugEnterDecision(137, false);
								switch (input.LA(1))
								{
									case 's':
								{
									alt137 = 1;
								}
									break;
									case 'S':
								{
									alt137 = 2;
								}
									break;
									case '0':
									case '5':
									case '7':
								{
									alt137 = 3;
								}
									break;
									default:
								{
									if (state.backtracking>0) {state.failed=true; return;}
									NoViableAltException nvae = new NoViableAltException("", 137, 0, input);
									DebugRecognitionException(nvae);
									throw nvae;
								}
								}

							} finally { DebugExitDecision(137); }
							switch (alt137)
							{
								case 1:
								DebugEnterAlt(1);
								// CSS3.g3:432:31: 's'
								{
									DebugLocation(432, 31);
									Match('s'); if (state.failed) return;

								}
								break;
								case 2:
								DebugEnterAlt(2);
								// CSS3.g3:433:31: 'S'
								{
									DebugLocation(433, 31);
									Match('S'); if (state.failed) return;

								}
								break;
								case 3:
								DebugEnterAlt(3);
								// CSS3.g3:434:31: ( '0' ( '0' ( '0' ( '0' )? )? )? )? ( '5' | '7' ) ( '3' )
								{
									DebugLocation(434, 31);
									// CSS3.g3:434:31: ( '0' ( '0' ( '0' ( '0' )? )? )? )?
									int alt136=2;
									try { DebugEnterSubRule(136);
										try { DebugEnterDecision(136, false);
											int LA136_0 = input.LA(1);

											if ((LA136_0=='0'))
											{
												alt136 = 1;
											}
										} finally { DebugExitDecision(136); }
										switch (alt136)
										{
											case 1:
											DebugEnterAlt(1);
											// CSS3.g3:434:32: '0' ( '0' ( '0' ( '0' )? )? )?
											{
												DebugLocation(434, 32);
												Match('0'); if (state.failed) return;
												DebugLocation(434, 36);
												// CSS3.g3:434:36: ( '0' ( '0' ( '0' )? )? )?
												int alt135=2;
												try { DebugEnterSubRule(135);
													try { DebugEnterDecision(135, false);
														int LA135_0 = input.LA(1);

														if ((LA135_0=='0'))
														{
															alt135 = 1;
														}
													} finally { DebugExitDecision(135); }
													switch (alt135)
													{
														case 1:
														DebugEnterAlt(1);
														// CSS3.g3:434:37: '0' ( '0' ( '0' )? )?
														{
															DebugLocation(434, 37);
															Match('0'); if (state.failed) return;
															DebugLocation(434, 41);
															// CSS3.g3:434:41: ( '0' ( '0' )? )?
															int alt134=2;
															try { DebugEnterSubRule(134);
																try { DebugEnterDecision(134, false);
																	int LA134_0 = input.LA(1);

																	if ((LA134_0=='0'))
																	{
																		alt134 = 1;
																	}
																} finally { DebugExitDecision(134); }
																switch (alt134)
																{
																	case 1:
																	DebugEnterAlt(1);
																	// CSS3.g3:434:42: '0' ( '0' )?
																	{
																		DebugLocation(434, 42);
																		Match('0'); if (state.failed) return;
																		DebugLocation(434, 46);
																		// CSS3.g3:434:46: ( '0' )?
																		int alt133=2;
																		try { DebugEnterSubRule(133);
																			try { DebugEnterDecision(133, false);
																				int LA133_0 = input.LA(1);

																				if ((LA133_0=='0'))
																				{
																					alt133 = 1;
																				}
																			} finally { DebugExitDecision(133); }
																			switch (alt133)
																			{
																				case 1:
																				DebugEnterAlt(1);
																				// CSS3.g3:434:46: '0'
																				{
																					DebugLocation(434, 46);
																					Match('0'); if (state.failed) return;

																				}
																				break;

																			}
																		} finally { DebugExitSubRule(133); }


																	}
																	break;

																}
															} finally { DebugExitSubRule(134); }


														}
														break;

													}
												} finally { DebugExitSubRule(135); }


											}
											break;

										}
									} finally { DebugExitSubRule(136); }

									DebugLocation(434, 57);
									input.Consume();
									state.failed=false;
									DebugLocation(434, 66);
									// CSS3.g3:434:66: ( '3' )
									DebugEnterAlt(1);
									// CSS3.g3:434:67: '3'
									{
										DebugLocation(434, 67);
										Match('3'); if (state.failed) return;

									}


								}
								break;

							}
						} finally { DebugExitSubRule(137); }


					}
					break;

				}
			}
			finally
			{
				TraceOut("S", 27);
				LeaveRule("S", 27);
				LeaveRule_S();
			}
		}
		// $ANTLR end "S"

		partial void EnterRule_T();
		partial void LeaveRule_T();

		// $ANTLR start "T"
		[GrammarRule("T")]
		private void mT()
		{
			EnterRule_T();
			EnterRule("T", 28);
			TraceIn("T", 28);
			try
			{
				// CSS3.g3:437:17: ( ( 't' | 'T' ) ( '\\r' | '\\n' | '\\t' | '\\f' | ' ' )* | '\\\\' ( 't' | 'T' | ( '0' ( '0' ( '0' ( '0' )? )? )? )? ( '5' | '7' ) ( '4' ) ) )
				int alt145=2;
				try { DebugEnterDecision(145, false);
					int LA145_0 = input.LA(1);

					if ((LA145_0=='T'||LA145_0=='t'))
					{
						alt145 = 1;
					}
					else if ((LA145_0=='\\'))
					{
						alt145 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae = new NoViableAltException("", 145, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				} finally { DebugExitDecision(145); }
				switch (alt145)
				{
					case 1:
					DebugEnterAlt(1);
					// CSS3.g3:437:21: ( 't' | 'T' ) ( '\\r' | '\\n' | '\\t' | '\\f' | ' ' )*
					{
						DebugLocation(437, 21);
						input.Consume();
						state.failed=false;
						DebugLocation(437, 31);
						// CSS3.g3:437:31: ( '\\r' | '\\n' | '\\t' | '\\f' | ' ' )*
						try { DebugEnterSubRule(139);
							while (true)
							{
								int alt139=2;
								try { DebugEnterDecision(139, false);
									int LA139_0 = input.LA(1);

									if (((LA139_0>='\t' && LA139_0<='\n')||(LA139_0>='\f' && LA139_0<='\r')||LA139_0==' '))
									{
										alt139 = 1;
									}


								} finally { DebugExitDecision(139); }
								switch ( alt139 )
								{
									case 1:
									DebugEnterAlt(1);
									// CSS3.g3:
									{
										DebugLocation(437, 31);
										input.Consume();
										state.failed=false;

									}
									break;

									default:
									goto loop139;
								}
							}

							loop139:
								;

						} finally { DebugExitSubRule(139); }


					}
					break;
					case 2:
					DebugEnterAlt(2);
					// CSS3.g3:438:19: '\\\\' ( 't' | 'T' | ( '0' ( '0' ( '0' ( '0' )? )? )? )? ( '5' | '7' ) ( '4' ) )
					{
						DebugLocation(438, 19);
						Match('\\'); if (state.failed) return;
						DebugLocation(439, 25);
						// CSS3.g3:439:25: ( 't' | 'T' | ( '0' ( '0' ( '0' ( '0' )? )? )? )? ( '5' | '7' ) ( '4' ) )
						int alt144=3;
						try { DebugEnterSubRule(144);
							try { DebugEnterDecision(144, false);
								switch (input.LA(1))
								{
									case 't':
								{
									alt144 = 1;
								}
									break;
									case 'T':
								{
									alt144 = 2;
								}
									break;
									case '0':
									case '5':
									case '7':
								{
									alt144 = 3;
								}
									break;
									default:
								{
									if (state.backtracking>0) {state.failed=true; return;}
									NoViableAltException nvae = new NoViableAltException("", 144, 0, input);
									DebugRecognitionException(nvae);
									throw nvae;
								}
								}

							} finally { DebugExitDecision(144); }
							switch (alt144)
							{
								case 1:
								DebugEnterAlt(1);
								// CSS3.g3:440:31: 't'
								{
									DebugLocation(440, 31);
									Match('t'); if (state.failed) return;

								}
								break;
								case 2:
								DebugEnterAlt(2);
								// CSS3.g3:441:31: 'T'
								{
									DebugLocation(441, 31);
									Match('T'); if (state.failed) return;

								}
								break;
								case 3:
								DebugEnterAlt(3);
								// CSS3.g3:442:31: ( '0' ( '0' ( '0' ( '0' )? )? )? )? ( '5' | '7' ) ( '4' )
								{
									DebugLocation(442, 31);
									// CSS3.g3:442:31: ( '0' ( '0' ( '0' ( '0' )? )? )? )?
									int alt143=2;
									try { DebugEnterSubRule(143);
										try { DebugEnterDecision(143, false);
											int LA143_0 = input.LA(1);

											if ((LA143_0=='0'))
											{
												alt143 = 1;
											}
										} finally { DebugExitDecision(143); }
										switch (alt143)
										{
											case 1:
											DebugEnterAlt(1);
											// CSS3.g3:442:32: '0' ( '0' ( '0' ( '0' )? )? )?
											{
												DebugLocation(442, 32);
												Match('0'); if (state.failed) return;
												DebugLocation(442, 36);
												// CSS3.g3:442:36: ( '0' ( '0' ( '0' )? )? )?
												int alt142=2;
												try { DebugEnterSubRule(142);
													try { DebugEnterDecision(142, false);
														int LA142_0 = input.LA(1);

														if ((LA142_0=='0'))
														{
															alt142 = 1;
														}
													} finally { DebugExitDecision(142); }
													switch (alt142)
													{
														case 1:
														DebugEnterAlt(1);
														// CSS3.g3:442:37: '0' ( '0' ( '0' )? )?
														{
															DebugLocation(442, 37);
															Match('0'); if (state.failed) return;
															DebugLocation(442, 41);
															// CSS3.g3:442:41: ( '0' ( '0' )? )?
															int alt141=2;
															try { DebugEnterSubRule(141);
																try { DebugEnterDecision(141, false);
																	int LA141_0 = input.LA(1);

																	if ((LA141_0=='0'))
																	{
																		alt141 = 1;
																	}
																} finally { DebugExitDecision(141); }
																switch (alt141)
																{
																	case 1:
																	DebugEnterAlt(1);
																	// CSS3.g3:442:42: '0' ( '0' )?
																	{
																		DebugLocation(442, 42);
																		Match('0'); if (state.failed) return;
																		DebugLocation(442, 46);
																		// CSS3.g3:442:46: ( '0' )?
																		int alt140=2;
																		try { DebugEnterSubRule(140);
																			try { DebugEnterDecision(140, false);
																				int LA140_0 = input.LA(1);

																				if ((LA140_0=='0'))
																				{
																					alt140 = 1;
																				}
																			} finally { DebugExitDecision(140); }
																			switch (alt140)
																			{
																				case 1:
																				DebugEnterAlt(1);
																				// CSS3.g3:442:46: '0'
																				{
																					DebugLocation(442, 46);
																					Match('0'); if (state.failed) return;

																				}
																				break;

																			}
																		} finally { DebugExitSubRule(140); }


																	}
																	break;

																}
															} finally { DebugExitSubRule(141); }


														}
														break;

													}
												} finally { DebugExitSubRule(142); }


											}
											break;

										}
									} finally { DebugExitSubRule(143); }

									DebugLocation(442, 57);
									input.Consume();
									state.failed=false;
									DebugLocation(442, 66);
									// CSS3.g3:442:66: ( '4' )
									DebugEnterAlt(1);
									// CSS3.g3:442:67: '4'
									{
										DebugLocation(442, 67);
										Match('4'); if (state.failed) return;

									}


								}
								break;

							}
						} finally { DebugExitSubRule(144); }


					}
					break;

				}
			}
			finally
			{
				TraceOut("T", 28);
				LeaveRule("T", 28);
				LeaveRule_T();
			}
		}
		// $ANTLR end "T"

		partial void EnterRule_U();
		partial void LeaveRule_U();

		// $ANTLR start "U"
		[GrammarRule("U")]
		private void mU()
		{
			EnterRule_U();
			EnterRule("U", 29);
			TraceIn("U", 29);
			try
			{
				// CSS3.g3:445:17: ( ( 'u' | 'U' ) ( '\\r' | '\\n' | '\\t' | '\\f' | ' ' )* | '\\\\' ( 'u' | 'U' | ( '0' ( '0' ( '0' ( '0' )? )? )? )? ( '5' | '7' ) ( '5' ) ) )
				int alt152=2;
				try { DebugEnterDecision(152, false);
					int LA152_0 = input.LA(1);

					if ((LA152_0=='U'||LA152_0=='u'))
					{
						alt152 = 1;
					}
					else if ((LA152_0=='\\'))
					{
						alt152 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae = new NoViableAltException("", 152, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				} finally { DebugExitDecision(152); }
				switch (alt152)
				{
					case 1:
					DebugEnterAlt(1);
					// CSS3.g3:445:21: ( 'u' | 'U' ) ( '\\r' | '\\n' | '\\t' | '\\f' | ' ' )*
					{
						DebugLocation(445, 21);
						input.Consume();
						state.failed=false;
						DebugLocation(445, 31);
						// CSS3.g3:445:31: ( '\\r' | '\\n' | '\\t' | '\\f' | ' ' )*
						try { DebugEnterSubRule(146);
							while (true)
							{
								int alt146=2;
								try { DebugEnterDecision(146, false);
									int LA146_0 = input.LA(1);

									if (((LA146_0>='\t' && LA146_0<='\n')||(LA146_0>='\f' && LA146_0<='\r')||LA146_0==' '))
									{
										alt146 = 1;
									}


								} finally { DebugExitDecision(146); }
								switch ( alt146 )
								{
									case 1:
									DebugEnterAlt(1);
									// CSS3.g3:
									{
										DebugLocation(445, 31);
										input.Consume();
										state.failed=false;

									}
									break;

									default:
									goto loop146;
								}
							}

							loop146:
								;

						} finally { DebugExitSubRule(146); }


					}
					break;
					case 2:
					DebugEnterAlt(2);
					// CSS3.g3:446:19: '\\\\' ( 'u' | 'U' | ( '0' ( '0' ( '0' ( '0' )? )? )? )? ( '5' | '7' ) ( '5' ) )
					{
						DebugLocation(446, 19);
						Match('\\'); if (state.failed) return;
						DebugLocation(447, 25);
						// CSS3.g3:447:25: ( 'u' | 'U' | ( '0' ( '0' ( '0' ( '0' )? )? )? )? ( '5' | '7' ) ( '5' ) )
						int alt151=3;
						try { DebugEnterSubRule(151);
							try { DebugEnterDecision(151, false);
								switch (input.LA(1))
								{
									case 'u':
								{
									alt151 = 1;
								}
									break;
									case 'U':
								{
									alt151 = 2;
								}
									break;
									case '0':
									case '5':
									case '7':
								{
									alt151 = 3;
								}
									break;
									default:
								{
									if (state.backtracking>0) {state.failed=true; return;}
									NoViableAltException nvae = new NoViableAltException("", 151, 0, input);
									DebugRecognitionException(nvae);
									throw nvae;
								}
								}

							} finally { DebugExitDecision(151); }
							switch (alt151)
							{
								case 1:
								DebugEnterAlt(1);
								// CSS3.g3:448:31: 'u'
								{
									DebugLocation(448, 31);
									Match('u'); if (state.failed) return;

								}
								break;
								case 2:
								DebugEnterAlt(2);
								// CSS3.g3:449:31: 'U'
								{
									DebugLocation(449, 31);
									Match('U'); if (state.failed) return;

								}
								break;
								case 3:
								DebugEnterAlt(3);
								// CSS3.g3:450:31: ( '0' ( '0' ( '0' ( '0' )? )? )? )? ( '5' | '7' ) ( '5' )
								{
									DebugLocation(450, 31);
									// CSS3.g3:450:31: ( '0' ( '0' ( '0' ( '0' )? )? )? )?
									int alt150=2;
									try { DebugEnterSubRule(150);
										try { DebugEnterDecision(150, false);
											int LA150_0 = input.LA(1);

											if ((LA150_0=='0'))
											{
												alt150 = 1;
											}
										} finally { DebugExitDecision(150); }
										switch (alt150)
										{
											case 1:
											DebugEnterAlt(1);
											// CSS3.g3:450:32: '0' ( '0' ( '0' ( '0' )? )? )?
											{
												DebugLocation(450, 32);
												Match('0'); if (state.failed) return;
												DebugLocation(450, 36);
												// CSS3.g3:450:36: ( '0' ( '0' ( '0' )? )? )?
												int alt149=2;
												try { DebugEnterSubRule(149);
													try { DebugEnterDecision(149, false);
														int LA149_0 = input.LA(1);

														if ((LA149_0=='0'))
														{
															alt149 = 1;
														}
													} finally { DebugExitDecision(149); }
													switch (alt149)
													{
														case 1:
														DebugEnterAlt(1);
														// CSS3.g3:450:37: '0' ( '0' ( '0' )? )?
														{
															DebugLocation(450, 37);
															Match('0'); if (state.failed) return;
															DebugLocation(450, 41);
															// CSS3.g3:450:41: ( '0' ( '0' )? )?
															int alt148=2;
															try { DebugEnterSubRule(148);
																try { DebugEnterDecision(148, false);
																	int LA148_0 = input.LA(1);

																	if ((LA148_0=='0'))
																	{
																		alt148 = 1;
																	}
																} finally { DebugExitDecision(148); }
																switch (alt148)
																{
																	case 1:
																	DebugEnterAlt(1);
																	// CSS3.g3:450:42: '0' ( '0' )?
																	{
																		DebugLocation(450, 42);
																		Match('0'); if (state.failed) return;
																		DebugLocation(450, 46);
																		// CSS3.g3:450:46: ( '0' )?
																		int alt147=2;
																		try { DebugEnterSubRule(147);
																			try { DebugEnterDecision(147, false);
																				int LA147_0 = input.LA(1);

																				if ((LA147_0=='0'))
																				{
																					alt147 = 1;
																				}
																			} finally { DebugExitDecision(147); }
																			switch (alt147)
																			{
																				case 1:
																				DebugEnterAlt(1);
																				// CSS3.g3:450:46: '0'
																				{
																					DebugLocation(450, 46);
																					Match('0'); if (state.failed) return;

																				}
																				break;

																			}
																		} finally { DebugExitSubRule(147); }


																	}
																	break;

																}
															} finally { DebugExitSubRule(148); }


														}
														break;

													}
												} finally { DebugExitSubRule(149); }


											}
											break;

										}
									} finally { DebugExitSubRule(150); }

									DebugLocation(450, 57);
									input.Consume();
									state.failed=false;
									DebugLocation(450, 66);
									// CSS3.g3:450:66: ( '5' )
									DebugEnterAlt(1);
									// CSS3.g3:450:67: '5'
									{
										DebugLocation(450, 67);
										Match('5'); if (state.failed) return;

									}


								}
								break;

							}
						} finally { DebugExitSubRule(151); }


					}
					break;

				}
			}
			finally
			{
				TraceOut("U", 29);
				LeaveRule("U", 29);
				LeaveRule_U();
			}
		}
		// $ANTLR end "U"

		partial void EnterRule_V();
		partial void LeaveRule_V();

		// $ANTLR start "V"
		[GrammarRule("V")]
		private void mV()
		{
			EnterRule_V();
			EnterRule("V", 30);
			TraceIn("V", 30);
			try
			{
				// CSS3.g3:453:17: ( ( 'v' | 'V' ) ( '\\r' | '\\n' | '\\t' | '\\f' | ' ' )* | '\\\\' ( 'v' | 'V' | ( '0' ( '0' ( '0' ( '0' )? )? )? )? ( '5' | '7' ) ( '6' ) ) )
				int alt159=2;
				try { DebugEnterDecision(159, false);
					int LA159_0 = input.LA(1);

					if ((LA159_0=='V'||LA159_0=='v'))
					{
						alt159 = 1;
					}
					else if ((LA159_0=='\\'))
					{
						alt159 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae = new NoViableAltException("", 159, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				} finally { DebugExitDecision(159); }
				switch (alt159)
				{
					case 1:
					DebugEnterAlt(1);
					// CSS3.g3:453:21: ( 'v' | 'V' ) ( '\\r' | '\\n' | '\\t' | '\\f' | ' ' )*
					{
						DebugLocation(453, 21);
						input.Consume();
						state.failed=false;
						DebugLocation(453, 31);
						// CSS3.g3:453:31: ( '\\r' | '\\n' | '\\t' | '\\f' | ' ' )*
						try { DebugEnterSubRule(153);
							while (true)
							{
								int alt153=2;
								try { DebugEnterDecision(153, false);
									int LA153_0 = input.LA(1);

									if (((LA153_0>='\t' && LA153_0<='\n')||(LA153_0>='\f' && LA153_0<='\r')||LA153_0==' '))
									{
										alt153 = 1;
									}


								} finally { DebugExitDecision(153); }
								switch ( alt153 )
								{
									case 1:
									DebugEnterAlt(1);
									// CSS3.g3:
									{
										DebugLocation(453, 31);
										input.Consume();
										state.failed=false;

									}
									break;

									default:
									goto loop153;
								}
							}

							loop153:
								;

						} finally { DebugExitSubRule(153); }


					}
					break;
					case 2:
					DebugEnterAlt(2);
					// CSS3.g3:454:19: '\\\\' ( 'v' | 'V' | ( '0' ( '0' ( '0' ( '0' )? )? )? )? ( '5' | '7' ) ( '6' ) )
					{
						DebugLocation(454, 19);
						Match('\\'); if (state.failed) return;
						DebugLocation(455, 25);
						// CSS3.g3:455:25: ( 'v' | 'V' | ( '0' ( '0' ( '0' ( '0' )? )? )? )? ( '5' | '7' ) ( '6' ) )
						int alt158=3;
						try { DebugEnterSubRule(158);
							try { DebugEnterDecision(158, false);
								switch (input.LA(1))
								{
									case 'v':
								{
									alt158 = 1;
								}
									break;
									case 'V':
								{
									alt158 = 2;
								}
									break;
									case '0':
									case '5':
									case '7':
								{
									alt158 = 3;
								}
									break;
									default:
								{
									if (state.backtracking>0) {state.failed=true; return;}
									NoViableAltException nvae = new NoViableAltException("", 158, 0, input);
									DebugRecognitionException(nvae);
									throw nvae;
								}
								}

							} finally { DebugExitDecision(158); }
							switch (alt158)
							{
								case 1:
								DebugEnterAlt(1);
								// CSS3.g3:455:31: 'v'
								{
									DebugLocation(455, 31);
									Match('v'); if (state.failed) return;

								}
								break;
								case 2:
								DebugEnterAlt(2);
								// CSS3.g3:456:31: 'V'
								{
									DebugLocation(456, 31);
									Match('V'); if (state.failed) return;

								}
								break;
								case 3:
								DebugEnterAlt(3);
								// CSS3.g3:457:31: ( '0' ( '0' ( '0' ( '0' )? )? )? )? ( '5' | '7' ) ( '6' )
								{
									DebugLocation(457, 31);
									// CSS3.g3:457:31: ( '0' ( '0' ( '0' ( '0' )? )? )? )?
									int alt157=2;
									try { DebugEnterSubRule(157);
										try { DebugEnterDecision(157, false);
											int LA157_0 = input.LA(1);

											if ((LA157_0=='0'))
											{
												alt157 = 1;
											}
										} finally { DebugExitDecision(157); }
										switch (alt157)
										{
											case 1:
											DebugEnterAlt(1);
											// CSS3.g3:457:32: '0' ( '0' ( '0' ( '0' )? )? )?
											{
												DebugLocation(457, 32);
												Match('0'); if (state.failed) return;
												DebugLocation(457, 36);
												// CSS3.g3:457:36: ( '0' ( '0' ( '0' )? )? )?
												int alt156=2;
												try { DebugEnterSubRule(156);
													try { DebugEnterDecision(156, false);
														int LA156_0 = input.LA(1);

														if ((LA156_0=='0'))
														{
															alt156 = 1;
														}
													} finally { DebugExitDecision(156); }
													switch (alt156)
													{
														case 1:
														DebugEnterAlt(1);
														// CSS3.g3:457:37: '0' ( '0' ( '0' )? )?
														{
															DebugLocation(457, 37);
															Match('0'); if (state.failed) return;
															DebugLocation(457, 41);
															// CSS3.g3:457:41: ( '0' ( '0' )? )?
															int alt155=2;
															try { DebugEnterSubRule(155);
																try { DebugEnterDecision(155, false);
																	int LA155_0 = input.LA(1);

																	if ((LA155_0=='0'))
																	{
																		alt155 = 1;
																	}
																} finally { DebugExitDecision(155); }
																switch (alt155)
																{
																	case 1:
																	DebugEnterAlt(1);
																	// CSS3.g3:457:42: '0' ( '0' )?
																	{
																		DebugLocation(457, 42);
																		Match('0'); if (state.failed) return;
																		DebugLocation(457, 46);
																		// CSS3.g3:457:46: ( '0' )?
																		int alt154=2;
																		try { DebugEnterSubRule(154);
																			try { DebugEnterDecision(154, false);
																				int LA154_0 = input.LA(1);

																				if ((LA154_0=='0'))
																				{
																					alt154 = 1;
																				}
																			} finally { DebugExitDecision(154); }
																			switch (alt154)
																			{
																				case 1:
																				DebugEnterAlt(1);
																				// CSS3.g3:457:46: '0'
																				{
																					DebugLocation(457, 46);
																					Match('0'); if (state.failed) return;

																				}
																				break;

																			}
																		} finally { DebugExitSubRule(154); }


																	}
																	break;

																}
															} finally { DebugExitSubRule(155); }


														}
														break;

													}
												} finally { DebugExitSubRule(156); }


											}
											break;

										}
									} finally { DebugExitSubRule(157); }

									DebugLocation(457, 57);
									input.Consume();
									state.failed=false;
									DebugLocation(457, 66);
									// CSS3.g3:457:66: ( '6' )
									DebugEnterAlt(1);
									// CSS3.g3:457:67: '6'
									{
										DebugLocation(457, 67);
										Match('6'); if (state.failed) return;

									}


								}
								break;

							}
						} finally { DebugExitSubRule(158); }


					}
					break;

				}
			}
			finally
			{
				TraceOut("V", 30);
				LeaveRule("V", 30);
				LeaveRule_V();
			}
		}
		// $ANTLR end "V"

		partial void EnterRule_W();
		partial void LeaveRule_W();

		// $ANTLR start "W"
		[GrammarRule("W")]
		private void mW()
		{
			EnterRule_W();
			EnterRule("W", 31);
			TraceIn("W", 31);
			try
			{
				// CSS3.g3:460:17: ( ( 'w' | 'W' ) ( '\\r' | '\\n' | '\\t' | '\\f' | ' ' )* | '\\\\' ( 'w' | 'W' | ( '0' ( '0' ( '0' ( '0' )? )? )? )? ( '5' | '7' ) ( '7' ) ) )
				int alt166=2;
				try { DebugEnterDecision(166, false);
					int LA166_0 = input.LA(1);

					if ((LA166_0=='W'||LA166_0=='w'))
					{
						alt166 = 1;
					}
					else if ((LA166_0=='\\'))
					{
						alt166 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae = new NoViableAltException("", 166, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				} finally { DebugExitDecision(166); }
				switch (alt166)
				{
					case 1:
					DebugEnterAlt(1);
					// CSS3.g3:460:21: ( 'w' | 'W' ) ( '\\r' | '\\n' | '\\t' | '\\f' | ' ' )*
					{
						DebugLocation(460, 21);
						input.Consume();
						state.failed=false;
						DebugLocation(460, 31);
						// CSS3.g3:460:31: ( '\\r' | '\\n' | '\\t' | '\\f' | ' ' )*
						try { DebugEnterSubRule(160);
							while (true)
							{
								int alt160=2;
								try { DebugEnterDecision(160, false);
									int LA160_0 = input.LA(1);

									if (((LA160_0>='\t' && LA160_0<='\n')||(LA160_0>='\f' && LA160_0<='\r')||LA160_0==' '))
									{
										alt160 = 1;
									}


								} finally { DebugExitDecision(160); }
								switch ( alt160 )
								{
									case 1:
									DebugEnterAlt(1);
									// CSS3.g3:
									{
										DebugLocation(460, 31);
										input.Consume();
										state.failed=false;

									}
									break;

									default:
									goto loop160;
								}
							}

							loop160:
								;

						} finally { DebugExitSubRule(160); }


					}
					break;
					case 2:
					DebugEnterAlt(2);
					// CSS3.g3:461:19: '\\\\' ( 'w' | 'W' | ( '0' ( '0' ( '0' ( '0' )? )? )? )? ( '5' | '7' ) ( '7' ) )
					{
						DebugLocation(461, 19);
						Match('\\'); if (state.failed) return;
						DebugLocation(462, 25);
						// CSS3.g3:462:25: ( 'w' | 'W' | ( '0' ( '0' ( '0' ( '0' )? )? )? )? ( '5' | '7' ) ( '7' ) )
						int alt165=3;
						try { DebugEnterSubRule(165);
							try { DebugEnterDecision(165, false);
								switch (input.LA(1))
								{
									case 'w':
								{
									alt165 = 1;
								}
									break;
									case 'W':
								{
									alt165 = 2;
								}
									break;
									case '0':
									case '5':
									case '7':
								{
									alt165 = 3;
								}
									break;
									default:
								{
									if (state.backtracking>0) {state.failed=true; return;}
									NoViableAltException nvae = new NoViableAltException("", 165, 0, input);
									DebugRecognitionException(nvae);
									throw nvae;
								}
								}

							} finally { DebugExitDecision(165); }
							switch (alt165)
							{
								case 1:
								DebugEnterAlt(1);
								// CSS3.g3:463:31: 'w'
								{
									DebugLocation(463, 31);
									Match('w'); if (state.failed) return;

								}
								break;
								case 2:
								DebugEnterAlt(2);
								// CSS3.g3:464:31: 'W'
								{
									DebugLocation(464, 31);
									Match('W'); if (state.failed) return;

								}
								break;
								case 3:
								DebugEnterAlt(3);
								// CSS3.g3:465:31: ( '0' ( '0' ( '0' ( '0' )? )? )? )? ( '5' | '7' ) ( '7' )
								{
									DebugLocation(465, 31);
									// CSS3.g3:465:31: ( '0' ( '0' ( '0' ( '0' )? )? )? )?
									int alt164=2;
									try { DebugEnterSubRule(164);
										try { DebugEnterDecision(164, false);
											int LA164_0 = input.LA(1);

											if ((LA164_0=='0'))
											{
												alt164 = 1;
											}
										} finally { DebugExitDecision(164); }
										switch (alt164)
										{
											case 1:
											DebugEnterAlt(1);
											// CSS3.g3:465:32: '0' ( '0' ( '0' ( '0' )? )? )?
											{
												DebugLocation(465, 32);
												Match('0'); if (state.failed) return;
												DebugLocation(465, 36);
												// CSS3.g3:465:36: ( '0' ( '0' ( '0' )? )? )?
												int alt163=2;
												try { DebugEnterSubRule(163);
													try { DebugEnterDecision(163, false);
														int LA163_0 = input.LA(1);

														if ((LA163_0=='0'))
														{
															alt163 = 1;
														}
													} finally { DebugExitDecision(163); }
													switch (alt163)
													{
														case 1:
														DebugEnterAlt(1);
														// CSS3.g3:465:37: '0' ( '0' ( '0' )? )?
														{
															DebugLocation(465, 37);
															Match('0'); if (state.failed) return;
															DebugLocation(465, 41);
															// CSS3.g3:465:41: ( '0' ( '0' )? )?
															int alt162=2;
															try { DebugEnterSubRule(162);
																try { DebugEnterDecision(162, false);
																	int LA162_0 = input.LA(1);

																	if ((LA162_0=='0'))
																	{
																		alt162 = 1;
																	}
																} finally { DebugExitDecision(162); }
																switch (alt162)
																{
																	case 1:
																	DebugEnterAlt(1);
																	// CSS3.g3:465:42: '0' ( '0' )?
																	{
																		DebugLocation(465, 42);
																		Match('0'); if (state.failed) return;
																		DebugLocation(465, 46);
																		// CSS3.g3:465:46: ( '0' )?
																		int alt161=2;
																		try { DebugEnterSubRule(161);
																			try { DebugEnterDecision(161, false);
																				int LA161_0 = input.LA(1);

																				if ((LA161_0=='0'))
																				{
																					alt161 = 1;
																				}
																			} finally { DebugExitDecision(161); }
																			switch (alt161)
																			{
																				case 1:
																				DebugEnterAlt(1);
																				// CSS3.g3:465:46: '0'
																				{
																					DebugLocation(465, 46);
																					Match('0'); if (state.failed) return;

																				}
																				break;

																			}
																		} finally { DebugExitSubRule(161); }


																	}
																	break;

																}
															} finally { DebugExitSubRule(162); }


														}
														break;

													}
												} finally { DebugExitSubRule(163); }


											}
											break;

										}
									} finally { DebugExitSubRule(164); }

									DebugLocation(465, 57);
									input.Consume();
									state.failed=false;
									DebugLocation(465, 66);
									// CSS3.g3:465:66: ( '7' )
									DebugEnterAlt(1);
									// CSS3.g3:465:67: '7'
									{
										DebugLocation(465, 67);
										Match('7'); if (state.failed) return;

									}


								}
								break;

							}
						} finally { DebugExitSubRule(165); }


					}
					break;

				}
			}
			finally
			{
				TraceOut("W", 31);
				LeaveRule("W", 31);
				LeaveRule_W();
			}
		}
		// $ANTLR end "W"

		partial void EnterRule_X();
		partial void LeaveRule_X();

		// $ANTLR start "X"
		[GrammarRule("X")]
		private void mX()
		{
			EnterRule_X();
			EnterRule("X", 32);
			TraceIn("X", 32);
			try
			{
				// CSS3.g3:468:17: ( ( 'x' | 'X' ) ( '\\r' | '\\n' | '\\t' | '\\f' | ' ' )* | '\\\\' ( 'x' | 'X' | ( '0' ( '0' ( '0' ( '0' )? )? )? )? ( '5' | '7' ) ( '8' ) ) )
				int alt173=2;
				try { DebugEnterDecision(173, false);
					int LA173_0 = input.LA(1);

					if ((LA173_0=='X'||LA173_0=='x'))
					{
						alt173 = 1;
					}
					else if ((LA173_0=='\\'))
					{
						alt173 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae = new NoViableAltException("", 173, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				} finally { DebugExitDecision(173); }
				switch (alt173)
				{
					case 1:
					DebugEnterAlt(1);
					// CSS3.g3:468:21: ( 'x' | 'X' ) ( '\\r' | '\\n' | '\\t' | '\\f' | ' ' )*
					{
						DebugLocation(468, 21);
						input.Consume();
						state.failed=false;
						DebugLocation(468, 31);
						// CSS3.g3:468:31: ( '\\r' | '\\n' | '\\t' | '\\f' | ' ' )*
						try { DebugEnterSubRule(167);
							while (true)
							{
								int alt167=2;
								try { DebugEnterDecision(167, false);
									int LA167_0 = input.LA(1);

									if (((LA167_0>='\t' && LA167_0<='\n')||(LA167_0>='\f' && LA167_0<='\r')||LA167_0==' '))
									{
										alt167 = 1;
									}


								} finally { DebugExitDecision(167); }
								switch ( alt167 )
								{
									case 1:
									DebugEnterAlt(1);
									// CSS3.g3:
									{
										DebugLocation(468, 31);
										input.Consume();
										state.failed=false;

									}
									break;

									default:
									goto loop167;
								}
							}

							loop167:
								;

						} finally { DebugExitSubRule(167); }


					}
					break;
					case 2:
					DebugEnterAlt(2);
					// CSS3.g3:469:19: '\\\\' ( 'x' | 'X' | ( '0' ( '0' ( '0' ( '0' )? )? )? )? ( '5' | '7' ) ( '8' ) )
					{
						DebugLocation(469, 19);
						Match('\\'); if (state.failed) return;
						DebugLocation(470, 25);
						// CSS3.g3:470:25: ( 'x' | 'X' | ( '0' ( '0' ( '0' ( '0' )? )? )? )? ( '5' | '7' ) ( '8' ) )
						int alt172=3;
						try { DebugEnterSubRule(172);
							try { DebugEnterDecision(172, false);
								switch (input.LA(1))
								{
									case 'x':
								{
									alt172 = 1;
								}
									break;
									case 'X':
								{
									alt172 = 2;
								}
									break;
									case '0':
									case '5':
									case '7':
								{
									alt172 = 3;
								}
									break;
									default:
								{
									if (state.backtracking>0) {state.failed=true; return;}
									NoViableAltException nvae = new NoViableAltException("", 172, 0, input);
									DebugRecognitionException(nvae);
									throw nvae;
								}
								}

							} finally { DebugExitDecision(172); }
							switch (alt172)
							{
								case 1:
								DebugEnterAlt(1);
								// CSS3.g3:471:31: 'x'
								{
									DebugLocation(471, 31);
									Match('x'); if (state.failed) return;

								}
								break;
								case 2:
								DebugEnterAlt(2);
								// CSS3.g3:472:31: 'X'
								{
									DebugLocation(472, 31);
									Match('X'); if (state.failed) return;

								}
								break;
								case 3:
								DebugEnterAlt(3);
								// CSS3.g3:473:31: ( '0' ( '0' ( '0' ( '0' )? )? )? )? ( '5' | '7' ) ( '8' )
								{
									DebugLocation(473, 31);
									// CSS3.g3:473:31: ( '0' ( '0' ( '0' ( '0' )? )? )? )?
									int alt171=2;
									try { DebugEnterSubRule(171);
										try { DebugEnterDecision(171, false);
											int LA171_0 = input.LA(1);

											if ((LA171_0=='0'))
											{
												alt171 = 1;
											}
										} finally { DebugExitDecision(171); }
										switch (alt171)
										{
											case 1:
											DebugEnterAlt(1);
											// CSS3.g3:473:32: '0' ( '0' ( '0' ( '0' )? )? )?
											{
												DebugLocation(473, 32);
												Match('0'); if (state.failed) return;
												DebugLocation(473, 36);
												// CSS3.g3:473:36: ( '0' ( '0' ( '0' )? )? )?
												int alt170=2;
												try { DebugEnterSubRule(170);
													try { DebugEnterDecision(170, false);
														int LA170_0 = input.LA(1);

														if ((LA170_0=='0'))
														{
															alt170 = 1;
														}
													} finally { DebugExitDecision(170); }
													switch (alt170)
													{
														case 1:
														DebugEnterAlt(1);
														// CSS3.g3:473:37: '0' ( '0' ( '0' )? )?
														{
															DebugLocation(473, 37);
															Match('0'); if (state.failed) return;
															DebugLocation(473, 41);
															// CSS3.g3:473:41: ( '0' ( '0' )? )?
															int alt169=2;
															try { DebugEnterSubRule(169);
																try { DebugEnterDecision(169, false);
																	int LA169_0 = input.LA(1);

																	if ((LA169_0=='0'))
																	{
																		alt169 = 1;
																	}
																} finally { DebugExitDecision(169); }
																switch (alt169)
																{
																	case 1:
																	DebugEnterAlt(1);
																	// CSS3.g3:473:42: '0' ( '0' )?
																	{
																		DebugLocation(473, 42);
																		Match('0'); if (state.failed) return;
																		DebugLocation(473, 46);
																		// CSS3.g3:473:46: ( '0' )?
																		int alt168=2;
																		try { DebugEnterSubRule(168);
																			try { DebugEnterDecision(168, false);
																				int LA168_0 = input.LA(1);

																				if ((LA168_0=='0'))
																				{
																					alt168 = 1;
																				}
																			} finally { DebugExitDecision(168); }
																			switch (alt168)
																			{
																				case 1:
																				DebugEnterAlt(1);
																				// CSS3.g3:473:46: '0'
																				{
																					DebugLocation(473, 46);
																					Match('0'); if (state.failed) return;

																				}
																				break;

																			}
																		} finally { DebugExitSubRule(168); }


																	}
																	break;

																}
															} finally { DebugExitSubRule(169); }


														}
														break;

													}
												} finally { DebugExitSubRule(170); }


											}
											break;

										}
									} finally { DebugExitSubRule(171); }

									DebugLocation(473, 57);
									input.Consume();
									state.failed=false;
									DebugLocation(473, 66);
									// CSS3.g3:473:66: ( '8' )
									DebugEnterAlt(1);
									// CSS3.g3:473:67: '8'
									{
										DebugLocation(473, 67);
										Match('8'); if (state.failed) return;

									}


								}
								break;

							}
						} finally { DebugExitSubRule(172); }


					}
					break;

				}
			}
			finally
			{
				TraceOut("X", 32);
				LeaveRule("X", 32);
				LeaveRule_X();
			}
		}
		// $ANTLR end "X"

		partial void EnterRule_Y();
		partial void LeaveRule_Y();

		// $ANTLR start "Y"
		[GrammarRule("Y")]
		private void mY()
		{
			EnterRule_Y();
			EnterRule("Y", 33);
			TraceIn("Y", 33);
			try
			{
				// CSS3.g3:476:17: ( ( 'y' | 'Y' ) ( '\\r' | '\\n' | '\\t' | '\\f' | ' ' )* | '\\\\' ( 'y' | 'Y' | ( '0' ( '0' ( '0' ( '0' )? )? )? )? ( '5' | '7' ) ( '9' ) ) )
				int alt180=2;
				try { DebugEnterDecision(180, false);
					int LA180_0 = input.LA(1);

					if ((LA180_0=='Y'||LA180_0=='y'))
					{
						alt180 = 1;
					}
					else if ((LA180_0=='\\'))
					{
						alt180 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae = new NoViableAltException("", 180, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				} finally { DebugExitDecision(180); }
				switch (alt180)
				{
					case 1:
					DebugEnterAlt(1);
					// CSS3.g3:476:21: ( 'y' | 'Y' ) ( '\\r' | '\\n' | '\\t' | '\\f' | ' ' )*
					{
						DebugLocation(476, 21);
						input.Consume();
						state.failed=false;
						DebugLocation(476, 31);
						// CSS3.g3:476:31: ( '\\r' | '\\n' | '\\t' | '\\f' | ' ' )*
						try { DebugEnterSubRule(174);
							while (true)
							{
								int alt174=2;
								try { DebugEnterDecision(174, false);
									int LA174_0 = input.LA(1);

									if (((LA174_0>='\t' && LA174_0<='\n')||(LA174_0>='\f' && LA174_0<='\r')||LA174_0==' '))
									{
										alt174 = 1;
									}


								} finally { DebugExitDecision(174); }
								switch ( alt174 )
								{
									case 1:
									DebugEnterAlt(1);
									// CSS3.g3:
									{
										DebugLocation(476, 31);
										input.Consume();
										state.failed=false;

									}
									break;

									default:
									goto loop174;
								}
							}

							loop174:
								;

						} finally { DebugExitSubRule(174); }


					}
					break;
					case 2:
					DebugEnterAlt(2);
					// CSS3.g3:477:19: '\\\\' ( 'y' | 'Y' | ( '0' ( '0' ( '0' ( '0' )? )? )? )? ( '5' | '7' ) ( '9' ) )
					{
						DebugLocation(477, 19);
						Match('\\'); if (state.failed) return;
						DebugLocation(478, 25);
						// CSS3.g3:478:25: ( 'y' | 'Y' | ( '0' ( '0' ( '0' ( '0' )? )? )? )? ( '5' | '7' ) ( '9' ) )
						int alt179=3;
						try { DebugEnterSubRule(179);
							try { DebugEnterDecision(179, false);
								switch (input.LA(1))
								{
									case 'y':
								{
									alt179 = 1;
								}
									break;
									case 'Y':
								{
									alt179 = 2;
								}
									break;
									case '0':
									case '5':
									case '7':
								{
									alt179 = 3;
								}
									break;
									default:
								{
									if (state.backtracking>0) {state.failed=true; return;}
									NoViableAltException nvae = new NoViableAltException("", 179, 0, input);
									DebugRecognitionException(nvae);
									throw nvae;
								}
								}

							} finally { DebugExitDecision(179); }
							switch (alt179)
							{
								case 1:
								DebugEnterAlt(1);
								// CSS3.g3:479:31: 'y'
								{
									DebugLocation(479, 31);
									Match('y'); if (state.failed) return;

								}
								break;
								case 2:
								DebugEnterAlt(2);
								// CSS3.g3:480:31: 'Y'
								{
									DebugLocation(480, 31);
									Match('Y'); if (state.failed) return;

								}
								break;
								case 3:
								DebugEnterAlt(3);
								// CSS3.g3:481:31: ( '0' ( '0' ( '0' ( '0' )? )? )? )? ( '5' | '7' ) ( '9' )
								{
									DebugLocation(481, 31);
									// CSS3.g3:481:31: ( '0' ( '0' ( '0' ( '0' )? )? )? )?
									int alt178=2;
									try { DebugEnterSubRule(178);
										try { DebugEnterDecision(178, false);
											int LA178_0 = input.LA(1);

											if ((LA178_0=='0'))
											{
												alt178 = 1;
											}
										} finally { DebugExitDecision(178); }
										switch (alt178)
										{
											case 1:
											DebugEnterAlt(1);
											// CSS3.g3:481:32: '0' ( '0' ( '0' ( '0' )? )? )?
											{
												DebugLocation(481, 32);
												Match('0'); if (state.failed) return;
												DebugLocation(481, 36);
												// CSS3.g3:481:36: ( '0' ( '0' ( '0' )? )? )?
												int alt177=2;
												try { DebugEnterSubRule(177);
													try { DebugEnterDecision(177, false);
														int LA177_0 = input.LA(1);

														if ((LA177_0=='0'))
														{
															alt177 = 1;
														}
													} finally { DebugExitDecision(177); }
													switch (alt177)
													{
														case 1:
														DebugEnterAlt(1);
														// CSS3.g3:481:37: '0' ( '0' ( '0' )? )?
														{
															DebugLocation(481, 37);
															Match('0'); if (state.failed) return;
															DebugLocation(481, 41);
															// CSS3.g3:481:41: ( '0' ( '0' )? )?
															int alt176=2;
															try { DebugEnterSubRule(176);
																try { DebugEnterDecision(176, false);
																	int LA176_0 = input.LA(1);

																	if ((LA176_0=='0'))
																	{
																		alt176 = 1;
																	}
																} finally { DebugExitDecision(176); }
																switch (alt176)
																{
																	case 1:
																	DebugEnterAlt(1);
																	// CSS3.g3:481:42: '0' ( '0' )?
																	{
																		DebugLocation(481, 42);
																		Match('0'); if (state.failed) return;
																		DebugLocation(481, 46);
																		// CSS3.g3:481:46: ( '0' )?
																		int alt175=2;
																		try { DebugEnterSubRule(175);
																			try { DebugEnterDecision(175, false);
																				int LA175_0 = input.LA(1);

																				if ((LA175_0=='0'))
																				{
																					alt175 = 1;
																				}
																			} finally { DebugExitDecision(175); }
																			switch (alt175)
																			{
																				case 1:
																				DebugEnterAlt(1);
																				// CSS3.g3:481:46: '0'
																				{
																					DebugLocation(481, 46);
																					Match('0'); if (state.failed) return;

																				}
																				break;

																			}
																		} finally { DebugExitSubRule(175); }


																	}
																	break;

																}
															} finally { DebugExitSubRule(176); }


														}
														break;

													}
												} finally { DebugExitSubRule(177); }


											}
											break;

										}
									} finally { DebugExitSubRule(178); }

									DebugLocation(481, 57);
									input.Consume();
									state.failed=false;
									DebugLocation(481, 66);
									// CSS3.g3:481:66: ( '9' )
									DebugEnterAlt(1);
									// CSS3.g3:481:67: '9'
									{
										DebugLocation(481, 67);
										Match('9'); if (state.failed) return;

									}


								}
								break;

							}
						} finally { DebugExitSubRule(179); }


					}
					break;

				}
			}
			finally
			{
				TraceOut("Y", 33);
				LeaveRule("Y", 33);
				LeaveRule_Y();
			}
		}
		// $ANTLR end "Y"

		partial void EnterRule_Z();
		partial void LeaveRule_Z();

		// $ANTLR start "Z"
		[GrammarRule("Z")]
		private void mZ()
		{
			EnterRule_Z();
			EnterRule("Z", 34);
			TraceIn("Z", 34);
			try
			{
				// CSS3.g3:484:17: ( ( 'z' | 'Z' ) ( '\\r' | '\\n' | '\\t' | '\\f' | ' ' )* | '\\\\' ( 'z' | 'Z' | ( '0' ( '0' ( '0' ( '0' )? )? )? )? ( '5' | '7' ) ( 'A' | 'a' ) ) )
				int alt187=2;
				try { DebugEnterDecision(187, false);
					int LA187_0 = input.LA(1);

					if ((LA187_0=='Z'||LA187_0=='z'))
					{
						alt187 = 1;
					}
					else if ((LA187_0=='\\'))
					{
						alt187 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae = new NoViableAltException("", 187, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				} finally { DebugExitDecision(187); }
				switch (alt187)
				{
					case 1:
					DebugEnterAlt(1);
					// CSS3.g3:484:21: ( 'z' | 'Z' ) ( '\\r' | '\\n' | '\\t' | '\\f' | ' ' )*
					{
						DebugLocation(484, 21);
						input.Consume();
						state.failed=false;
						DebugLocation(484, 31);
						// CSS3.g3:484:31: ( '\\r' | '\\n' | '\\t' | '\\f' | ' ' )*
						try { DebugEnterSubRule(181);
							while (true)
							{
								int alt181=2;
								try { DebugEnterDecision(181, false);
									int LA181_0 = input.LA(1);

									if (((LA181_0>='\t' && LA181_0<='\n')||(LA181_0>='\f' && LA181_0<='\r')||LA181_0==' '))
									{
										alt181 = 1;
									}


								} finally { DebugExitDecision(181); }
								switch ( alt181 )
								{
									case 1:
									DebugEnterAlt(1);
									// CSS3.g3:
									{
										DebugLocation(484, 31);
										input.Consume();
										state.failed=false;

									}
									break;

									default:
									goto loop181;
								}
							}

							loop181:
								;

						} finally { DebugExitSubRule(181); }


					}
					break;
					case 2:
					DebugEnterAlt(2);
					// CSS3.g3:485:19: '\\\\' ( 'z' | 'Z' | ( '0' ( '0' ( '0' ( '0' )? )? )? )? ( '5' | '7' ) ( 'A' | 'a' ) )
					{
						DebugLocation(485, 19);
						Match('\\'); if (state.failed) return;
						DebugLocation(486, 25);
						// CSS3.g3:486:25: ( 'z' | 'Z' | ( '0' ( '0' ( '0' ( '0' )? )? )? )? ( '5' | '7' ) ( 'A' | 'a' ) )
						int alt186=3;
						try { DebugEnterSubRule(186);
							try { DebugEnterDecision(186, false);
								switch (input.LA(1))
								{
									case 'z':
								{
									alt186 = 1;
								}
									break;
									case 'Z':
								{
									alt186 = 2;
								}
									break;
									case '0':
									case '5':
									case '7':
								{
									alt186 = 3;
								}
									break;
									default:
								{
									if (state.backtracking>0) {state.failed=true; return;}
									NoViableAltException nvae = new NoViableAltException("", 186, 0, input);
									DebugRecognitionException(nvae);
									throw nvae;
								}
								}

							} finally { DebugExitDecision(186); }
							switch (alt186)
							{
								case 1:
								DebugEnterAlt(1);
								// CSS3.g3:487:31: 'z'
								{
									DebugLocation(487, 31);
									Match('z'); if (state.failed) return;

								}
								break;
								case 2:
								DebugEnterAlt(2);
								// CSS3.g3:488:31: 'Z'
								{
									DebugLocation(488, 31);
									Match('Z'); if (state.failed) return;

								}
								break;
								case 3:
								DebugEnterAlt(3);
								// CSS3.g3:489:31: ( '0' ( '0' ( '0' ( '0' )? )? )? )? ( '5' | '7' ) ( 'A' | 'a' )
								{
									DebugLocation(489, 31);
									// CSS3.g3:489:31: ( '0' ( '0' ( '0' ( '0' )? )? )? )?
									int alt185=2;
									try { DebugEnterSubRule(185);
										try { DebugEnterDecision(185, false);
											int LA185_0 = input.LA(1);

											if ((LA185_0=='0'))
											{
												alt185 = 1;
											}
										} finally { DebugExitDecision(185); }
										switch (alt185)
										{
											case 1:
											DebugEnterAlt(1);
											// CSS3.g3:489:32: '0' ( '0' ( '0' ( '0' )? )? )?
											{
												DebugLocation(489, 32);
												Match('0'); if (state.failed) return;
												DebugLocation(489, 36);
												// CSS3.g3:489:36: ( '0' ( '0' ( '0' )? )? )?
												int alt184=2;
												try { DebugEnterSubRule(184);
													try { DebugEnterDecision(184, false);
														int LA184_0 = input.LA(1);

														if ((LA184_0=='0'))
														{
															alt184 = 1;
														}
													} finally { DebugExitDecision(184); }
													switch (alt184)
													{
														case 1:
														DebugEnterAlt(1);
														// CSS3.g3:489:37: '0' ( '0' ( '0' )? )?
														{
															DebugLocation(489, 37);
															Match('0'); if (state.failed) return;
															DebugLocation(489, 41);
															// CSS3.g3:489:41: ( '0' ( '0' )? )?
															int alt183=2;
															try { DebugEnterSubRule(183);
																try { DebugEnterDecision(183, false);
																	int LA183_0 = input.LA(1);

																	if ((LA183_0=='0'))
																	{
																		alt183 = 1;
																	}
																} finally { DebugExitDecision(183); }
																switch (alt183)
																{
																	case 1:
																	DebugEnterAlt(1);
																	// CSS3.g3:489:42: '0' ( '0' )?
																	{
																		DebugLocation(489, 42);
																		Match('0'); if (state.failed) return;
																		DebugLocation(489, 46);
																		// CSS3.g3:489:46: ( '0' )?
																		int alt182=2;
																		try { DebugEnterSubRule(182);
																			try { DebugEnterDecision(182, false);
																				int LA182_0 = input.LA(1);

																				if ((LA182_0=='0'))
																				{
																					alt182 = 1;
																				}
																			} finally { DebugExitDecision(182); }
																			switch (alt182)
																			{
																				case 1:
																				DebugEnterAlt(1);
																				// CSS3.g3:489:46: '0'
																				{
																					DebugLocation(489, 46);
																					Match('0'); if (state.failed) return;

																				}
																				break;

																			}
																		} finally { DebugExitSubRule(182); }


																	}
																	break;

																}
															} finally { DebugExitSubRule(183); }


														}
														break;

													}
												} finally { DebugExitSubRule(184); }


											}
											break;

										}
									} finally { DebugExitSubRule(185); }

									DebugLocation(489, 57);
									input.Consume();
									state.failed=false;
									DebugLocation(489, 66);
									input.Consume();
									state.failed=false;

								}
								break;

							}
						} finally { DebugExitSubRule(186); }


					}
					break;

				}
			}
			finally
			{
				TraceOut("Z", 34);
				LeaveRule("Z", 34);
				LeaveRule_Z();
			}
		}
		// $ANTLR end "Z"

		partial void EnterRule_COMMENT();
		partial void LeaveRule_COMMENT();

		// $ANTLR start "COMMENT"
		[GrammarRule("COMMENT")]
		private void mCOMMENT()
		{
			EnterRule_COMMENT();
			EnterRule("COMMENT", 35);
			TraceIn("COMMENT", 35);
			try
			{
				int _type = COMMENT;
				int _channel = DefaultTokenChannel;
				// CSS3.g3:500:17: ( '/*' ( options {greedy=false; } : ( . )* ) '*/' )
				DebugEnterAlt(1);
				// CSS3.g3:500:19: '/*' ( options {greedy=false; } : ( . )* ) '*/'
				{
					DebugLocation(500, 19);
					Match("/*"); if (state.failed) return;

					DebugLocation(500, 24);
					// CSS3.g3:500:24: ( options {greedy=false; } : ( . )* )
					DebugEnterAlt(1);
					// CSS3.g3:500:54: ( . )*
					{
						DebugLocation(500, 54);
						// CSS3.g3:500:54: ( . )*
						try { DebugEnterSubRule(188);
							while (true)
							{
								int alt188=2;
								try { DebugEnterDecision(188, false);
									int LA188_0 = input.LA(1);

									if ((LA188_0=='*'))
									{
										int LA188_1 = input.LA(2);

										if ((LA188_1=='/'))
										{
											alt188 = 2;
										}
										else if (((LA188_1>='\u0000' && LA188_1<='.')||(LA188_1>='0' && LA188_1<='\uFFFF')))
										{
											alt188 = 1;
										}


									}
									else if (((LA188_0>='\u0000' && LA188_0<=')')||(LA188_0>='+' && LA188_0<='\uFFFF')))
									{
										alt188 = 1;
									}


								} finally { DebugExitDecision(188); }
								switch ( alt188 )
								{
									case 1:
									DebugEnterAlt(1);
									// CSS3.g3:500:54: .
									{
										DebugLocation(500, 54);
										MatchAny(); if (state.failed) return;

									}
									break;

									default:
									goto loop188;
								}
							}

							loop188:
								;

						} finally { DebugExitSubRule(188); }


					}

					DebugLocation(500, 58);
					Match("*/"); if (state.failed) return;

					DebugLocation(502, 21);
					if (state.backtracking == 0)
					{

						_channel = 2;   // Comments on channel 2 in case we want to find them

					}

				}

				state.type = _type;
				state.channel = _channel;
			}
			finally
			{
				TraceOut("COMMENT", 35);
				LeaveRule("COMMENT", 35);
				LeaveRule_COMMENT();
			}
		}
		// $ANTLR end "COMMENT"

		partial void EnterRule_CDO();
		partial void LeaveRule_CDO();

		// $ANTLR start "CDO"
		[GrammarRule("CDO")]
		private void mCDO()
		{
			EnterRule_CDO();
			EnterRule("CDO", 36);
			TraceIn("CDO", 36);
			try
			{
				int _type = CDO;
				int _channel = DefaultTokenChannel;
				// CSS3.g3:513:17: ( '<!--' )
				DebugEnterAlt(1);
				// CSS3.g3:513:19: '<!--'
				{
					DebugLocation(513, 19);
					Match("<!--"); if (state.failed) return;

					DebugLocation(515, 21);
					if (state.backtracking == 0)
					{

						_channel = 3;   // CDO on channel 3 in case we want it later

					}

				}

				state.type = _type;
				state.channel = _channel;
			}
			finally
			{
				TraceOut("CDO", 36);
				LeaveRule("CDO", 36);
				LeaveRule_CDO();
			}
		}
		// $ANTLR end "CDO"

		partial void EnterRule_CDC();
		partial void LeaveRule_CDC();

		// $ANTLR start "CDC"
		[GrammarRule("CDC")]
		private void mCDC()
		{
			EnterRule_CDC();
			EnterRule("CDC", 37);
			TraceIn("CDC", 37);
			try
			{
				int _type = CDC;
				int _channel = DefaultTokenChannel;
				// CSS3.g3:526:17: ( '-->' )
				DebugEnterAlt(1);
				// CSS3.g3:526:19: '-->'
				{
					DebugLocation(526, 19);
					Match("-->"); if (state.failed) return;

					DebugLocation(528, 21);
					if (state.backtracking == 0)
					{

						_channel = 4;   // CDC on channel 4 in case we want it later

					}

				}

				state.type = _type;
				state.channel = _channel;
			}
			finally
			{
				TraceOut("CDC", 37);
				LeaveRule("CDC", 37);
				LeaveRule_CDC();
			}
		}
		// $ANTLR end "CDC"

		partial void EnterRule_INCLUDES();
		partial void LeaveRule_INCLUDES();

		// $ANTLR start "INCLUDES"
		[GrammarRule("INCLUDES")]
		private void mINCLUDES()
		{
			EnterRule_INCLUDES();
			EnterRule("INCLUDES", 38);
			TraceIn("INCLUDES", 38);
			try
			{
				int _type = INCLUDES;
				int _channel = DefaultTokenChannel;
				// CSS3.g3:533:17: ( '~=' )
				DebugEnterAlt(1);
				// CSS3.g3:533:19: '~='
				{
					DebugLocation(533, 19);
					Match("~="); if (state.failed) return;


				}

				state.type = _type;
				state.channel = _channel;
			}
			finally
			{
				TraceOut("INCLUDES", 38);
				LeaveRule("INCLUDES", 38);
				LeaveRule_INCLUDES();
			}
		}
		// $ANTLR end "INCLUDES"

		partial void EnterRule_DASHMATCH();
		partial void LeaveRule_DASHMATCH();

		// $ANTLR start "DASHMATCH"
		[GrammarRule("DASHMATCH")]
		private void mDASHMATCH()
		{
			EnterRule_DASHMATCH();
			EnterRule("DASHMATCH", 39);
			TraceIn("DASHMATCH", 39);
			try
			{
				int _type = DASHMATCH;
				int _channel = DefaultTokenChannel;
				// CSS3.g3:534:17: ( '|=' )
				DebugEnterAlt(1);
				// CSS3.g3:534:19: '|='
				{
					DebugLocation(534, 19);
					Match("|="); if (state.failed) return;


				}

				state.type = _type;
				state.channel = _channel;
			}
			finally
			{
				TraceOut("DASHMATCH", 39);
				LeaveRule("DASHMATCH", 39);
				LeaveRule_DASHMATCH();
			}
		}
		// $ANTLR end "DASHMATCH"

		partial void EnterRule_GREATER();
		partial void LeaveRule_GREATER();

		// $ANTLR start "GREATER"
		[GrammarRule("GREATER")]
		private void mGREATER()
		{
			EnterRule_GREATER();
			EnterRule("GREATER", 40);
			TraceIn("GREATER", 40);
			try
			{
				int _type = GREATER;
				int _channel = DefaultTokenChannel;
				// CSS3.g3:536:17: ( '>' )
				DebugEnterAlt(1);
				// CSS3.g3:536:19: '>'
				{
					DebugLocation(536, 19);
					Match('>'); if (state.failed) return;

				}

				state.type = _type;
				state.channel = _channel;
			}
			finally
			{
				TraceOut("GREATER", 40);
				LeaveRule("GREATER", 40);
				LeaveRule_GREATER();
			}
		}
		// $ANTLR end "GREATER"

		partial void EnterRule_LBRACE();
		partial void LeaveRule_LBRACE();

		// $ANTLR start "LBRACE"
		[GrammarRule("LBRACE")]
		private void mLBRACE()
		{
			EnterRule_LBRACE();
			EnterRule("LBRACE", 41);
			TraceIn("LBRACE", 41);
			try
			{
				int _type = LBRACE;
				int _channel = DefaultTokenChannel;
				// CSS3.g3:537:17: ( '{' )
				DebugEnterAlt(1);
				// CSS3.g3:537:19: '{'
				{
					DebugLocation(537, 19);
					Match('{'); if (state.failed) return;

				}

				state.type = _type;
				state.channel = _channel;
			}
			finally
			{
				TraceOut("LBRACE", 41);
				LeaveRule("LBRACE", 41);
				LeaveRule_LBRACE();
			}
		}
		// $ANTLR end "LBRACE"

		partial void EnterRule_RBRACE();
		partial void LeaveRule_RBRACE();

		// $ANTLR start "RBRACE"
		[GrammarRule("RBRACE")]
		private void mRBRACE()
		{
			EnterRule_RBRACE();
			EnterRule("RBRACE", 42);
			TraceIn("RBRACE", 42);
			try
			{
				int _type = RBRACE;
				int _channel = DefaultTokenChannel;
				// CSS3.g3:538:17: ( '}' )
				DebugEnterAlt(1);
				// CSS3.g3:538:19: '}'
				{
					DebugLocation(538, 19);
					Match('}'); if (state.failed) return;

				}

				state.type = _type;
				state.channel = _channel;
			}
			finally
			{
				TraceOut("RBRACE", 42);
				LeaveRule("RBRACE", 42);
				LeaveRule_RBRACE();
			}
		}
		// $ANTLR end "RBRACE"

		partial void EnterRule_LBRACKET();
		partial void LeaveRule_LBRACKET();

		// $ANTLR start "LBRACKET"
		[GrammarRule("LBRACKET")]
		private void mLBRACKET()
		{
			EnterRule_LBRACKET();
			EnterRule("LBRACKET", 43);
			TraceIn("LBRACKET", 43);
			try
			{
				int _type = LBRACKET;
				int _channel = DefaultTokenChannel;
				// CSS3.g3:539:17: ( '[' )
				DebugEnterAlt(1);
				// CSS3.g3:539:19: '['
				{
					DebugLocation(539, 19);
					Match('['); if (state.failed) return;

				}

				state.type = _type;
				state.channel = _channel;
			}
			finally
			{
				TraceOut("LBRACKET", 43);
				LeaveRule("LBRACKET", 43);
				LeaveRule_LBRACKET();
			}
		}
		// $ANTLR end "LBRACKET"

		partial void EnterRule_RBRACKET();
		partial void LeaveRule_RBRACKET();

		// $ANTLR start "RBRACKET"
		[GrammarRule("RBRACKET")]
		private void mRBRACKET()
		{
			EnterRule_RBRACKET();
			EnterRule("RBRACKET", 44);
			TraceIn("RBRACKET", 44);
			try
			{
				int _type = RBRACKET;
				int _channel = DefaultTokenChannel;
				// CSS3.g3:540:17: ( ']' )
				DebugEnterAlt(1);
				// CSS3.g3:540:19: ']'
				{
					DebugLocation(540, 19);
					Match(']'); if (state.failed) return;

				}

				state.type = _type;
				state.channel = _channel;
			}
			finally
			{
				TraceOut("RBRACKET", 44);
				LeaveRule("RBRACKET", 44);
				LeaveRule_RBRACKET();
			}
		}
		// $ANTLR end "RBRACKET"

		partial void EnterRule_OPEQ();
		partial void LeaveRule_OPEQ();

		// $ANTLR start "OPEQ"
		[GrammarRule("OPEQ")]
		private void mOPEQ()
		{
			EnterRule_OPEQ();
			EnterRule("OPEQ", 45);
			TraceIn("OPEQ", 45);
			try
			{
				int _type = OPEQ;
				int _channel = DefaultTokenChannel;
				// CSS3.g3:541:17: ( '=' )
				DebugEnterAlt(1);
				// CSS3.g3:541:19: '='
				{
					DebugLocation(541, 19);
					Match('='); if (state.failed) return;

				}

				state.type = _type;
				state.channel = _channel;
			}
			finally
			{
				TraceOut("OPEQ", 45);
				LeaveRule("OPEQ", 45);
				LeaveRule_OPEQ();
			}
		}
		// $ANTLR end "OPEQ"

		partial void EnterRule_SEMI();
		partial void LeaveRule_SEMI();

		// $ANTLR start "SEMI"
		[GrammarRule("SEMI")]
		private void mSEMI()
		{
			EnterRule_SEMI();
			EnterRule("SEMI", 46);
			TraceIn("SEMI", 46);
			try
			{
				int _type = SEMI;
				int _channel = DefaultTokenChannel;
				// CSS3.g3:542:17: ( ';' )
				DebugEnterAlt(1);
				// CSS3.g3:542:19: ';'
				{
					DebugLocation(542, 19);
					Match(';'); if (state.failed) return;

				}

				state.type = _type;
				state.channel = _channel;
			}
			finally
			{
				TraceOut("SEMI", 46);
				LeaveRule("SEMI", 46);
				LeaveRule_SEMI();
			}
		}
		// $ANTLR end "SEMI"

		partial void EnterRule_COLON();
		partial void LeaveRule_COLON();

		// $ANTLR start "COLON"
		[GrammarRule("COLON")]
		private void mCOLON()
		{
			EnterRule_COLON();
			EnterRule("COLON", 47);
			TraceIn("COLON", 47);
			try
			{
				int _type = COLON;
				int _channel = DefaultTokenChannel;
				// CSS3.g3:543:17: ( ':' )
				DebugEnterAlt(1);
				// CSS3.g3:543:19: ':'
				{
					DebugLocation(543, 19);
					Match(':'); if (state.failed) return;

				}

				state.type = _type;
				state.channel = _channel;
			}
			finally
			{
				TraceOut("COLON", 47);
				LeaveRule("COLON", 47);
				LeaveRule_COLON();
			}
		}
		// $ANTLR end "COLON"

		partial void EnterRule_SOLIDUS();
		partial void LeaveRule_SOLIDUS();

		// $ANTLR start "SOLIDUS"
		[GrammarRule("SOLIDUS")]
		private void mSOLIDUS()
		{
			EnterRule_SOLIDUS();
			EnterRule("SOLIDUS", 48);
			TraceIn("SOLIDUS", 48);
			try
			{
				int _type = SOLIDUS;
				int _channel = DefaultTokenChannel;
				// CSS3.g3:544:17: ( '/' )
				DebugEnterAlt(1);
				// CSS3.g3:544:19: '/'
				{
					DebugLocation(544, 19);
					Match('/'); if (state.failed) return;

				}

				state.type = _type;
				state.channel = _channel;
			}
			finally
			{
				TraceOut("SOLIDUS", 48);
				LeaveRule("SOLIDUS", 48);
				LeaveRule_SOLIDUS();
			}
		}
		// $ANTLR end "SOLIDUS"

		partial void EnterRule_MINUS();
		partial void LeaveRule_MINUS();

		// $ANTLR start "MINUS"
		[GrammarRule("MINUS")]
		private void mMINUS()
		{
			EnterRule_MINUS();
			EnterRule("MINUS", 49);
			TraceIn("MINUS", 49);
			try
			{
				int _type = MINUS;
				int _channel = DefaultTokenChannel;
				// CSS3.g3:545:17: ( '-' )
				DebugEnterAlt(1);
				// CSS3.g3:545:19: '-'
				{
					DebugLocation(545, 19);
					Match('-'); if (state.failed) return;

				}

				state.type = _type;
				state.channel = _channel;
			}
			finally
			{
				TraceOut("MINUS", 49);
				LeaveRule("MINUS", 49);
				LeaveRule_MINUS();
			}
		}
		// $ANTLR end "MINUS"

		partial void EnterRule_PLUS();
		partial void LeaveRule_PLUS();

		// $ANTLR start "PLUS"
		[GrammarRule("PLUS")]
		private void mPLUS()
		{
			EnterRule_PLUS();
			EnterRule("PLUS", 50);
			TraceIn("PLUS", 50);
			try
			{
				int _type = PLUS;
				int _channel = DefaultTokenChannel;
				// CSS3.g3:546:17: ( '+' )
				DebugEnterAlt(1);
				// CSS3.g3:546:19: '+'
				{
					DebugLocation(546, 19);
					Match('+'); if (state.failed) return;

				}

				state.type = _type;
				state.channel = _channel;
			}
			finally
			{
				TraceOut("PLUS", 50);
				LeaveRule("PLUS", 50);
				LeaveRule_PLUS();
			}
		}
		// $ANTLR end "PLUS"

		partial void EnterRule_STAR();
		partial void LeaveRule_STAR();

		// $ANTLR start "STAR"
		[GrammarRule("STAR")]
		private void mSTAR()
		{
			EnterRule_STAR();
			EnterRule("STAR", 51);
			TraceIn("STAR", 51);
			try
			{
				int _type = STAR;
				int _channel = DefaultTokenChannel;
				// CSS3.g3:547:17: ( '*' )
				DebugEnterAlt(1);
				// CSS3.g3:547:19: '*'
				{
					DebugLocation(547, 19);
					Match('*'); if (state.failed) return;

				}

				state.type = _type;
				state.channel = _channel;
			}
			finally
			{
				TraceOut("STAR", 51);
				LeaveRule("STAR", 51);
				LeaveRule_STAR();
			}
		}
		// $ANTLR end "STAR"

		partial void EnterRule_LPAREN();
		partial void LeaveRule_LPAREN();

		// $ANTLR start "LPAREN"
		[GrammarRule("LPAREN")]
		private void mLPAREN()
		{
			EnterRule_LPAREN();
			EnterRule("LPAREN", 52);
			TraceIn("LPAREN", 52);
			try
			{
				int _type = LPAREN;
				int _channel = DefaultTokenChannel;
				// CSS3.g3:548:17: ( '(' )
				DebugEnterAlt(1);
				// CSS3.g3:548:19: '('
				{
					DebugLocation(548, 19);
					Match('('); if (state.failed) return;

				}

				state.type = _type;
				state.channel = _channel;
			}
			finally
			{
				TraceOut("LPAREN", 52);
				LeaveRule("LPAREN", 52);
				LeaveRule_LPAREN();
			}
		}
		// $ANTLR end "LPAREN"

		partial void EnterRule_RPAREN();
		partial void LeaveRule_RPAREN();

		// $ANTLR start "RPAREN"
		[GrammarRule("RPAREN")]
		private void mRPAREN()
		{
			EnterRule_RPAREN();
			EnterRule("RPAREN", 53);
			TraceIn("RPAREN", 53);
			try
			{
				int _type = RPAREN;
				int _channel = DefaultTokenChannel;
				// CSS3.g3:549:17: ( ')' )
				DebugEnterAlt(1);
				// CSS3.g3:549:19: ')'
				{
					DebugLocation(549, 19);
					Match(')'); if (state.failed) return;

				}

				state.type = _type;
				state.channel = _channel;
			}
			finally
			{
				TraceOut("RPAREN", 53);
				LeaveRule("RPAREN", 53);
				LeaveRule_RPAREN();
			}
		}
		// $ANTLR end "RPAREN"

		partial void EnterRule_COMMA();
		partial void LeaveRule_COMMA();

		// $ANTLR start "COMMA"
		[GrammarRule("COMMA")]
		private void mCOMMA()
		{
			EnterRule_COMMA();
			EnterRule("COMMA", 54);
			TraceIn("COMMA", 54);
			try
			{
				int _type = COMMA;
				int _channel = DefaultTokenChannel;
				// CSS3.g3:550:17: ( ',' )
				DebugEnterAlt(1);
				// CSS3.g3:550:19: ','
				{
					DebugLocation(550, 19);
					Match(','); if (state.failed) return;

				}

				state.type = _type;
				state.channel = _channel;
			}
			finally
			{
				TraceOut("COMMA", 54);
				LeaveRule("COMMA", 54);
				LeaveRule_COMMA();
			}
		}
		// $ANTLR end "COMMA"

		partial void EnterRule_DOT();
		partial void LeaveRule_DOT();

		// $ANTLR start "DOT"
		[GrammarRule("DOT")]
		private void mDOT()
		{
			EnterRule_DOT();
			EnterRule("DOT", 55);
			TraceIn("DOT", 55);
			try
			{
				int _type = DOT;
				int _channel = DefaultTokenChannel;
				// CSS3.g3:551:17: ( '.' )
				DebugEnterAlt(1);
				// CSS3.g3:551:19: '.'
				{
					DebugLocation(551, 19);
					Match('.'); if (state.failed) return;

				}

				state.type = _type;
				state.channel = _channel;
			}
			finally
			{
				TraceOut("DOT", 55);
				LeaveRule("DOT", 55);
				LeaveRule_DOT();
			}
		}
		// $ANTLR end "DOT"

		partial void EnterRule_INVALID();
		partial void LeaveRule_INVALID();

		// $ANTLR start "INVALID"
		[GrammarRule("INVALID")]
		private void mINVALID()
		{
			EnterRule_INVALID();
			EnterRule("INVALID", 56);
			TraceIn("INVALID", 56);
			try
			{
				// CSS3.g3:556:21: ()
				DebugEnterAlt(1);
				// CSS3.g3:556:22: 
				{
				}

			}
			finally
			{
				TraceOut("INVALID", 56);
				LeaveRule("INVALID", 56);
				LeaveRule_INVALID();
			}
		}
		// $ANTLR end "INVALID"

		partial void EnterRule_STRING();
		partial void LeaveRule_STRING();

		// $ANTLR start "STRING"
		[GrammarRule("STRING")]
		private void mSTRING()
		{
			EnterRule_STRING();
			EnterRule("STRING", 57);
			TraceIn("STRING", 57);
			try
			{
				int _type = STRING;
				int _channel = DefaultTokenChannel;
				// CSS3.g3:557:17: ( '\\'' (~ ( '\\n' | '\\r' | '\\f' | '\\'' ) )* ( '\\'' |) | '\"' (~ ( '\\n' | '\\r' | '\\f' | '\"' ) )* ( '\"' |) )
				int alt193=2;
				try { DebugEnterDecision(193, false);
					int LA193_0 = input.LA(1);

					if ((LA193_0=='\''))
					{
						alt193 = 1;
					}
					else if ((LA193_0=='\"'))
					{
						alt193 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae = new NoViableAltException("", 193, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				} finally { DebugExitDecision(193); }
				switch (alt193)
				{
					case 1:
					DebugEnterAlt(1);
					// CSS3.g3:557:19: '\\'' (~ ( '\\n' | '\\r' | '\\f' | '\\'' ) )* ( '\\'' |)
					{
						DebugLocation(557, 19);
						Match('\''); if (state.failed) return;
						DebugLocation(557, 24);
						// CSS3.g3:557:24: (~ ( '\\n' | '\\r' | '\\f' | '\\'' ) )*
						try { DebugEnterSubRule(189);
							while (true)
							{
								int alt189=2;
								try { DebugEnterDecision(189, false);
									int LA189_0 = input.LA(1);

									if (((LA189_0>='\u0000' && LA189_0<='\t')||LA189_0=='\u000B'||(LA189_0>='\u000E' && LA189_0<='&')||(LA189_0>='(' && LA189_0<='\uFFFF')))
									{
										alt189 = 1;
									}


								} finally { DebugExitDecision(189); }
								switch ( alt189 )
								{
									case 1:
									DebugEnterAlt(1);
									// CSS3.g3:
									{
										DebugLocation(557, 24);
										input.Consume();
										state.failed=false;

									}
									break;

									default:
									goto loop189;
								}
							}

							loop189:
								;

						} finally { DebugExitSubRule(189); }

						DebugLocation(558, 21);
						// CSS3.g3:558:21: ( '\\'' |)
						int alt190=2;
						try { DebugEnterSubRule(190);
							try { DebugEnterDecision(190, false);
								int LA190_0 = input.LA(1);

								if ((LA190_0=='\''))
								{
									alt190 = 1;
								}
								else
								{
									alt190 = 2;}
							} finally { DebugExitDecision(190); }
							switch (alt190)
							{
								case 1:
								DebugEnterAlt(1);
								// CSS3.g3:559:27: '\\''
								{
									DebugLocation(559, 27);
									Match('\''); if (state.failed) return;

								}
								break;
								case 2:
								DebugEnterAlt(2);
								// CSS3.g3:560:27: 
								{
									DebugLocation(560, 27);
									if (state.backtracking == 0)
									{
										_type = INVALID; 
									}

								}
								break;

							}
						} finally { DebugExitSubRule(190); }


					}
					break;
					case 2:
					DebugEnterAlt(2);
					// CSS3.g3:563:19: '\"' (~ ( '\\n' | '\\r' | '\\f' | '\"' ) )* ( '\"' |)
					{
						DebugLocation(563, 19);
						Match('\"'); if (state.failed) return;
						DebugLocation(563, 23);
						// CSS3.g3:563:23: (~ ( '\\n' | '\\r' | '\\f' | '\"' ) )*
						try { DebugEnterSubRule(191);
							while (true)
							{
								int alt191=2;
								try { DebugEnterDecision(191, false);
									int LA191_0 = input.LA(1);

									if (((LA191_0>='\u0000' && LA191_0<='\t')||LA191_0=='\u000B'||(LA191_0>='\u000E' && LA191_0<='!')||(LA191_0>='#' && LA191_0<='\uFFFF')))
									{
										alt191 = 1;
									}


								} finally { DebugExitDecision(191); }
								switch ( alt191 )
								{
									case 1:
									DebugEnterAlt(1);
									// CSS3.g3:
									{
										DebugLocation(563, 23);
										input.Consume();
										state.failed=false;

									}
									break;

									default:
									goto loop191;
								}
							}

							loop191:
								;

						} finally { DebugExitSubRule(191); }

						DebugLocation(564, 21);
						// CSS3.g3:564:21: ( '\"' |)
						int alt192=2;
						try { DebugEnterSubRule(192);
							try { DebugEnterDecision(192, false);
								int LA192_0 = input.LA(1);

								if ((LA192_0=='\"'))
								{
									alt192 = 1;
								}
								else
								{
									alt192 = 2;}
							} finally { DebugExitDecision(192); }
							switch (alt192)
							{
								case 1:
								DebugEnterAlt(1);
								// CSS3.g3:565:27: '\"'
								{
									DebugLocation(565, 27);
									Match('\"'); if (state.failed) return;

								}
								break;
								case 2:
								DebugEnterAlt(2);
								// CSS3.g3:566:27: 
								{
									DebugLocation(566, 27);
									if (state.backtracking == 0)
									{
										_type = INVALID; 
									}

								}
								break;

							}
						} finally { DebugExitSubRule(192); }


					}
					break;

				}
				state.type = _type;
				state.channel = _channel;
			}
			finally
			{
				TraceOut("STRING", 57);
				LeaveRule("STRING", 57);
				LeaveRule_STRING();
			}
		}
		// $ANTLR end "STRING"

		partial void EnterRule_IDENT();
		partial void LeaveRule_IDENT();

		// $ANTLR start "IDENT"
		[GrammarRule("IDENT")]
		private void mIDENT()
		{
			EnterRule_IDENT();
			EnterRule("IDENT", 58);
			TraceIn("IDENT", 58);
			try
			{
				int _type = IDENT;
				int _channel = DefaultTokenChannel;
				// CSS3.g3:573:17: ( ( '-' )? NMSTART ( NMCHAR )* )
				DebugEnterAlt(1);
				// CSS3.g3:573:19: ( '-' )? NMSTART ( NMCHAR )*
				{
					DebugLocation(573, 19);
					// CSS3.g3:573:19: ( '-' )?
					int alt194=2;
					try { DebugEnterSubRule(194);
						try { DebugEnterDecision(194, false);
							int LA194_0 = input.LA(1);

							if ((LA194_0=='-'))
							{
								alt194 = 1;
							}
						} finally { DebugExitDecision(194); }
						switch (alt194)
						{
							case 1:
							DebugEnterAlt(1);
							// CSS3.g3:573:19: '-'
							{
								DebugLocation(573, 19);
								Match('-'); if (state.failed) return;

							}
							break;

						}
					} finally { DebugExitSubRule(194); }

					DebugLocation(573, 24);
					mNMSTART(); if (state.failed) return;
					DebugLocation(573, 32);
					// CSS3.g3:573:32: ( NMCHAR )*
					try { DebugEnterSubRule(195);
						while (true)
						{
							int alt195=2;
							try { DebugEnterDecision(195, false);
								int LA195_0 = input.LA(1);

								if ((LA195_0=='-'||(LA195_0>='0' && LA195_0<='9')||(LA195_0>='A' && LA195_0<='Z')||LA195_0=='\\'||LA195_0=='_'||(LA195_0>='a' && LA195_0<='z')||(LA195_0>='\u0080' && LA195_0<='\uFFFF')))
								{
									alt195 = 1;
								}


							} finally { DebugExitDecision(195); }
							switch ( alt195 )
							{
								case 1:
								DebugEnterAlt(1);
								// CSS3.g3:573:32: NMCHAR
								{
									DebugLocation(573, 32);
									mNMCHAR(); if (state.failed) return;

								}
								break;

								default:
								goto loop195;
							}
						}

						loop195:
							;

					} finally { DebugExitSubRule(195); }


				}

				state.type = _type;
				state.channel = _channel;
			}
			finally
			{
				TraceOut("IDENT", 58);
				LeaveRule("IDENT", 58);
				LeaveRule_IDENT();
			}
		}
		// $ANTLR end "IDENT"

		partial void EnterRule_HASH();
		partial void LeaveRule_HASH();

		// $ANTLR start "HASH"
		[GrammarRule("HASH")]
		private void mHASH()
		{
			EnterRule_HASH();
			EnterRule("HASH", 59);
			TraceIn("HASH", 59);
			try
			{
				int _type = HASH;
				int _channel = DefaultTokenChannel;
				// CSS3.g3:578:17: ( '#' NAME )
				DebugEnterAlt(1);
				// CSS3.g3:578:19: '#' NAME
				{
					DebugLocation(578, 19);
					Match('#'); if (state.failed) return;
					DebugLocation(578, 23);
					mNAME(); if (state.failed) return;

				}

				state.type = _type;
				state.channel = _channel;
			}
			finally
			{
				TraceOut("HASH", 59);
				LeaveRule("HASH", 59);
				LeaveRule_HASH();
			}
		}
		// $ANTLR end "HASH"

		partial void EnterRule_IMPORT_SYM();
		partial void LeaveRule_IMPORT_SYM();

		// $ANTLR start "IMPORT_SYM"
		[GrammarRule("IMPORT_SYM")]
		private void mIMPORT_SYM()
		{
			EnterRule_IMPORT_SYM();
			EnterRule("IMPORT_SYM", 60);
			TraceIn("IMPORT_SYM", 60);
			try
			{
				int _type = IMPORT_SYM;
				int _channel = DefaultTokenChannel;
				// CSS3.g3:580:17: ( '@' I M P O R T )
				DebugEnterAlt(1);
				// CSS3.g3:580:19: '@' I M P O R T
				{
					DebugLocation(580, 19);
					Match('@'); if (state.failed) return;
					DebugLocation(580, 23);
					mI(); if (state.failed) return;
					DebugLocation(580, 25);
					mM(); if (state.failed) return;
					DebugLocation(580, 27);
					mP(); if (state.failed) return;
					DebugLocation(580, 29);
					mO(); if (state.failed) return;
					DebugLocation(580, 31);
					mR(); if (state.failed) return;
					DebugLocation(580, 33);
					mT(); if (state.failed) return;

				}

				state.type = _type;
				state.channel = _channel;
			}
			finally
			{
				TraceOut("IMPORT_SYM", 60);
				LeaveRule("IMPORT_SYM", 60);
				LeaveRule_IMPORT_SYM();
			}
		}
		// $ANTLR end "IMPORT_SYM"

		partial void EnterRule_PAGE_SYM();
		partial void LeaveRule_PAGE_SYM();

		// $ANTLR start "PAGE_SYM"
		[GrammarRule("PAGE_SYM")]
		private void mPAGE_SYM()
		{
			EnterRule_PAGE_SYM();
			EnterRule("PAGE_SYM", 61);
			TraceIn("PAGE_SYM", 61);
			try
			{
				int _type = PAGE_SYM;
				int _channel = DefaultTokenChannel;
				// CSS3.g3:581:17: ( '@' P A G E )
				DebugEnterAlt(1);
				// CSS3.g3:581:19: '@' P A G E
				{
					DebugLocation(581, 19);
					Match('@'); if (state.failed) return;
					DebugLocation(581, 23);
					mP(); if (state.failed) return;
					DebugLocation(581, 25);
					mA(); if (state.failed) return;
					DebugLocation(581, 27);
					mG(); if (state.failed) return;
					DebugLocation(581, 29);
					mE(); if (state.failed) return;

				}

				state.type = _type;
				state.channel = _channel;
			}
			finally
			{
				TraceOut("PAGE_SYM", 61);
				LeaveRule("PAGE_SYM", 61);
				LeaveRule_PAGE_SYM();
			}
		}
		// $ANTLR end "PAGE_SYM"

		partial void EnterRule_MEDIA_SYM();
		partial void LeaveRule_MEDIA_SYM();

		// $ANTLR start "MEDIA_SYM"
		[GrammarRule("MEDIA_SYM")]
		private void mMEDIA_SYM()
		{
			EnterRule_MEDIA_SYM();
			EnterRule("MEDIA_SYM", 62);
			TraceIn("MEDIA_SYM", 62);
			try
			{
				int _type = MEDIA_SYM;
				int _channel = DefaultTokenChannel;
				// CSS3.g3:582:17: ( '@' M E D I A )
				DebugEnterAlt(1);
				// CSS3.g3:582:19: '@' M E D I A
				{
					DebugLocation(582, 19);
					Match('@'); if (state.failed) return;
					DebugLocation(582, 23);
					mM(); if (state.failed) return;
					DebugLocation(582, 25);
					mE(); if (state.failed) return;
					DebugLocation(582, 27);
					mD(); if (state.failed) return;
					DebugLocation(582, 29);
					mI(); if (state.failed) return;
					DebugLocation(582, 31);
					mA(); if (state.failed) return;

				}

				state.type = _type;
				state.channel = _channel;
			}
			finally
			{
				TraceOut("MEDIA_SYM", 62);
				LeaveRule("MEDIA_SYM", 62);
				LeaveRule_MEDIA_SYM();
			}
		}
		// $ANTLR end "MEDIA_SYM"

		partial void EnterRule_CHARSET_SYM();
		partial void LeaveRule_CHARSET_SYM();

		// $ANTLR start "CHARSET_SYM"
		[GrammarRule("CHARSET_SYM")]
		private void mCHARSET_SYM()
		{
			EnterRule_CHARSET_SYM();
			EnterRule("CHARSET_SYM", 63);
			TraceIn("CHARSET_SYM", 63);
			try
			{
				int _type = CHARSET_SYM;
				int _channel = DefaultTokenChannel;
				// CSS3.g3:583:17: ( '@charset ' )
				DebugEnterAlt(1);
				// CSS3.g3:583:19: '@charset '
				{
					DebugLocation(583, 19);
					Match("@charset "); if (state.failed) return;


				}

				state.type = _type;
				state.channel = _channel;
			}
			finally
			{
				TraceOut("CHARSET_SYM", 63);
				LeaveRule("CHARSET_SYM", 63);
				LeaveRule_CHARSET_SYM();
			}
		}
		// $ANTLR end "CHARSET_SYM"

		partial void EnterRule_IMPORTANT_SYM();
		partial void LeaveRule_IMPORTANT_SYM();

		// $ANTLR start "IMPORTANT_SYM"
		[GrammarRule("IMPORTANT_SYM")]
		private void mIMPORTANT_SYM()
		{
			EnterRule_IMPORTANT_SYM();
			EnterRule("IMPORTANT_SYM", 64);
			TraceIn("IMPORTANT_SYM", 64);
			try
			{
				int _type = IMPORTANT_SYM;
				int _channel = DefaultTokenChannel;
				// CSS3.g3:585:17: ( '!' ( WS | COMMENT )* I M P O R T A N T )
				DebugEnterAlt(1);
				// CSS3.g3:585:19: '!' ( WS | COMMENT )* I M P O R T A N T
				{
					DebugLocation(585, 19);
					Match('!'); if (state.failed) return;
					DebugLocation(585, 23);
					// CSS3.g3:585:23: ( WS | COMMENT )*
					try { DebugEnterSubRule(196);
						while (true)
						{
							int alt196=3;
							try { DebugEnterDecision(196, false);
								int LA196_0 = input.LA(1);

								if ((LA196_0=='\t'||LA196_0==' '))
								{
									alt196 = 1;
								}
								else if ((LA196_0=='/'))
								{
									alt196 = 2;
								}


							} finally { DebugExitDecision(196); }
							switch ( alt196 )
							{
								case 1:
								DebugEnterAlt(1);
								// CSS3.g3:585:24: WS
								{
									DebugLocation(585, 24);
									mWS(); if (state.failed) return;

								}
								break;
								case 2:
								DebugEnterAlt(2);
								// CSS3.g3:585:27: COMMENT
								{
									DebugLocation(585, 27);
									mCOMMENT(); if (state.failed) return;

								}
								break;

								default:
								goto loop196;
							}
						}

						loop196:
							;

					} finally { DebugExitSubRule(196); }

					DebugLocation(585, 37);
					mI(); if (state.failed) return;
					DebugLocation(585, 39);
					mM(); if (state.failed) return;
					DebugLocation(585, 41);
					mP(); if (state.failed) return;
					DebugLocation(585, 43);
					mO(); if (state.failed) return;
					DebugLocation(585, 45);
					mR(); if (state.failed) return;
					DebugLocation(585, 47);
					mT(); if (state.failed) return;
					DebugLocation(585, 49);
					mA(); if (state.failed) return;
					DebugLocation(585, 51);
					mN(); if (state.failed) return;
					DebugLocation(585, 53);
					mT(); if (state.failed) return;

				}

				state.type = _type;
				state.channel = _channel;
			}
			finally
			{
				TraceOut("IMPORTANT_SYM", 64);
				LeaveRule("IMPORTANT_SYM", 64);
				LeaveRule_IMPORTANT_SYM();
			}
		}
		// $ANTLR end "IMPORTANT_SYM"

		partial void EnterRule_EMS();
		partial void LeaveRule_EMS();

		// $ANTLR start "EMS"
		[GrammarRule("EMS")]
		private void mEMS()
		{
			EnterRule_EMS();
			EnterRule("EMS", 65);
			TraceIn("EMS", 65);
			try
			{
				// CSS3.g3:597:25: ()
				DebugEnterAlt(1);
				// CSS3.g3:597:26: 
				{
				}

			}
			finally
			{
				TraceOut("EMS", 65);
				LeaveRule("EMS", 65);
				LeaveRule_EMS();
			}
		}
		// $ANTLR end "EMS"

		partial void EnterRule_EXS();
		partial void LeaveRule_EXS();

		// $ANTLR start "EXS"
		[GrammarRule("EXS")]
		private void mEXS()
		{
			EnterRule_EXS();
			EnterRule("EXS", 66);
			TraceIn("EXS", 66);
			try
			{
				// CSS3.g3:598:25: ()
				DebugEnterAlt(1);
				// CSS3.g3:598:26: 
				{
				}

			}
			finally
			{
				TraceOut("EXS", 66);
				LeaveRule("EXS", 66);
				LeaveRule_EXS();
			}
		}
		// $ANTLR end "EXS"

		partial void EnterRule_LENGTH();
		partial void LeaveRule_LENGTH();

		// $ANTLR start "LENGTH"
		[GrammarRule("LENGTH")]
		private void mLENGTH()
		{
			EnterRule_LENGTH();
			EnterRule("LENGTH", 67);
			TraceIn("LENGTH", 67);
			try
			{
				// CSS3.g3:599:25: ()
				DebugEnterAlt(1);
				// CSS3.g3:599:26: 
				{
				}

			}
			finally
			{
				TraceOut("LENGTH", 67);
				LeaveRule("LENGTH", 67);
				LeaveRule_LENGTH();
			}
		}
		// $ANTLR end "LENGTH"

		partial void EnterRule_ANGLE();
		partial void LeaveRule_ANGLE();

		// $ANTLR start "ANGLE"
		[GrammarRule("ANGLE")]
		private void mANGLE()
		{
			EnterRule_ANGLE();
			EnterRule("ANGLE", 68);
			TraceIn("ANGLE", 68);
			try
			{
				// CSS3.g3:600:25: ()
				DebugEnterAlt(1);
				// CSS3.g3:600:26: 
				{
				}

			}
			finally
			{
				TraceOut("ANGLE", 68);
				LeaveRule("ANGLE", 68);
				LeaveRule_ANGLE();
			}
		}
		// $ANTLR end "ANGLE"

		partial void EnterRule_TIME();
		partial void LeaveRule_TIME();

		// $ANTLR start "TIME"
		[GrammarRule("TIME")]
		private void mTIME()
		{
			EnterRule_TIME();
			EnterRule("TIME", 69);
			TraceIn("TIME", 69);
			try
			{
				// CSS3.g3:601:25: ()
				DebugEnterAlt(1);
				// CSS3.g3:601:26: 
				{
				}

			}
			finally
			{
				TraceOut("TIME", 69);
				LeaveRule("TIME", 69);
				LeaveRule_TIME();
			}
		}
		// $ANTLR end "TIME"

		partial void EnterRule_FREQ();
		partial void LeaveRule_FREQ();

		// $ANTLR start "FREQ"
		[GrammarRule("FREQ")]
		private void mFREQ()
		{
			EnterRule_FREQ();
			EnterRule("FREQ", 70);
			TraceIn("FREQ", 70);
			try
			{
				// CSS3.g3:602:25: ()
				DebugEnterAlt(1);
				// CSS3.g3:602:26: 
				{
				}

			}
			finally
			{
				TraceOut("FREQ", 70);
				LeaveRule("FREQ", 70);
				LeaveRule_FREQ();
			}
		}
		// $ANTLR end "FREQ"

		partial void EnterRule_DIMENSION();
		partial void LeaveRule_DIMENSION();

		// $ANTLR start "DIMENSION"
		[GrammarRule("DIMENSION")]
		private void mDIMENSION()
		{
			EnterRule_DIMENSION();
			EnterRule("DIMENSION", 71);
			TraceIn("DIMENSION", 71);
			try
			{
				// CSS3.g3:603:25: ()
				DebugEnterAlt(1);
				// CSS3.g3:603:26: 
				{
				}

			}
			finally
			{
				TraceOut("DIMENSION", 71);
				LeaveRule("DIMENSION", 71);
				LeaveRule_DIMENSION();
			}
		}
		// $ANTLR end "DIMENSION"

		partial void EnterRule_PERCENTAGE();
		partial void LeaveRule_PERCENTAGE();

		// $ANTLR start "PERCENTAGE"
		[GrammarRule("PERCENTAGE")]
		private void mPERCENTAGE()
		{
			EnterRule_PERCENTAGE();
			EnterRule("PERCENTAGE", 72);
			TraceIn("PERCENTAGE", 72);
			try
			{
				// CSS3.g3:604:25: ()
				DebugEnterAlt(1);
				// CSS3.g3:604:26: 
				{
				}

			}
			finally
			{
				TraceOut("PERCENTAGE", 72);
				LeaveRule("PERCENTAGE", 72);
				LeaveRule_PERCENTAGE();
			}
		}
		// $ANTLR end "PERCENTAGE"

		partial void EnterRule_NUMBER();
		partial void LeaveRule_NUMBER();

		// $ANTLR start "NUMBER"
		[GrammarRule("NUMBER")]
		private void mNUMBER()
		{
			EnterRule_NUMBER();
			EnterRule("NUMBER", 73);
			TraceIn("NUMBER", 73);
			try
			{
				int _type = NUMBER;
				int _channel = DefaultTokenChannel;
				// CSS3.g3:607:5: ( ( '0' .. '9' ( '.' ( '0' .. '9' )+ )? | '.' ( '0' .. '9' )+ ) ( ( E ( M | X ) )=> E ( M | X ) | ( P ( X | T | C ) )=> P ( X | T | C ) | ( C M )=> C M | ( M ( M | S ) )=> M ( M | S ) | ( I N )=> I N | ( D E G )=> D E G | ( R A D )=> R A D | ( S )=> S | ( ( K )? H Z )=> ( K )? H Z | IDENT | '%' |) )
				DebugEnterAlt(1);
				// CSS3.g3:607:9: ( '0' .. '9' ( '.' ( '0' .. '9' )+ )? | '.' ( '0' .. '9' )+ ) ( ( E ( M | X ) )=> E ( M | X ) | ( P ( X | T | C ) )=> P ( X | T | C ) | ( C M )=> C M | ( M ( M | S ) )=> M ( M | S ) | ( I N )=> I N | ( D E G )=> D E G | ( R A D )=> R A D | ( S )=> S | ( ( K )? H Z )=> ( K )? H Z | IDENT | '%' |)
				{
					DebugLocation(607, 9);
					// CSS3.g3:607:9: ( '0' .. '9' ( '.' ( '0' .. '9' )+ )? | '.' ( '0' .. '9' )+ )
					int alt200=2;
					try { DebugEnterSubRule(200);
						try { DebugEnterDecision(200, false);
							int LA200_0 = input.LA(1);

							if (((LA200_0>='0' && LA200_0<='9')))
							{
								alt200 = 1;
							}
							else if ((LA200_0=='.'))
							{
								alt200 = 2;
							}
							else
							{
								if (state.backtracking>0) {state.failed=true; return;}
								NoViableAltException nvae = new NoViableAltException("", 200, 0, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						} finally { DebugExitDecision(200); }
						switch (alt200)
						{
							case 1:
							DebugEnterAlt(1);
							// CSS3.g3:608:15: '0' .. '9' ( '.' ( '0' .. '9' )+ )?
							{
								DebugLocation(608, 15);
								MatchRange('0','9'); if (state.failed) return;
								DebugLocation(608, 24);
								// CSS3.g3:608:24: ( '.' ( '0' .. '9' )+ )?
								int alt198=2;
								try { DebugEnterSubRule(198);
									try { DebugEnterDecision(198, false);
										int LA198_0 = input.LA(1);

										if ((LA198_0=='.'))
										{
											alt198 = 1;
										}
									} finally { DebugExitDecision(198); }
									switch (alt198)
									{
										case 1:
										DebugEnterAlt(1);
										// CSS3.g3:608:25: '.' ( '0' .. '9' )+
										{
											DebugLocation(608, 25);
											Match('.'); if (state.failed) return;
											DebugLocation(608, 29);
											// CSS3.g3:608:29: ( '0' .. '9' )+
											int cnt197=0;
											try { DebugEnterSubRule(197);
												while (true)
												{
													int alt197=2;
													try { DebugEnterDecision(197, false);
														int LA197_0 = input.LA(1);

														if (((LA197_0>='0' && LA197_0<='9')))
														{
															alt197 = 1;
														}


													} finally { DebugExitDecision(197); }
													switch (alt197)
													{
														case 1:
														DebugEnterAlt(1);
														// CSS3.g3:
														{
															DebugLocation(608, 29);
															input.Consume();
															state.failed=false;

														}
														break;

														default:
														if (cnt197 >= 1)
															goto loop197;

														if (state.backtracking>0) {state.failed=true; return;}
														EarlyExitException eee197 = new EarlyExitException( 197, input );
														DebugRecognitionException(eee197);
														throw eee197;
													}
													cnt197++;
												}
												loop197:
													;

											} finally { DebugExitSubRule(197); }


										}
										break;

									}
								} finally { DebugExitSubRule(198); }


							}
							break;
							case 2:
							DebugEnterAlt(2);
							// CSS3.g3:609:15: '.' ( '0' .. '9' )+
							{
								DebugLocation(609, 15);
								Match('.'); if (state.failed) return;
								DebugLocation(609, 19);
								// CSS3.g3:609:19: ( '0' .. '9' )+
								int cnt199=0;
								try { DebugEnterSubRule(199);
									while (true)
									{
										int alt199=2;
										try { DebugEnterDecision(199, false);
											int LA199_0 = input.LA(1);

											if (((LA199_0>='0' && LA199_0<='9')))
											{
												alt199 = 1;
											}


										} finally { DebugExitDecision(199); }
										switch (alt199)
										{
											case 1:
											DebugEnterAlt(1);
											// CSS3.g3:
											{
												DebugLocation(609, 19);
												input.Consume();
												state.failed=false;

											}
											break;

											default:
											if (cnt199 >= 1)
												goto loop199;

											if (state.backtracking>0) {state.failed=true; return;}
											EarlyExitException eee199 = new EarlyExitException( 199, input );
											DebugRecognitionException(eee199);
											throw eee199;
										}
										cnt199++;
									}
									loop199:
										;

								} finally { DebugExitSubRule(199); }


							}
							break;

						}
					} finally { DebugExitSubRule(200); }

					DebugLocation(611, 9);
					// CSS3.g3:611:9: ( ( E ( M | X ) )=> E ( M | X ) | ( P ( X | T | C ) )=> P ( X | T | C ) | ( C M )=> C M | ( M ( M | S ) )=> M ( M | S ) | ( I N )=> I N | ( D E G )=> D E G | ( R A D )=> R A D | ( S )=> S | ( ( K )? H Z )=> ( K )? H Z | IDENT | '%' |)
					int alt205=12;
					try { DebugEnterSubRule(205);
						try { DebugEnterDecision(205, false);
							try
							{
								alt205 = dfa205.Predict(input);
							}
							catch (NoViableAltException nvae)
							{
								DebugRecognitionException(nvae);
								throw;
							}
						} finally { DebugExitDecision(205); }
						switch (alt205)
						{
							case 1:
							DebugEnterAlt(1);
							// CSS3.g3:612:15: ( E ( M | X ) )=> E ( M | X )
							{
								DebugLocation(613, 17);
								mE(); if (state.failed) return;
								DebugLocation(614, 17);
								// CSS3.g3:614:17: ( M | X )
								int alt201=2;
								try { DebugEnterSubRule(201);
									try { DebugEnterDecision(201, false);
										switch (input.LA(1))
										{
											case 'M':
											case 'm':
										{
											alt201 = 1;
										}
											break;
											case '\\':
										{
											switch (input.LA(2))
											{
												case '4':
												case '6':
												case 'M':
												case 'm':
											{
												alt201 = 1;
											}
												break;
												case '0':
											{
												switch (input.LA(3))
												{
													case '0':
												{
													switch (input.LA(4))
													{
														case '0':
													{
														switch (input.LA(5))
														{
															case '0':
														{
															int LA201_7 = input.LA(6);

															if ((LA201_7=='4'||LA201_7=='6'))
															{
																alt201 = 1;
															}
															else if ((LA201_7=='5'||LA201_7=='7'))
															{
																alt201 = 2;
															}
															else
															{
																if (state.backtracking>0) {state.failed=true; return;}
																NoViableAltException nvae = new NoViableAltException("", 201, 7, input);
																DebugRecognitionException(nvae);
																throw nvae;
															}
														}
															break;
															case '4':
															case '6':
														{
															alt201 = 1;
														}
															break;
															case '5':
															case '7':
														{
															alt201 = 2;
														}
															break;
															default:
														{
															if (state.backtracking>0) {state.failed=true; return;}
															NoViableAltException nvae = new NoViableAltException("", 201, 6, input);
															DebugRecognitionException(nvae);
															throw nvae;
														}
														}

													}
														break;
														case '4':
														case '6':
													{
														alt201 = 1;
													}
														break;
														case '5':
														case '7':
													{
														alt201 = 2;
													}
														break;
														default:
													{
														if (state.backtracking>0) {state.failed=true; return;}
														NoViableAltException nvae = new NoViableAltException("", 201, 5, input);
														DebugRecognitionException(nvae);
														throw nvae;
													}
													}

												}
													break;
													case '4':
													case '6':
												{
													alt201 = 1;
												}
													break;
													case '5':
													case '7':
												{
													alt201 = 2;
												}
													break;
													default:
												{
													if (state.backtracking>0) {state.failed=true; return;}
													NoViableAltException nvae = new NoViableAltException("", 201, 4, input);
													DebugRecognitionException(nvae);
													throw nvae;
												}
												}

											}
												break;
												case '5':
												case '7':
												case 'X':
												case 'x':
											{
												alt201 = 2;
											}
												break;
												default:
											{
												if (state.backtracking>0) {state.failed=true; return;}
												NoViableAltException nvae = new NoViableAltException("", 201, 2, input);
												DebugRecognitionException(nvae);
												throw nvae;
											}
											}

										}
											break;
											case 'X':
											case 'x':
										{
											alt201 = 2;
										}
											break;
											default:
										{
											if (state.backtracking>0) {state.failed=true; return;}
											NoViableAltException nvae = new NoViableAltException("", 201, 0, input);
											DebugRecognitionException(nvae);
											throw nvae;
										}
										}

									} finally { DebugExitDecision(201); }
									switch (alt201)
									{
										case 1:
										DebugEnterAlt(1);
										// CSS3.g3:615:23: M
										{
											DebugLocation(615, 23);
											mM(); if (state.failed) return;
											DebugLocation(615, 29);
											if (state.backtracking == 0)
											{
												_type = EMS;          
											}

										}
										break;
										case 2:
										DebugEnterAlt(2);
										// CSS3.g3:616:23: X
										{
											DebugLocation(616, 23);
											mX(); if (state.failed) return;
											DebugLocation(616, 29);
											if (state.backtracking == 0)
											{
												_type = EXS;          
											}

										}
										break;

									}
								} finally { DebugExitSubRule(201); }


							}
							break;
							case 2:
							DebugEnterAlt(2);
							// CSS3.g3:618:15: ( P ( X | T | C ) )=> P ( X | T | C )
							{
								DebugLocation(619, 17);
								mP(); if (state.failed) return;
								DebugLocation(620, 17);
								// CSS3.g3:620:17: ( X | T | C )
								int alt202=3;
								try { DebugEnterSubRule(202);
									try { DebugEnterDecision(202, false);
										try
										{
											alt202 = dfa202.Predict(input);
										}
										catch (NoViableAltException nvae)
										{
											DebugRecognitionException(nvae);
											throw;
										}
									} finally { DebugExitDecision(202); }
									switch (alt202)
									{
										case 1:
										DebugEnterAlt(1);
										// CSS3.g3:621:23: X
										{
											DebugLocation(621, 23);
											mX(); if (state.failed) return;

										}
										break;
										case 2:
										DebugEnterAlt(2);
										// CSS3.g3:622:23: T
										{
											DebugLocation(622, 23);
											mT(); if (state.failed) return;

										}
										break;
										case 3:
										DebugEnterAlt(3);
										// CSS3.g3:623:23: C
										{
											DebugLocation(623, 23);
											mC(); if (state.failed) return;

										}
										break;

									}
								} finally { DebugExitSubRule(202); }

								DebugLocation(625, 29);
								if (state.backtracking == 0)
								{
									_type = LENGTH;       
								}

							}
							break;
							case 3:
							DebugEnterAlt(3);
							// CSS3.g3:626:15: ( C M )=> C M
							{
								DebugLocation(627, 17);
								mC(); if (state.failed) return;
								DebugLocation(627, 19);
								mM(); if (state.failed) return;
								DebugLocation(627, 29);
								if (state.backtracking == 0)
								{
									_type = LENGTH;       
								}

							}
							break;
							case 4:
							DebugEnterAlt(4);
							// CSS3.g3:628:15: ( M ( M | S ) )=> M ( M | S )
							{
								DebugLocation(629, 17);
								mM(); if (state.failed) return;
								DebugLocation(630, 17);
								// CSS3.g3:630:17: ( M | S )
								int alt203=2;
								try { DebugEnterSubRule(203);
									try { DebugEnterDecision(203, false);
										switch (input.LA(1))
										{
											case 'M':
											case 'm':
										{
											alt203 = 1;
										}
											break;
											case '\\':
										{
											switch (input.LA(2))
											{
												case '4':
												case '6':
												case 'M':
												case 'm':
											{
												alt203 = 1;
											}
												break;
												case '0':
											{
												switch (input.LA(3))
												{
													case '0':
												{
													switch (input.LA(4))
													{
														case '0':
													{
														switch (input.LA(5))
														{
															case '0':
														{
															int LA203_7 = input.LA(6);

															if ((LA203_7=='4'||LA203_7=='6'))
															{
																alt203 = 1;
															}
															else if ((LA203_7=='5'||LA203_7=='7'))
															{
																alt203 = 2;
															}
															else
															{
																if (state.backtracking>0) {state.failed=true; return;}
																NoViableAltException nvae = new NoViableAltException("", 203, 7, input);
																DebugRecognitionException(nvae);
																throw nvae;
															}
														}
															break;
															case '4':
															case '6':
														{
															alt203 = 1;
														}
															break;
															case '5':
															case '7':
														{
															alt203 = 2;
														}
															break;
															default:
														{
															if (state.backtracking>0) {state.failed=true; return;}
															NoViableAltException nvae = new NoViableAltException("", 203, 6, input);
															DebugRecognitionException(nvae);
															throw nvae;
														}
														}

													}
														break;
														case '4':
														case '6':
													{
														alt203 = 1;
													}
														break;
														case '5':
														case '7':
													{
														alt203 = 2;
													}
														break;
														default:
													{
														if (state.backtracking>0) {state.failed=true; return;}
														NoViableAltException nvae = new NoViableAltException("", 203, 5, input);
														DebugRecognitionException(nvae);
														throw nvae;
													}
													}

												}
													break;
													case '4':
													case '6':
												{
													alt203 = 1;
												}
													break;
													case '5':
													case '7':
												{
													alt203 = 2;
												}
													break;
													default:
												{
													if (state.backtracking>0) {state.failed=true; return;}
													NoViableAltException nvae = new NoViableAltException("", 203, 4, input);
													DebugRecognitionException(nvae);
													throw nvae;
												}
												}

											}
												break;
												case '5':
												case '7':
												case 'S':
												case 's':
											{
												alt203 = 2;
											}
												break;
												default:
											{
												if (state.backtracking>0) {state.failed=true; return;}
												NoViableAltException nvae = new NoViableAltException("", 203, 2, input);
												DebugRecognitionException(nvae);
												throw nvae;
											}
											}

										}
											break;
											case 'S':
											case 's':
										{
											alt203 = 2;
										}
											break;
											default:
										{
											if (state.backtracking>0) {state.failed=true; return;}
											NoViableAltException nvae = new NoViableAltException("", 203, 0, input);
											DebugRecognitionException(nvae);
											throw nvae;
										}
										}

									} finally { DebugExitDecision(203); }
									switch (alt203)
									{
										case 1:
										DebugEnterAlt(1);
										// CSS3.g3:631:23: M
										{
											DebugLocation(631, 23);
											mM(); if (state.failed) return;
											DebugLocation(631, 29);
											if (state.backtracking == 0)
											{
												_type = LENGTH;       
											}

										}
										break;
										case 2:
										DebugEnterAlt(2);
										// CSS3.g3:633:23: S
										{
											DebugLocation(633, 23);
											mS(); if (state.failed) return;
											DebugLocation(633, 29);
											if (state.backtracking == 0)
											{
												_type = TIME;         
											}

										}
										break;

									}
								} finally { DebugExitSubRule(203); }


							}
							break;
							case 5:
							DebugEnterAlt(5);
							// CSS3.g3:635:15: ( I N )=> I N
							{
								DebugLocation(636, 17);
								mI(); if (state.failed) return;
								DebugLocation(636, 19);
								mN(); if (state.failed) return;
								DebugLocation(636, 29);
								if (state.backtracking == 0)
								{
									_type = LENGTH;       
								}

							}
							break;
							case 6:
							DebugEnterAlt(6);
							// CSS3.g3:638:15: ( D E G )=> D E G
							{
								DebugLocation(639, 17);
								mD(); if (state.failed) return;
								DebugLocation(639, 19);
								mE(); if (state.failed) return;
								DebugLocation(639, 21);
								mG(); if (state.failed) return;
								DebugLocation(639, 29);
								if (state.backtracking == 0)
								{
									_type = ANGLE;        
								}

							}
							break;
							case 7:
							DebugEnterAlt(7);
							// CSS3.g3:640:15: ( R A D )=> R A D
							{
								DebugLocation(641, 17);
								mR(); if (state.failed) return;
								DebugLocation(641, 19);
								mA(); if (state.failed) return;
								DebugLocation(641, 21);
								mD(); if (state.failed) return;
								DebugLocation(641, 29);
								if (state.backtracking == 0)
								{
									_type = ANGLE;        
								}

							}
							break;
							case 8:
							DebugEnterAlt(8);
							// CSS3.g3:643:15: ( S )=> S
							{
								DebugLocation(643, 20);
								mS(); if (state.failed) return;
								DebugLocation(643, 29);
								if (state.backtracking == 0)
								{
									_type = TIME;         
								}

							}
							break;
							case 9:
							DebugEnterAlt(9);
							// CSS3.g3:645:15: ( ( K )? H Z )=> ( K )? H Z
							{
								DebugLocation(646, 17);
								// CSS3.g3:646:17: ( K )?
								int alt204=2;
								try { DebugEnterSubRule(204);
									try { DebugEnterDecision(204, false);
										int LA204_0 = input.LA(1);

										if ((LA204_0=='K'||LA204_0=='k'))
										{
											alt204 = 1;
										}
										else if ((LA204_0=='\\'))
										{
											switch (input.LA(2))
											{
												case 'K':
												case 'k':
											{
												alt204 = 1;
											}
												break;
												case '0':
											{
												int LA204_4 = input.LA(3);

												if ((LA204_4=='0'))
												{
													int LA204_6 = input.LA(4);

													if ((LA204_6=='0'))
													{
														int LA204_7 = input.LA(5);

														if ((LA204_7=='0'))
														{
															int LA204_8 = input.LA(6);

															if ((LA204_8=='4'||LA204_8=='6'))
															{
																int LA204_5 = input.LA(7);

																if ((LA204_5=='B'||LA204_5=='b'))
																{
																	alt204 = 1;
																}
															}
														}
														else if ((LA204_7=='4'||LA204_7=='6'))
														{
															int LA204_5 = input.LA(6);

															if ((LA204_5=='B'||LA204_5=='b'))
															{
																alt204 = 1;
															}
														}
													}
													else if ((LA204_6=='4'||LA204_6=='6'))
													{
														int LA204_5 = input.LA(5);

														if ((LA204_5=='B'||LA204_5=='b'))
														{
															alt204 = 1;
														}
													}
												}
												else if ((LA204_4=='4'||LA204_4=='6'))
												{
													int LA204_5 = input.LA(4);

													if ((LA204_5=='B'||LA204_5=='b'))
													{
														alt204 = 1;
													}
												}
											}
												break;
												case '4':
												case '6':
											{
												int LA204_5 = input.LA(3);

												if ((LA204_5=='B'||LA204_5=='b'))
												{
													alt204 = 1;
												}
											}
												break;
											}

										}
									} finally { DebugExitDecision(204); }
									switch (alt204)
									{
										case 1:
										DebugEnterAlt(1);
										// CSS3.g3:646:17: K
										{
											DebugLocation(646, 17);
											mK(); if (state.failed) return;

										}
										break;

									}
								} finally { DebugExitSubRule(204); }

								DebugLocation(646, 20);
								mH(); if (state.failed) return;
								DebugLocation(646, 25);
								mZ(); if (state.failed) return;
								DebugLocation(646, 29);
								if (state.backtracking == 0)
								{
									_type = FREQ;         
								}

							}
							break;
							case 10:
							DebugEnterAlt(10);
							// CSS3.g3:648:15: IDENT
							{
								DebugLocation(648, 15);
								mIDENT(); if (state.failed) return;
								DebugLocation(648, 29);
								if (state.backtracking == 0)
								{
									_type = DIMENSION;    
								}

							}
							break;
							case 11:
							DebugEnterAlt(11);
							// CSS3.g3:650:15: '%'
							{
								DebugLocation(650, 15);
								Match('%'); if (state.failed) return;
								DebugLocation(650, 29);
								if (state.backtracking == 0)
								{
									_type = PERCENTAGE;   
								}

							}
							break;
							case 12:
							DebugEnterAlt(12);
							// CSS3.g3:653:9: 
							{
							}
							break;

						}
					} finally { DebugExitSubRule(205); }


				}

				state.type = _type;
				state.channel = _channel;
			}
			finally
			{
				TraceOut("NUMBER", 73);
				LeaveRule("NUMBER", 73);
				LeaveRule_NUMBER();
			}
		}
		// $ANTLR end "NUMBER"

		partial void EnterRule_URI();
		partial void LeaveRule_URI();

		// $ANTLR start "URI"
		[GrammarRule("URI")]
		private void mURI()
		{
			EnterRule_URI();
			EnterRule("URI", 74);
			TraceIn("URI", 74);
			try
			{
				int _type = URI;
				int _channel = DefaultTokenChannel;
				// CSS3.g3:659:5: ( U R L '(' ( ( WS )=> WS )? ( URL | STRING ) ( WS )? ')' )
				DebugEnterAlt(1);
				// CSS3.g3:659:9: U R L '(' ( ( WS )=> WS )? ( URL | STRING ) ( WS )? ')'
				{
					DebugLocation(659, 9);
					mU(); if (state.failed) return;
					DebugLocation(659, 11);
					mR(); if (state.failed) return;
					DebugLocation(659, 13);
					mL(); if (state.failed) return;
					DebugLocation(660, 9);
					Match('('); if (state.failed) return;
					DebugLocation(661, 13);
					// CSS3.g3:661:13: ( ( WS )=> WS )?
					int alt206=2;
					try { DebugEnterSubRule(206);
						try { DebugEnterDecision(206, false);
							int LA206_0 = input.LA(1);

							if ((LA206_0=='\t'||LA206_0==' '))
							{
								int LA206_1 = input.LA(2);

								if ((EvaluatePredicate(synpred10_CSS3_fragment)))
								{
									alt206 = 1;
								}
							}
						} finally { DebugExitDecision(206); }
						switch (alt206)
						{
							case 1:
							DebugEnterAlt(1);
							// CSS3.g3:661:14: ( WS )=> WS
							{
								DebugLocation(661, 20);
								mWS(); if (state.failed) return;

							}
							break;

						}
					} finally { DebugExitSubRule(206); }

					DebugLocation(661, 25);
					// CSS3.g3:661:25: ( URL | STRING )
					int alt207=2;
					try { DebugEnterSubRule(207);
						try { DebugEnterDecision(207, false);
							int LA207_0 = input.LA(1);

							if ((LA207_0=='\t'||(LA207_0>=' ' && LA207_0<='!')||(LA207_0>='#' && LA207_0<='&')||(LA207_0>=')' && LA207_0<='*')||LA207_0=='-'||(LA207_0>='[' && LA207_0<='\\')||LA207_0=='~'||(LA207_0>='\u0080' && LA207_0<='\uFFFF')))
							{
								alt207 = 1;
							}
							else if ((LA207_0=='\"'||LA207_0=='\''))
							{
								alt207 = 2;
							}
							else
							{
								if (state.backtracking>0) {state.failed=true; return;}
								NoViableAltException nvae = new NoViableAltException("", 207, 0, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						} finally { DebugExitDecision(207); }
						switch (alt207)
						{
							case 1:
							DebugEnterAlt(1);
							// CSS3.g3:661:26: URL
							{
								DebugLocation(661, 26);
								mURL(); if (state.failed) return;

							}
							break;
							case 2:
							DebugEnterAlt(2);
							// CSS3.g3:661:30: STRING
							{
								DebugLocation(661, 30);
								mSTRING(); if (state.failed) return;

							}
							break;

						}
					} finally { DebugExitSubRule(207); }

					DebugLocation(661, 38);
					// CSS3.g3:661:38: ( WS )?
					int alt208=2;
					try { DebugEnterSubRule(208);
						try { DebugEnterDecision(208, false);
							int LA208_0 = input.LA(1);

							if ((LA208_0=='\t'||LA208_0==' '))
							{
								alt208 = 1;
							}
						} finally { DebugExitDecision(208); }
						switch (alt208)
						{
							case 1:
							DebugEnterAlt(1);
							// CSS3.g3:661:38: WS
							{
								DebugLocation(661, 38);
								mWS(); if (state.failed) return;

							}
							break;

						}
					} finally { DebugExitSubRule(208); }

					DebugLocation(662, 9);
					Match(')'); if (state.failed) return;

				}

				state.type = _type;
				state.channel = _channel;
			}
			finally
			{
				TraceOut("URI", 74);
				LeaveRule("URI", 74);
				LeaveRule_URI();
			}
		}
		// $ANTLR end "URI"

		partial void EnterRule_WS();
		partial void LeaveRule_WS();

		// $ANTLR start "WS"
		[GrammarRule("WS")]
		private void mWS()
		{
			EnterRule_WS();
			EnterRule("WS", 75);
			TraceIn("WS", 75);
			try
			{
				int _type = WS;
				int _channel = DefaultTokenChannel;
				// CSS3.g3:670:9: ( ( ' ' | '\\t' )+ )
				DebugEnterAlt(1);
				// CSS3.g3:670:11: ( ' ' | '\\t' )+
				{
					DebugLocation(670, 11);
					// CSS3.g3:670:11: ( ' ' | '\\t' )+
					int cnt209=0;
					try { DebugEnterSubRule(209);
						while (true)
						{
							int alt209=2;
							try { DebugEnterDecision(209, false);
								int LA209_0 = input.LA(1);

								if ((LA209_0=='\t'||LA209_0==' '))
								{
									alt209 = 1;
								}


							} finally { DebugExitDecision(209); }
							switch (alt209)
							{
								case 1:
								DebugEnterAlt(1);
								// CSS3.g3:
								{
									DebugLocation(670, 11);
									input.Consume();
									state.failed=false;

								}
								break;

								default:
								if (cnt209 >= 1)
									goto loop209;

								if (state.backtracking>0) {state.failed=true; return;}
								EarlyExitException eee209 = new EarlyExitException( 209, input );
								DebugRecognitionException(eee209);
								throw eee209;
							}
							cnt209++;
						}
						loop209:
							;

					} finally { DebugExitSubRule(209); }

					DebugLocation(670, 33);
					if (state.backtracking == 0)
					{
						_channel = HIDDEN;    
					}

				}

				state.type = _type;
				state.channel = _channel;
			}
			finally
			{
				TraceOut("WS", 75);
				LeaveRule("WS", 75);
				LeaveRule_WS();
			}
		}
		// $ANTLR end "WS"

		partial void EnterRule_NL();
		partial void LeaveRule_NL();

		// $ANTLR start "NL"
		[GrammarRule("NL")]
		private void mNL()
		{
			EnterRule_NL();
			EnterRule("NL", 76);
			TraceIn("NL", 76);
			try
			{
				int _type = NL;
				int _channel = DefaultTokenChannel;
				// CSS3.g3:671:9: ( ( '\\r' ( '\\n' )? | '\\n' ) )
				DebugEnterAlt(1);
				// CSS3.g3:671:11: ( '\\r' ( '\\n' )? | '\\n' )
				{
					DebugLocation(671, 11);
					// CSS3.g3:671:11: ( '\\r' ( '\\n' )? | '\\n' )
					int alt211=2;
					try { DebugEnterSubRule(211);
						try { DebugEnterDecision(211, false);
							int LA211_0 = input.LA(1);

							if ((LA211_0=='\r'))
							{
								alt211 = 1;
							}
							else if ((LA211_0=='\n'))
							{
								alt211 = 2;
							}
							else
							{
								if (state.backtracking>0) {state.failed=true; return;}
								NoViableAltException nvae = new NoViableAltException("", 211, 0, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						} finally { DebugExitDecision(211); }
						switch (alt211)
						{
							case 1:
							DebugEnterAlt(1);
							// CSS3.g3:671:12: '\\r' ( '\\n' )?
							{
								DebugLocation(671, 12);
								Match('\r'); if (state.failed) return;
								DebugLocation(671, 17);
								// CSS3.g3:671:17: ( '\\n' )?
								int alt210=2;
								try { DebugEnterSubRule(210);
									try { DebugEnterDecision(210, false);
										int LA210_0 = input.LA(1);

										if ((LA210_0=='\n'))
										{
											alt210 = 1;
										}
									} finally { DebugExitDecision(210); }
									switch (alt210)
									{
										case 1:
										DebugEnterAlt(1);
										// CSS3.g3:671:17: '\\n'
										{
											DebugLocation(671, 17);
											Match('\n'); if (state.failed) return;

										}
										break;

									}
								} finally { DebugExitSubRule(210); }


							}
							break;
							case 2:
							DebugEnterAlt(2);
							// CSS3.g3:671:25: '\\n'
							{
								DebugLocation(671, 25);
								Match('\n'); if (state.failed) return;

							}
							break;

						}
					} finally { DebugExitSubRule(211); }

					DebugLocation(671, 33);
					if (state.backtracking == 0)
					{
						_channel = HIDDEN;    
					}

				}

				state.type = _type;
				state.channel = _channel;
			}
			finally
			{
				TraceOut("NL", 76);
				LeaveRule("NL", 76);
				LeaveRule_NL();
			}
		}
		// $ANTLR end "NL"

		partial void EnterRule_BOM();
		partial void LeaveRule_BOM();

		// $ANTLR start "BOM"
		[GrammarRule("BOM")]
		private void mBOM()
		{
			EnterRule_BOM();
			EnterRule("BOM", 77);
			TraceIn("BOM", 77);
			try
			{
				// CSS3.g3:673:18: ( '\\u65279' )
				DebugEnterAlt(1);
				// CSS3.g3:673:20: '\\u65279'
				{
					DebugLocation(673, 20);
					Match("\u65279"); if (state.failed) return;

					DebugLocation(673, 29);
					if (state.backtracking == 0)
					{
						skip(); 
					}

				}

			}
			finally
			{
				TraceOut("BOM", 77);
				LeaveRule("BOM", 77);
				LeaveRule_BOM();
			}
		}
		// $ANTLR end "BOM"

		public override void mTokens()
		{
			// CSS3.g3:1:8: ( COMMENT | CDO | CDC | INCLUDES | DASHMATCH | GREATER | LBRACE | RBRACE | LBRACKET | RBRACKET | OPEQ | SEMI | COLON | SOLIDUS | MINUS | PLUS | STAR | LPAREN | RPAREN | COMMA | DOT | STRING | IDENT | HASH | IMPORT_SYM | PAGE_SYM | MEDIA_SYM | CHARSET_SYM | IMPORTANT_SYM | NUMBER | URI | WS | NL )
			int alt212=33;
			try { DebugEnterDecision(212, false);
				try
				{
					alt212 = dfa212.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
			} finally { DebugExitDecision(212); }
			switch (alt212)
			{
				case 1:
				DebugEnterAlt(1);
				// CSS3.g3:1:10: COMMENT
				{
					DebugLocation(1, 10);
					mCOMMENT(); if (state.failed) return;

				}
				break;
				case 2:
				DebugEnterAlt(2);
				// CSS3.g3:1:18: CDO
				{
					DebugLocation(1, 18);
					mCDO(); if (state.failed) return;

				}
				break;
				case 3:
				DebugEnterAlt(3);
				// CSS3.g3:1:22: CDC
				{
					DebugLocation(1, 22);
					mCDC(); if (state.failed) return;

				}
				break;
				case 4:
				DebugEnterAlt(4);
				// CSS3.g3:1:26: INCLUDES
				{
					DebugLocation(1, 26);
					mINCLUDES(); if (state.failed) return;

				}
				break;
				case 5:
				DebugEnterAlt(5);
				// CSS3.g3:1:35: DASHMATCH
				{
					DebugLocation(1, 35);
					mDASHMATCH(); if (state.failed) return;

				}
				break;
				case 6:
				DebugEnterAlt(6);
				// CSS3.g3:1:45: GREATER
				{
					DebugLocation(1, 45);
					mGREATER(); if (state.failed) return;

				}
				break;
				case 7:
				DebugEnterAlt(7);
				// CSS3.g3:1:53: LBRACE
				{
					DebugLocation(1, 53);
					mLBRACE(); if (state.failed) return;

				}
				break;
				case 8:
				DebugEnterAlt(8);
				// CSS3.g3:1:60: RBRACE
				{
					DebugLocation(1, 60);
					mRBRACE(); if (state.failed) return;

				}
				break;
				case 9:
				DebugEnterAlt(9);
				// CSS3.g3:1:67: LBRACKET
				{
					DebugLocation(1, 67);
					mLBRACKET(); if (state.failed) return;

				}
				break;
				case 10:
				DebugEnterAlt(10);
				// CSS3.g3:1:76: RBRACKET
				{
					DebugLocation(1, 76);
					mRBRACKET(); if (state.failed) return;

				}
				break;
				case 11:
				DebugEnterAlt(11);
				// CSS3.g3:1:85: OPEQ
				{
					DebugLocation(1, 85);
					mOPEQ(); if (state.failed) return;

				}
				break;
				case 12:
				DebugEnterAlt(12);
				// CSS3.g3:1:90: SEMI
				{
					DebugLocation(1, 90);
					mSEMI(); if (state.failed) return;

				}
				break;
				case 13:
				DebugEnterAlt(13);
				// CSS3.g3:1:95: COLON
				{
					DebugLocation(1, 95);
					mCOLON(); if (state.failed) return;

				}
				break;
				case 14:
				DebugEnterAlt(14);
				// CSS3.g3:1:101: SOLIDUS
				{
					DebugLocation(1, 101);
					mSOLIDUS(); if (state.failed) return;

				}
				break;
				case 15:
				DebugEnterAlt(15);
				// CSS3.g3:1:109: MINUS
				{
					DebugLocation(1, 109);
					mMINUS(); if (state.failed) return;

				}
				break;
				case 16:
				DebugEnterAlt(16);
				// CSS3.g3:1:115: PLUS
				{
					DebugLocation(1, 115);
					mPLUS(); if (state.failed) return;

				}
				break;
				case 17:
				DebugEnterAlt(17);
				// CSS3.g3:1:120: STAR
				{
					DebugLocation(1, 120);
					mSTAR(); if (state.failed) return;

				}
				break;
				case 18:
				DebugEnterAlt(18);
				// CSS3.g3:1:125: LPAREN
				{
					DebugLocation(1, 125);
					mLPAREN(); if (state.failed) return;

				}
				break;
				case 19:
				DebugEnterAlt(19);
				// CSS3.g3:1:132: RPAREN
				{
					DebugLocation(1, 132);
					mRPAREN(); if (state.failed) return;

				}
				break;
				case 20:
				DebugEnterAlt(20);
				// CSS3.g3:1:139: COMMA
				{
					DebugLocation(1, 139);
					mCOMMA(); if (state.failed) return;

				}
				break;
				case 21:
				DebugEnterAlt(21);
				// CSS3.g3:1:145: DOT
				{
					DebugLocation(1, 145);
					mDOT(); if (state.failed) return;

				}
				break;
				case 22:
				DebugEnterAlt(22);
				// CSS3.g3:1:149: STRING
				{
					DebugLocation(1, 149);
					mSTRING(); if (state.failed) return;

				}
				break;
				case 23:
				DebugEnterAlt(23);
				// CSS3.g3:1:156: IDENT
				{
					DebugLocation(1, 156);
					mIDENT(); if (state.failed) return;

				}
				break;
				case 24:
				DebugEnterAlt(24);
				// CSS3.g3:1:162: HASH
				{
					DebugLocation(1, 162);
					mHASH(); if (state.failed) return;

				}
				break;
				case 25:
				DebugEnterAlt(25);
				// CSS3.g3:1:167: IMPORT_SYM
				{
					DebugLocation(1, 167);
					mIMPORT_SYM(); if (state.failed) return;

				}
				break;
				case 26:
				DebugEnterAlt(26);
				// CSS3.g3:1:178: PAGE_SYM
				{
					DebugLocation(1, 178);
					mPAGE_SYM(); if (state.failed) return;

				}
				break;
				case 27:
				DebugEnterAlt(27);
				// CSS3.g3:1:187: MEDIA_SYM
				{
					DebugLocation(1, 187);
					mMEDIA_SYM(); if (state.failed) return;

				}
				break;
				case 28:
				DebugEnterAlt(28);
				// CSS3.g3:1:197: CHARSET_SYM
				{
					DebugLocation(1, 197);
					mCHARSET_SYM(); if (state.failed) return;

				}
				break;
				case 29:
				DebugEnterAlt(29);
				// CSS3.g3:1:209: IMPORTANT_SYM
				{
					DebugLocation(1, 209);
					mIMPORTANT_SYM(); if (state.failed) return;

				}
				break;
				case 30:
				DebugEnterAlt(30);
				// CSS3.g3:1:223: NUMBER
				{
					DebugLocation(1, 223);
					mNUMBER(); if (state.failed) return;

				}
				break;
				case 31:
				DebugEnterAlt(31);
				// CSS3.g3:1:230: URI
				{
					DebugLocation(1, 230);
					mURI(); if (state.failed) return;

				}
				break;
				case 32:
				DebugEnterAlt(32);
				// CSS3.g3:1:234: WS
				{
					DebugLocation(1, 234);
					mWS(); if (state.failed) return;

				}
				break;
				case 33:
				DebugEnterAlt(33);
				// CSS3.g3:1:237: NL
				{
					DebugLocation(1, 237);
					mNL(); if (state.failed) return;

				}
				break;

			}

		}

		partial void EnterRule_synpred1_CSS3_fragment();
		partial void LeaveRule_synpred1_CSS3_fragment();

		// $ANTLR start synpred1_CSS3
		public void synpred1_CSS3_fragment()
		{
			EnterRule_synpred1_CSS3_fragment();
			EnterRule("synpred1_CSS3_fragment", 79);
			TraceIn("synpred1_CSS3_fragment", 79);
			try
			{
				// CSS3.g3:612:15: ( E ( M | X ) )
				DebugEnterAlt(1);
				// CSS3.g3:612:16: E ( M | X )
				{
					DebugLocation(612, 16);
					mE(); if (state.failed) return;
					DebugLocation(612, 18);
					// CSS3.g3:612:18: ( M | X )
					int alt213=2;
					try { DebugEnterSubRule(213);
						try { DebugEnterDecision(213, false);
							switch (input.LA(1))
							{
								case 'M':
								case 'm':
							{
								alt213 = 1;
							}
								break;
								case '\\':
							{
								switch (input.LA(2))
								{
									case '4':
									case '6':
									case 'M':
									case 'm':
								{
									alt213 = 1;
								}
									break;
									case '0':
								{
									switch (input.LA(3))
									{
										case '0':
									{
										switch (input.LA(4))
										{
											case '0':
										{
											switch (input.LA(5))
											{
												case '0':
											{
												int LA213_7 = input.LA(6);

												if ((LA213_7=='4'||LA213_7=='6'))
												{
													alt213 = 1;
												}
												else if ((LA213_7=='5'||LA213_7=='7'))
												{
													alt213 = 2;
												}
												else
												{
													if (state.backtracking>0) {state.failed=true; return;}
													NoViableAltException nvae = new NoViableAltException("", 213, 7, input);
													DebugRecognitionException(nvae);
													throw nvae;
												}
											}
												break;
												case '4':
												case '6':
											{
												alt213 = 1;
											}
												break;
												case '5':
												case '7':
											{
												alt213 = 2;
											}
												break;
												default:
											{
												if (state.backtracking>0) {state.failed=true; return;}
												NoViableAltException nvae = new NoViableAltException("", 213, 6, input);
												DebugRecognitionException(nvae);
												throw nvae;
											}
											}

										}
											break;
											case '4':
											case '6':
										{
											alt213 = 1;
										}
											break;
											case '5':
											case '7':
										{
											alt213 = 2;
										}
											break;
											default:
										{
											if (state.backtracking>0) {state.failed=true; return;}
											NoViableAltException nvae = new NoViableAltException("", 213, 5, input);
											DebugRecognitionException(nvae);
											throw nvae;
										}
										}

									}
										break;
										case '4':
										case '6':
									{
										alt213 = 1;
									}
										break;
										case '5':
										case '7':
									{
										alt213 = 2;
									}
										break;
										default:
									{
										if (state.backtracking>0) {state.failed=true; return;}
										NoViableAltException nvae = new NoViableAltException("", 213, 4, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
									}

								}
									break;
									case '5':
									case '7':
									case 'X':
									case 'x':
								{
									alt213 = 2;
								}
									break;
									default:
								{
									if (state.backtracking>0) {state.failed=true; return;}
									NoViableAltException nvae = new NoViableAltException("", 213, 2, input);
									DebugRecognitionException(nvae);
									throw nvae;
								}
								}

							}
								break;
								case 'X':
								case 'x':
							{
								alt213 = 2;
							}
								break;
								default:
							{
								if (state.backtracking>0) {state.failed=true; return;}
								NoViableAltException nvae = new NoViableAltException("", 213, 0, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}

						} finally { DebugExitDecision(213); }
						switch (alt213)
						{
							case 1:
							DebugEnterAlt(1);
							// CSS3.g3:612:19: M
							{
								DebugLocation(612, 19);
								mM(); if (state.failed) return;

							}
							break;
							case 2:
							DebugEnterAlt(2);
							// CSS3.g3:612:21: X
							{
								DebugLocation(612, 21);
								mX(); if (state.failed) return;

							}
							break;

						}
					} finally { DebugExitSubRule(213); }


				}

			}
			finally
			{
				TraceOut("synpred1_CSS3_fragment", 79);
				LeaveRule("synpred1_CSS3_fragment", 79);
				LeaveRule_synpred1_CSS3_fragment();
			}
		}
		// $ANTLR end synpred1_CSS3

		partial void EnterRule_synpred2_CSS3_fragment();
		partial void LeaveRule_synpred2_CSS3_fragment();

		// $ANTLR start synpred2_CSS3
		public void synpred2_CSS3_fragment()
		{
			EnterRule_synpred2_CSS3_fragment();
			EnterRule("synpred2_CSS3_fragment", 80);
			TraceIn("synpred2_CSS3_fragment", 80);
			try
			{
				// CSS3.g3:618:15: ( P ( X | T | C ) )
				DebugEnterAlt(1);
				// CSS3.g3:618:16: P ( X | T | C )
				{
					DebugLocation(618, 16);
					mP(); if (state.failed) return;
					DebugLocation(618, 17);
					// CSS3.g3:618:17: ( X | T | C )
					int alt214=3;
					try { DebugEnterSubRule(214);
						try { DebugEnterDecision(214, false);
							try
							{
								alt214 = dfa214.Predict(input);
							}
							catch (NoViableAltException nvae)
							{
								DebugRecognitionException(nvae);
								throw;
							}
						} finally { DebugExitDecision(214); }
						switch (alt214)
						{
							case 1:
							DebugEnterAlt(1);
							// CSS3.g3:618:18: X
							{
								DebugLocation(618, 18);
								mX(); if (state.failed) return;

							}
							break;
							case 2:
							DebugEnterAlt(2);
							// CSS3.g3:618:20: T
							{
								DebugLocation(618, 20);
								mT(); if (state.failed) return;

							}
							break;
							case 3:
							DebugEnterAlt(3);
							// CSS3.g3:618:22: C
							{
								DebugLocation(618, 22);
								mC(); if (state.failed) return;

							}
							break;

						}
					} finally { DebugExitSubRule(214); }


				}

			}
			finally
			{
				TraceOut("synpred2_CSS3_fragment", 80);
				LeaveRule("synpred2_CSS3_fragment", 80);
				LeaveRule_synpred2_CSS3_fragment();
			}
		}
		// $ANTLR end synpred2_CSS3

		partial void EnterRule_synpred3_CSS3_fragment();
		partial void LeaveRule_synpred3_CSS3_fragment();

		// $ANTLR start synpred3_CSS3
		public void synpred3_CSS3_fragment()
		{
			EnterRule_synpred3_CSS3_fragment();
			EnterRule("synpred3_CSS3_fragment", 81);
			TraceIn("synpred3_CSS3_fragment", 81);
			try
			{
				// CSS3.g3:626:15: ( C M )
				DebugEnterAlt(1);
				// CSS3.g3:626:16: C M
				{
					DebugLocation(626, 16);
					mC(); if (state.failed) return;
					DebugLocation(626, 18);
					mM(); if (state.failed) return;

				}

			}
			finally
			{
				TraceOut("synpred3_CSS3_fragment", 81);
				LeaveRule("synpred3_CSS3_fragment", 81);
				LeaveRule_synpred3_CSS3_fragment();
			}
		}
		// $ANTLR end synpred3_CSS3

		partial void EnterRule_synpred4_CSS3_fragment();
		partial void LeaveRule_synpred4_CSS3_fragment();

		// $ANTLR start synpred4_CSS3
		public void synpred4_CSS3_fragment()
		{
			EnterRule_synpred4_CSS3_fragment();
			EnterRule("synpred4_CSS3_fragment", 82);
			TraceIn("synpred4_CSS3_fragment", 82);
			try
			{
				// CSS3.g3:628:15: ( M ( M | S ) )
				DebugEnterAlt(1);
				// CSS3.g3:628:16: M ( M | S )
				{
					DebugLocation(628, 16);
					mM(); if (state.failed) return;
					DebugLocation(628, 18);
					// CSS3.g3:628:18: ( M | S )
					int alt215=2;
					try { DebugEnterSubRule(215);
						try { DebugEnterDecision(215, false);
							switch (input.LA(1))
							{
								case 'M':
								case 'm':
							{
								alt215 = 1;
							}
								break;
								case '\\':
							{
								switch (input.LA(2))
								{
									case '4':
									case '6':
									case 'M':
									case 'm':
								{
									alt215 = 1;
								}
									break;
									case '0':
								{
									switch (input.LA(3))
									{
										case '0':
									{
										switch (input.LA(4))
										{
											case '0':
										{
											switch (input.LA(5))
											{
												case '0':
											{
												int LA215_7 = input.LA(6);

												if ((LA215_7=='4'||LA215_7=='6'))
												{
													alt215 = 1;
												}
												else if ((LA215_7=='5'||LA215_7=='7'))
												{
													alt215 = 2;
												}
												else
												{
													if (state.backtracking>0) {state.failed=true; return;}
													NoViableAltException nvae = new NoViableAltException("", 215, 7, input);
													DebugRecognitionException(nvae);
													throw nvae;
												}
											}
												break;
												case '4':
												case '6':
											{
												alt215 = 1;
											}
												break;
												case '5':
												case '7':
											{
												alt215 = 2;
											}
												break;
												default:
											{
												if (state.backtracking>0) {state.failed=true; return;}
												NoViableAltException nvae = new NoViableAltException("", 215, 6, input);
												DebugRecognitionException(nvae);
												throw nvae;
											}
											}

										}
											break;
											case '4':
											case '6':
										{
											alt215 = 1;
										}
											break;
											case '5':
											case '7':
										{
											alt215 = 2;
										}
											break;
											default:
										{
											if (state.backtracking>0) {state.failed=true; return;}
											NoViableAltException nvae = new NoViableAltException("", 215, 5, input);
											DebugRecognitionException(nvae);
											throw nvae;
										}
										}

									}
										break;
										case '4':
										case '6':
									{
										alt215 = 1;
									}
										break;
										case '5':
										case '7':
									{
										alt215 = 2;
									}
										break;
										default:
									{
										if (state.backtracking>0) {state.failed=true; return;}
										NoViableAltException nvae = new NoViableAltException("", 215, 4, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
									}

								}
									break;
									case '5':
									case '7':
									case 'S':
									case 's':
								{
									alt215 = 2;
								}
									break;
									default:
								{
									if (state.backtracking>0) {state.failed=true; return;}
									NoViableAltException nvae = new NoViableAltException("", 215, 2, input);
									DebugRecognitionException(nvae);
									throw nvae;
								}
								}

							}
								break;
								case 'S':
								case 's':
							{
								alt215 = 2;
							}
								break;
								default:
							{
								if (state.backtracking>0) {state.failed=true; return;}
								NoViableAltException nvae = new NoViableAltException("", 215, 0, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}

						} finally { DebugExitDecision(215); }
						switch (alt215)
						{
							case 1:
							DebugEnterAlt(1);
							// CSS3.g3:628:19: M
							{
								DebugLocation(628, 19);
								mM(); if (state.failed) return;

							}
							break;
							case 2:
							DebugEnterAlt(2);
							// CSS3.g3:628:21: S
							{
								DebugLocation(628, 21);
								mS(); if (state.failed) return;

							}
							break;

						}
					} finally { DebugExitSubRule(215); }


				}

			}
			finally
			{
				TraceOut("synpred4_CSS3_fragment", 82);
				LeaveRule("synpred4_CSS3_fragment", 82);
				LeaveRule_synpred4_CSS3_fragment();
			}
		}
		// $ANTLR end synpred4_CSS3

		partial void EnterRule_synpred5_CSS3_fragment();
		partial void LeaveRule_synpred5_CSS3_fragment();

		// $ANTLR start synpred5_CSS3
		public void synpred5_CSS3_fragment()
		{
			EnterRule_synpred5_CSS3_fragment();
			EnterRule("synpred5_CSS3_fragment", 83);
			TraceIn("synpred5_CSS3_fragment", 83);
			try
			{
				// CSS3.g3:635:15: ( I N )
				DebugEnterAlt(1);
				// CSS3.g3:635:16: I N
				{
					DebugLocation(635, 16);
					mI(); if (state.failed) return;
					DebugLocation(635, 18);
					mN(); if (state.failed) return;

				}

			}
			finally
			{
				TraceOut("synpred5_CSS3_fragment", 83);
				LeaveRule("synpred5_CSS3_fragment", 83);
				LeaveRule_synpred5_CSS3_fragment();
			}
		}
		// $ANTLR end synpred5_CSS3

		partial void EnterRule_synpred6_CSS3_fragment();
		partial void LeaveRule_synpred6_CSS3_fragment();

		// $ANTLR start synpred6_CSS3
		public void synpred6_CSS3_fragment()
		{
			EnterRule_synpred6_CSS3_fragment();
			EnterRule("synpred6_CSS3_fragment", 84);
			TraceIn("synpred6_CSS3_fragment", 84);
			try
			{
				// CSS3.g3:638:15: ( D E G )
				DebugEnterAlt(1);
				// CSS3.g3:638:16: D E G
				{
					DebugLocation(638, 16);
					mD(); if (state.failed) return;
					DebugLocation(638, 18);
					mE(); if (state.failed) return;
					DebugLocation(638, 20);
					mG(); if (state.failed) return;

				}

			}
			finally
			{
				TraceOut("synpred6_CSS3_fragment", 84);
				LeaveRule("synpred6_CSS3_fragment", 84);
				LeaveRule_synpred6_CSS3_fragment();
			}
		}
		// $ANTLR end synpred6_CSS3

		partial void EnterRule_synpred7_CSS3_fragment();
		partial void LeaveRule_synpred7_CSS3_fragment();

		// $ANTLR start synpred7_CSS3
		public void synpred7_CSS3_fragment()
		{
			EnterRule_synpred7_CSS3_fragment();
			EnterRule("synpred7_CSS3_fragment", 85);
			TraceIn("synpred7_CSS3_fragment", 85);
			try
			{
				// CSS3.g3:640:15: ( R A D )
				DebugEnterAlt(1);
				// CSS3.g3:640:16: R A D
				{
					DebugLocation(640, 16);
					mR(); if (state.failed) return;
					DebugLocation(640, 18);
					mA(); if (state.failed) return;
					DebugLocation(640, 20);
					mD(); if (state.failed) return;

				}

			}
			finally
			{
				TraceOut("synpred7_CSS3_fragment", 85);
				LeaveRule("synpred7_CSS3_fragment", 85);
				LeaveRule_synpred7_CSS3_fragment();
			}
		}
		// $ANTLR end synpred7_CSS3

		partial void EnterRule_synpred8_CSS3_fragment();
		partial void LeaveRule_synpred8_CSS3_fragment();

		// $ANTLR start synpred8_CSS3
		public void synpred8_CSS3_fragment()
		{
			EnterRule_synpred8_CSS3_fragment();
			EnterRule("synpred8_CSS3_fragment", 86);
			TraceIn("synpred8_CSS3_fragment", 86);
			try
			{
				// CSS3.g3:643:15: ( S )
				DebugEnterAlt(1);
				// CSS3.g3:643:16: S
				{
					DebugLocation(643, 16);
					mS(); if (state.failed) return;

				}

			}
			finally
			{
				TraceOut("synpred8_CSS3_fragment", 86);
				LeaveRule("synpred8_CSS3_fragment", 86);
				LeaveRule_synpred8_CSS3_fragment();
			}
		}
		// $ANTLR end synpred8_CSS3

		partial void EnterRule_synpred9_CSS3_fragment();
		partial void LeaveRule_synpred9_CSS3_fragment();

		// $ANTLR start synpred9_CSS3
		public void synpred9_CSS3_fragment()
		{
			EnterRule_synpred9_CSS3_fragment();
			EnterRule("synpred9_CSS3_fragment", 87);
			TraceIn("synpred9_CSS3_fragment", 87);
			try
			{
				// CSS3.g3:645:15: ( ( K )? H Z )
				DebugEnterAlt(1);
				// CSS3.g3:645:16: ( K )? H Z
				{
					DebugLocation(645, 16);
					// CSS3.g3:645:16: ( K )?
					int alt216=2;
					try { DebugEnterSubRule(216);
						try { DebugEnterDecision(216, false);
							int LA216_0 = input.LA(1);

							if ((LA216_0=='K'||LA216_0=='k'))
							{
								alt216 = 1;
							}
							else if ((LA216_0=='\\'))
							{
								switch (input.LA(2))
								{
									case 'K':
									case 'k':
								{
									alt216 = 1;
								}
									break;
									case '0':
								{
									int LA216_4 = input.LA(3);

									if ((LA216_4=='0'))
									{
										int LA216_6 = input.LA(4);

										if ((LA216_6=='0'))
										{
											int LA216_7 = input.LA(5);

											if ((LA216_7=='0'))
											{
												int LA216_8 = input.LA(6);

												if ((LA216_8=='4'||LA216_8=='6'))
												{
													int LA216_5 = input.LA(7);

													if ((LA216_5=='B'||LA216_5=='b'))
													{
														alt216 = 1;
													}
												}
											}
											else if ((LA216_7=='4'||LA216_7=='6'))
											{
												int LA216_5 = input.LA(6);

												if ((LA216_5=='B'||LA216_5=='b'))
												{
													alt216 = 1;
												}
											}
										}
										else if ((LA216_6=='4'||LA216_6=='6'))
										{
											int LA216_5 = input.LA(5);

											if ((LA216_5=='B'||LA216_5=='b'))
											{
												alt216 = 1;
											}
										}
									}
									else if ((LA216_4=='4'||LA216_4=='6'))
									{
										int LA216_5 = input.LA(4);

										if ((LA216_5=='B'||LA216_5=='b'))
										{
											alt216 = 1;
										}
									}
								}
									break;
									case '4':
									case '6':
								{
									int LA216_5 = input.LA(3);

									if ((LA216_5=='B'||LA216_5=='b'))
									{
										alt216 = 1;
									}
								}
									break;
								}

							}
						} finally { DebugExitDecision(216); }
						switch (alt216)
						{
							case 1:
							DebugEnterAlt(1);
							// CSS3.g3:645:16: K
							{
								DebugLocation(645, 16);
								mK(); if (state.failed) return;

							}
							break;

						}
					} finally { DebugExitSubRule(216); }

					DebugLocation(645, 19);
					mH(); if (state.failed) return;
					DebugLocation(645, 21);
					mZ(); if (state.failed) return;

				}

			}
			finally
			{
				TraceOut("synpred9_CSS3_fragment", 87);
				LeaveRule("synpred9_CSS3_fragment", 87);
				LeaveRule_synpred9_CSS3_fragment();
			}
		}
		// $ANTLR end synpred9_CSS3

		partial void EnterRule_synpred10_CSS3_fragment();
		partial void LeaveRule_synpred10_CSS3_fragment();

		// $ANTLR start synpred10_CSS3
		public void synpred10_CSS3_fragment()
		{
			EnterRule_synpred10_CSS3_fragment();
			EnterRule("synpred10_CSS3_fragment", 88);
			TraceIn("synpred10_CSS3_fragment", 88);
			try
			{
				// CSS3.g3:661:14: ( WS )
				DebugEnterAlt(1);
				// CSS3.g3:661:15: WS
				{
					DebugLocation(661, 15);
					mWS(); if (state.failed) return;

				}

			}
			finally
			{
				TraceOut("synpred10_CSS3_fragment", 88);
				LeaveRule("synpred10_CSS3_fragment", 88);
				LeaveRule_synpred10_CSS3_fragment();
			}
		}
		// $ANTLR end synpred10_CSS3

		#region Synpreds
		private bool EvaluatePredicate(System.Action fragment)
		{
			bool success = false;
			state.backtracking++;
			try { DebugBeginBacktrack(state.backtracking);
				int start = input.Mark();
				try
				{
					fragment();
				}
				catch ( RecognitionException re )
				{
					System.Console.Error.WriteLine("impossible: "+re);
				}
				success = !state.failed;
				input.Rewind(start);
			} finally { DebugEndBacktrack(state.backtracking, success); }
			state.backtracking--;
			state.failed=false;
			return success;
		}
		#endregion Synpreds


		#region DFA
		DFA11 dfa11;
		DFA205 dfa205;
		DFA202 dfa202;
		DFA212 dfa212;
		DFA214 dfa214;

		protected override void InitDFAs()
		{
			base.InitDFAs();
			dfa11 = new DFA11(this);
			dfa205 = new DFA205(this, SpecialStateTransition205);
			dfa202 = new DFA202(this);
			dfa212 = new DFA212(this, SpecialStateTransition212);
			dfa214 = new DFA214(this);
		}

		private class DFA11 : DFA
		{
			private const string DFA11_eotS =
				"\x1\x1\xC\xFFFF";
			private const string DFA11_eofS =
				"\xD\xFFFF";
			private const string DFA11_minS =
				"\x1\x21\xC\xFFFF";
			private const string DFA11_maxS =
				"\x1\xFFFF\xC\xFFFF";
			private const string DFA11_acceptS =
				"\x1\xFFFF\x1\xC\x1\x1\x1\x2\x1\x3\x1\x4\x1\x5\x1\x6\x1\x7\x1\x8\x1\x9"+
					"\x1\xA\x1\xB";
			private const string DFA11_specialS =
				"\xD\xFFFF}>";
			private static readonly string[] DFA11_transitionS =
			{
				"\x1\x3\x1\xFFFF\x1\x4\x1\x5\x1\x6\x1\x7\x3\xFFFF\x1\x8\x2\xFFFF\x1\x9"+
				"\x2D\xFFFF\x1\x2\x1\xC\x21\xFFFF\x1\xA\x1\xFFFF\xFF80\xB",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

			private static readonly short[] DFA11_eot = DFA.UnpackEncodedString(DFA11_eotS);
			private static readonly short[] DFA11_eof = DFA.UnpackEncodedString(DFA11_eofS);
			private static readonly char[] DFA11_min = DFA.UnpackEncodedStringToUnsignedChars(DFA11_minS);
			private static readonly char[] DFA11_max = DFA.UnpackEncodedStringToUnsignedChars(DFA11_maxS);
			private static readonly short[] DFA11_accept = DFA.UnpackEncodedString(DFA11_acceptS);
			private static readonly short[] DFA11_special = DFA.UnpackEncodedString(DFA11_specialS);
			private static readonly short[][] DFA11_transition;

			static DFA11()
			{
				int numStates = DFA11_transitionS.Length;
				DFA11_transition = new short[numStates][];
				for ( int i=0; i < numStates; i++ )
				{
					DFA11_transition[i] = DFA.UnpackEncodedString(DFA11_transitionS[i]);
				}
			}

			public DFA11( BaseRecognizer recognizer )
			{
				this.recognizer = recognizer;
				this.decisionNumber = 11;
				this.eot = DFA11_eot;
				this.eof = DFA11_eof;
				this.min = DFA11_min;
				this.max = DFA11_max;
				this.accept = DFA11_accept;
				this.special = DFA11_special;
				this.transition = DFA11_transition;
			}

			public override string Description { get { return "()* loopback of 302:27: ( '[' | '!' | '#' | '$' | '%' | '&' | '*' | '-' | '~' | NONASCII | ESCAPE )*"; } }

			public override void Error(NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
			}
		}

		private class DFA205 : DFA
		{
			private const string DFA205_eotS =
				"\x1\x18\x1\xC\x1\xFFFF\x6\xC\x1\xFFFF\x2\xC\x1\xFFFF\x7\xC\x1\xFFFF\x2"+
					"\xC\x8\xFFFF\xB\xC\x2\xFFFF\x4\xC\x17\xFFFF\x1\xC\x1\xFFFF\x1\xC\x1\xFFFF"+
					"\x1\xC\x1\xFFFF\x1\xC\x2\xFFFF\x1\xC\x1\xFFFF\x1\xC\x7\xFFFF\x2\xC\x1"+
					"\xFFFF\x1\xC\x7\xFFFF\xC\xC\x5\xFFFF\x2\xC\x4\xFFFF\x2\xC\x1\xFFFF\x2"+
					"\xC\x7\xFFFF\x2\xC\x1\xFFFF\x1\xC\x2\xFFFF\x2\xC\x3\xFFFF\x2\xC\x1\xFFFF"+
					"\x1\xC\x2\xFFFF\x2\xC\x4\xFFFF\x2\xC\x4\xFFFF\x6\xC\x2\xFFFF\x5\xC\x3"+
					"\xFFFF\x11\xC\x1\xFFFF\x5\xC\x2\xFFFF\x4\xC\x3\xFFFF\x9\xC\x3\xFFFF\x2"+
					"\xC\x2\xFFFF\x3\xC\x3\xFFFF\x2\xC\x4\xFFFF\xF\xC\x2\xFFFF\x3\xC\x3\xFFFF"+
					"\x3\xC\x2\xFFFF\xE\xC\x1\xFFFF\x2\xC\x2\xFFFF\x6\xC\x1\xFFFF\x1\xC\x2"+
					"\xFFFF\xD\xC\x3\xFFFF\x2\xC\x2\xFFFF\x3\xC\x3\xFFFF\x2\xC\x2\xFFFF\x2"+
					"\xC\x1\xFFFF\x5\xC\x1\xFFFF\x3\xC\x2\xFFFF\x5\xC\x2\xFFFF\x3\xC\x3\xFFFF"+
					"\x3\xC\x2\xFFFF\xD\xC\x1\xFFFF\x2\xC\x2\xFFFF\x2\xC\x2\xFFFF\x3\xC\x1"+
					"\xFFFF\xD\xC\x3\xFFFF\x2\xC\x2\xFFFF\x3\xC\x3\xFFFF\x2\xC\x2\xFFFF\x2"+
					"\xC\x1\xFFFF\x5\xC\x1\xFFFF\x3\xC\x2\xFFFF\x5\xC\x2\xFFFF\x2\xC\x3\xFFFF"+
					"\x3\xC\x2\xFFFF\xB\xC\x1\xFFFF\x2\xC\x2\xFFFF\x2\xC\x2\xFFFF\x3\xC\x1"+
					"\xFFFF\xC\xC\x3\xFFFF\x1\xC\x2\xFFFF\x2\xC\x3\xFFFF\x1\xC\x2\xFFFF\x2"+
					"\xC\x1\xFFFF\x4\xC\x1\xFFFF\x2\xC\x2\xFFFF\x3\xC\x5\xFFFF\x2\xC\x2\xFFFF"+
					"\x2\xC\x1\xFFFF\x6\xC\xA\xFFFF\x1\xC\x1\xFFFF\x2\xC\x1\xFFFF\x1\xC\x2"+
					"\xFFFF\x1\xC\x5\xFFFF\x1\xC\x2\xFFFF";
			private const string DFA205_eofS =
				"\x22D\xFFFF";
			private const string DFA205_minS =
				"\x1\x25\x1\x9\x1\x0\x6\x9\x1\x0\x2\x9\x1\xFFFF\x7\x9\x1\x0\x2\x9\x3\xFFFF"+
					"\x5\x0\x1\x43\x1\x30\x1\x33\x1\x43\x1\x4D\x1\x30\x1\x4D\x2\x4E\x2\x41"+
					"\x2\x0\x2\x48\x2\x5A\x1\xFFFF\x7\x0\x1\xFFFF\x3\x0\x1\xFFFF\x5\x0\x1"+
					"\xFFFF\x3\x0\x1\xFFFF\x1\x9\x1\x0\x1\x9\x1\xFFFF\x1\x9\x1\x0\x1\x9\x2"+
					"\xFFFF\x1\x9\x1\x0\x1\x9\x1\xFFFF\x6\x0\x1\x30\x1\x44\x1\x0\x1\x38\x7"+
					"\x0\x1\x30\x1\x33\x1\x30\x3\x4D\x1\x4E\x1\x45\x1\x48\x1\x5A\x1\x4D\x1"+
					"\x48\x5\x0\x1\x43\x1\x41\x4\x0\x2\x9\x1\x0\x2\x9\x7\x0\x1\x30\x1\x34"+
					"\x1\x0\x1\x33\x2\x0\x1\x30\x1\x44\x3\x0\x1\x30\x1\x44\x1\x0\x1\x33\x2"+
					"\x0\x1\x30\x1\x45\x1\xFFFF\x3\x0\x1\x30\x1\x35\x1\xFFFF\x3\x0\x1\x30"+
					"\x1\x31\x2\x5A\x1\x30\x1\x38\x2\x0\x1\x30\x1\x41\x1\x30\x1\x44\x1\x38"+
					"\x3\x0\x1\x30\x1\x34\x1\x33\x1\x30\x1\x33\x1\x30\x3\x4D\x1\x4E\x1\x45"+
					"\x1\x48\x1\x5A\x1\x4D\x1\x48\x1\x43\x1\x41\x1\x0\x2\x9\x1\x30\x1\x44"+
					"\x1\x33\x2\x0\x2\x9\x1\x30\x1\x45\x3\x0\x1\x30\x1\x31\x1\x30\x1\x38\x1"+
					"\x30\x1\x41\x1\x30\x1\x34\x1\x33\x3\x0\x1\x30\x1\x44\x2\x0\x1\x30\x1"+
					"\x44\x1\x33\x3\x0\x1\x30\x1\x45\x4\x0\x1\x30\x1\x37\x1\x30\x1\x35\x1"+
					"\x47\x1\x30\x1\x34\x1\x30\x1\x31\x1\x44\x1\x30\x1\x38\x1\x5A\x1\x30\x1"+
					"\x41\x2\x0\x1\x30\x1\x44\x1\x38\x3\x0\x1\x30\x1\x34\x1\x33\x2\x0\x1\x34"+
					"\x1\x33\x1\x30\x3\x4D\x1\x4E\x1\x45\x1\x48\x1\x5A\x1\x4D\x1\x48\x1\x43"+
					"\x1\x41\x1\x0\x2\x9\x2\x0\x3\x9\x1\x30\x1\x44\x1\x33\x1\x0\x1\x9\x2\x0"+
					"\x1\x30\x1\x45\x1\x30\x1\x34\x1\x30\x1\x31\x1\x30\x1\x38\x1\x30\x1\x41"+
					"\x1\x30\x1\x34\x1\x33\x3\x0\x1\x30\x1\x44\x2\x0\x1\x30\x1\x44\x1\x33"+
					"\x3\x0\x1\x30\x1\x45\x2\x0\x1\x30\x1\x37\x1\x0\x1\x30\x1\x35\x1\x47\x1"+
					"\x30\x1\x34\x1\x0\x1\x30\x1\x31\x1\x44\x2\x0\x1\x30\x1\x38\x1\x5A\x1"+
					"\x30\x1\x41\x2\x0\x1\x34\x1\x44\x1\x38\x3\x0\x1\x30\x1\x34\x1\x33\x2"+
					"\x0\x1\x33\x1\x30\x3\x4D\x1\x4E\x1\x45\x1\x48\x1\x5A\x1\x4D\x1\x48\x1"+
					"\x43\x1\x41\x1\x0\x2\x9\x2\x0\x2\x9\x2\x0\x1\x30\x1\x44\x1\x33\x1\x0"+
					"\x1\x30\x1\x45\x1\x30\x1\x34\x1\x30\x1\x31\x1\x30\x1\x38\x1\x30\x1\x41"+
					"\x2\x34\x1\x33\x3\x0\x1\x34\x1\x44\x2\x0\x1\x34\x1\x44\x1\x33\x3\x0\x1"+
					"\x34\x1\x45\x2\x0\x1\x30\x1\x37\x1\x0\x1\x34\x1\x35\x1\x47\x1\x30\x1"+
					"\x34\x1\x0\x1\x34\x1\x31\x1\x44\x2\x0\x1\x34\x1\x38\x1\x5A\x1\x35\x1"+
					"\x41\x2\x0\x1\x44\x1\x38\x3\x0\x2\x34\x1\x33\x2\x0\x3\x4D\x1\x4E\x1\x45"+
					"\x1\x48\x1\x5A\x1\x4D\x1\x48\x1\x43\x1\x41\x1\x0\x2\x9\x2\x0\x2\x9\x2"+
					"\x0\x1\x34\x1\x44\x1\x33\x1\x0\x1\x34\x1\x45\x1\x30\x2\x34\x1\x31\x1"+
					"\x34\x1\x38\x1\x35\x1\x41\x1\x34\x1\x33\x3\x0\x1\x44\x2\x0\x1\x44\x1"+
					"\x33\x3\x0\x1\x45\x2\x0\x1\x34\x1\x37\x1\x0\x1\x35\x1\x47\x2\x34\x1\x0"+
					"\x1\x31\x1\x44\x2\x0\x1\x38\x1\x5A\x1\x41\x5\x0\x1\x34\x1\x33\x2\x0\x1"+
					"\x44\x1\x33\x1\x0\x1\x45\x2\x34\x1\x31\x1\x38\x1\x41\xA\x0\x1\x37\x1"+
					"\x0\x1\x47\x1\x34\x1\x0\x1\x44\x2\x0\x1\x5A\x5\x0\x1\x34\x2\x0";
			private const string DFA205_maxS =
				"\x1\xFFFF\x1\x78\x1\xFFFF\x1\x78\x1\x6D\x1\x73\x1\x6E\x1\x65\x1\x61\x1"+
					"\x0\x1\x68\x1\x7A\x1\xFFFF\x2\x78\x1\x6D\x1\x73\x1\x6E\x1\x65\x1\x61"+
					"\x1\x0\x1\x68\x1\x7A\x3\xFFFF\x1\x0\x1\xFFFF\x3\x0\x1\x78\x1\x37\x1\x64"+
					"\x1\x78\x1\x73\x1\x33\x1\x73\x2\x6E\x2\x61\x2\x0\x2\x68\x2\x7A\x1\xFFFF"+
					"\x1\x0\x1\xFFFF\x5\x0\x1\xFFFF\x1\x0\x1\xFFFF\x1\x0\x1\xFFFF\x1\x0\x1"+
					"\xFFFF\x3\x0\x1\xFFFF\x1\x0\x1\xFFFF\x1\x0\x1\xFFFF\x1\x67\x1\xFFFF\x1"+
					"\x67\x1\xFFFF\x1\x64\x1\xFFFF\x1\x64\x2\xFFFF\x1\x7A\x1\xFFFF\x1\x7A"+
					"\x1\xFFFF\x1\x0\x1\xFFFF\x4\x0\x1\x37\x1\x64\x1\x0\x1\x38\x2\x0\x1\xFFFF"+
					"\x4\x0\x1\x37\x1\x64\x1\x33\x1\x78\x1\x6D\x1\x73\x1\x6E\x1\x65\x1\x68"+
					"\x1\x7A\x1\x73\x1\x68\x2\x0\x1\xFFFF\x2\x0\x1\x78\x1\x61\x3\x0\x1\xFFFF"+
					"\x2\x64\x1\xFFFF\x2\x7A\x1\xFFFF\x2\x0\x1\xFFFF\x3\x0\x1\x37\x1\x38\x1"+
					"\x0\x1\x33\x2\x0\x1\x36\x1\x64\x3\x0\x1\x37\x1\x64\x1\x0\x1\x33\x2\x0"+
					"\x1\x36\x1\x65\x1\xFFFF\x1\x0\x1\xFFFF\x1\x0\x1\x36\x1\x35\x1\xFFFF\x1"+
					"\x0\x1\xFFFF\x1\x0\x1\x36\x1\x31\x2\x7A\x1\x36\x1\x38\x2\x0\x1\x37\x1"+
					"\x61\x1\x37\x1\x64\x1\x38\x3\x0\x1\x37\x1\x38\x1\x33\x1\x37\x1\x64\x1"+
					"\x33\x1\x78\x1\x6D\x1\x73\x1\x6E\x1\x65\x1\x68\x1\x7A\x1\x73\x1\x68\x1"+
					"\x78\x1\x61\x1\x0\x2\x67\x1\x37\x1\x64\x1\x33\x2\x0\x2\x64\x1\x36\x1"+
					"\x65\x2\x0\x1\xFFFF\x1\x36\x1\x31\x1\x36\x1\x38\x1\x37\x1\x61\x1\x37"+
					"\x1\x38\x1\x33\x3\x0\x1\x36\x1\x64\x2\x0\x1\x37\x1\x64\x1\x33\x3\x0\x1"+
					"\x36\x1\x65\x4\x0\x1\x36\x1\x37\x1\x36\x1\x35\x1\x67\x1\x36\x1\x34\x1"+
					"\x36\x1\x31\x1\x64\x1\x36\x1\x38\x1\x7A\x1\x37\x1\x61\x2\x0\x1\x37\x1"+
					"\x64\x1\x38\x3\x0\x1\x37\x1\x38\x1\x33\x2\x0\x1\x37\x1\x64\x1\x33\x1"+
					"\x78\x1\x6D\x1\x73\x1\x6E\x1\x65\x1\x68\x1\x7A\x1\x73\x1\x68\x1\x78\x1"+
					"\x61\x1\x0\x2\x67\x2\x0\x2\x64\x1\x67\x1\x37\x1\x64\x1\x33\x1\x0\x1\x64"+
					"\x2\x0\x1\x36\x1\x65\x1\x36\x1\x34\x1\x36\x1\x31\x1\x36\x1\x38\x1\x37"+
					"\x1\x61\x1\x37\x1\x38\x1\x33\x3\x0\x1\x36\x1\x64\x2\x0\x1\x37\x1\x64"+
					"\x1\x33\x3\x0\x1\x36\x1\x65\x2\x0\x1\x36\x1\x37\x1\x0\x1\x36\x1\x35\x1"+
					"\x67\x1\x36\x1\x34\x1\x0\x1\x36\x1\x31\x1\x64\x2\x0\x1\x36\x1\x38\x1"+
					"\x7A\x1\x37\x1\x61\x2\x0\x1\x37\x1\x64\x1\x38\x3\x0\x1\x37\x1\x38\x1"+
					"\x33\x2\x0\x1\x64\x1\x33\x1\x78\x1\x6D\x1\x73\x1\x6E\x1\x65\x1\x68\x1"+
					"\x7A\x1\x73\x1\x68\x1\x78\x1\x61\x1\x0\x2\x67\x2\x0\x2\x64\x2\x0\x1\x37"+
					"\x1\x64\x1\x33\x1\x0\x1\x36\x1\x65\x1\x36\x1\x34\x1\x36\x1\x31\x1\x36"+
					"\x1\x38\x1\x37\x1\x61\x1\x37\x1\x38\x1\x33\x3\x0\x1\x36\x1\x64\x2\x0"+
					"\x1\x37\x1\x64\x1\x33\x3\x0\x1\x36\x1\x65\x2\x0\x1\x36\x1\x37\x1\x0\x1"+
					"\x36\x1\x35\x1\x67\x1\x36\x1\x34\x1\x0\x1\x36\x1\x31\x1\x64\x2\x0\x1"+
					"\x36\x1\x38\x1\x7A\x1\x37\x1\x61\x2\x0\x1\x64\x1\x38\x3\x0\x1\x37\x1"+
					"\x38\x1\x33\x2\x0\x1\x78\x1\x6D\x1\x73\x1\x6E\x1\x65\x1\x68\x1\x7A\x1"+
					"\x73\x1\x68\x1\x78\x1\x61\x1\x0\x2\x67\x2\x0\x2\x64\x2\x0\x1\x37\x1\x64"+
					"\x1\x33\x1\x0\x1\x36\x1\x65\x1\x36\x1\x34\x1\x36\x1\x31\x1\x36\x1\x38"+
					"\x1\x37\x1\x61\x1\x38\x1\x33\x3\x0\x1\x64\x2\x0\x1\x64\x1\x33\x3\x0\x1"+
					"\x65\x2\x0\x1\x36\x1\x37\x1\x0\x1\x35\x1\x67\x1\x36\x1\x34\x1\x0\x1\x31"+
					"\x1\x64\x2\x0\x1\x38\x1\x7A\x1\x61\x5\x0\x1\x38\x1\x33\x2\x0\x1\x64\x1"+
					"\x33\x1\x0\x1\x65\x1\x36\x1\x34\x1\x31\x1\x38\x1\x61\xA\x0\x1\x37\x1"+
					"\x0\x1\x67\x1\x34\x1\x0\x1\x64\x2\x0\x1\x7A\x5\x0\x1\x34\x2\x0";
			private const string DFA205_acceptS =
				"\xC\xFFFF\x1\xA\xA\xFFFF\x1\xB\x1\xC\x1\x1\x16\xFFFF\x1\x2\x7\xFFFF\x1"+
					"\x3\x3\xFFFF\x1\x4\x5\xFFFF\x1\x5\x3\xFFFF\x1\x6\x3\xFFFF\x1\x7\x3\xFFFF"+
					"\x1\x8\x1\x9\x3\xFFFF\x1\x9\x47\xFFFF\x1\x6\x5\xFFFF\x1\x7\x18B\xFFFF";
			private const string DFA205_specialS =
				"\x1\xFFFF\x1\x0\x1\x1\x1\x2\x1\x3\x1\x4\x1\x5\x1\x6\x1\x7\x1\x8\x1\x9"+
					"\x1\xA\x1\xFFFF\x1\xB\x1\xC\x1\xD\x1\xE\x1\xF\x1\x10\x1\x11\x1\x12\x1"+
					"\x13\x1\x14\x3\xFFFF\x1\x15\x1\x16\x1\x17\x1\x18\x1\x19\xB\xFFFF\x1\x1A"+
					"\x1\x1B\x5\xFFFF\x1\x1C\x1\x1D\x1\x1E\x1\x1F\x1\x20\x1\x21\x1\x22\x1"+
					"\xFFFF\x1\x23\x1\x24\x1\x25\x1\xFFFF\x1\x26\x1\x27\x1\x28\x1\x29\x1\x2A"+
					"\x1\xFFFF\x1\x2B\x1\x2C\x1\x2D\x1\xFFFF\x1\x2E\x1\x2F\x1\x30\x1\xFFFF"+
					"\x1\x31\x1\x32\x1\x33\x2\xFFFF\x1\x34\x1\x35\x1\x36\x1\xFFFF\x1\x37\x1"+
					"\x38\x1\x39\x1\x3A\x1\x3B\x1\x3C\x2\xFFFF\x1\x3D\x1\xFFFF\x1\x3E\x1\x3F"+
					"\x1\x40\x1\x41\x1\x42\x1\x43\x1\x44\xC\xFFFF\x1\x45\x1\x46\x1\x47\x1"+
					"\x48\x1\x49\x2\xFFFF\x1\x4A\x1\x4B\x1\x4C\x1\x4D\x1\x4E\x1\x4F\x1\x50"+
					"\x1\x51\x1\x52\x1\x53\x1\x54\x1\x55\x1\x56\x1\x57\x1\x58\x1\x59\x2\xFFFF"+
					"\x1\x5A\x1\xFFFF\x1\x5B\x1\x5C\x2\xFFFF\x1\x5D\x1\x5E\x1\x5F\x2\xFFFF"+
					"\x1\x60\x1\xFFFF\x1\x61\x1\x62\x3\xFFFF\x1\x63\x1\x64\x1\x65\x3\xFFFF"+
					"\x1\x66\x1\x67\x1\x68\x6\xFFFF\x1\x69\x1\x6A\x5\xFFFF\x1\x6B\x1\x6C\x1"+
					"\x6D\x11\xFFFF\x1\x6E\x5\xFFFF\x1\x6F\x1\x70\x4\xFFFF\x1\x71\x1\x72\x1"+
					"\x73\x9\xFFFF\x1\x74\x1\x75\x1\x76\x2\xFFFF\x1\x77\x1\x78\x3\xFFFF\x1"+
					"\x79\x1\x7A\x1\x7B\x2\xFFFF\x1\x7C\x1\x7D\x1\x7E\x1\x7F\xF\xFFFF\x1\x80"+
					"\x1\x81\x3\xFFFF\x1\x82\x1\x83\x1\x84\x3\xFFFF\x1\x85\x1\x86\xE\xFFFF"+
					"\x1\x87\x2\xFFFF\x1\x88\x1\x89\x6\xFFFF\x1\x8A\x1\xFFFF\x1\x8B\x1\x8C"+
					"\xD\xFFFF\x1\x8D\x1\x8E\x1\x8F\x2\xFFFF\x1\x90\x1\x91\x3\xFFFF\x1\x92"+
					"\x1\x93\x1\x94\x2\xFFFF\x1\x95\x1\x96\x2\xFFFF\x1\x97\x5\xFFFF\x1\x98"+
					"\x3\xFFFF\x1\x99\x1\x9A\x5\xFFFF\x1\x9B\x1\x9C\x3\xFFFF\x1\x9D\x1\x9E"+
					"\x1\x9F\x3\xFFFF\x1\xA0\x1\xA1\xD\xFFFF\x1\xA2\x2\xFFFF\x1\xA3\x1\xA4"+
					"\x2\xFFFF\x1\xA5\x1\xA6\x3\xFFFF\x1\xA7\xD\xFFFF\x1\xA8\x1\xA9\x1\xAA"+
					"\x2\xFFFF\x1\xAB\x1\xAC\x3\xFFFF\x1\xAD\x1\xAE\x1\xAF\x2\xFFFF\x1\xB0"+
					"\x1\xB1\x2\xFFFF\x1\xB2\x5\xFFFF\x1\xB3\x3\xFFFF\x1\xB4\x1\xB5\x5\xFFFF"+
					"\x1\xB6\x1\xB7\x2\xFFFF\x1\xB8\x1\xB9\x1\xBA\x3\xFFFF\x1\xBB\x1\xBC\xB"+
					"\xFFFF\x1\xBD\x2\xFFFF\x1\xBE\x1\xBF\x2\xFFFF\x1\xC0\x1\xC1\x3\xFFFF"+
					"\x1\xC2\xC\xFFFF\x1\xC3\x1\xC4\x1\xC5\x1\xFFFF\x1\xC6\x1\xC7\x2\xFFFF"+
					"\x1\xC8\x1\xC9\x1\xCA\x1\xFFFF\x1\xCB\x1\xCC\x2\xFFFF\x1\xCD\x4\xFFFF"+
					"\x1\xCE\x2\xFFFF\x1\xCF\x1\xD0\x3\xFFFF\x1\xD1\x1\xD2\x1\xD3\x1\xD4\x1"+
					"\xD5\x2\xFFFF\x1\xD6\x1\xD7\x2\xFFFF\x1\xD8\x6\xFFFF\x1\xD9\x1\xDA\x1"+
					"\xDB\x1\xDC\x1\xDD\x1\xDE\x1\xDF\x1\xE0\x1\xE1\x1\xE2\x1\xFFFF\x1\xE3"+
					"\x2\xFFFF\x1\xE4\x1\xFFFF\x1\xE5\x1\xE6\x1\xFFFF\x1\xE7\x1\xE8\x1\xE9"+
					"\x1\xEA\x1\xEB\x1\xFFFF\x1\xEC\x1\xED}>";
			private static readonly string[] DFA205_transitionS =
			{
				"\x1\x17\x7\xFFFF\x1\xC\x13\xFFFF\x2\xC\x1\xF\x1\x12\x1\xD\x2\xC\x1\x16"+
				"\x1\x11\x1\xC\x1\x15\x1\xC\x1\x10\x2\xC\x1\xE\x1\xC\x1\x13\x1\x14\x7"+
				"\xC\x1\xFFFF\x1\x2\x2\xFFFF\x1\xC\x1\xFFFF\x2\xC\x1\x4\x1\x7\x1\x1\x2"+
				"\xC\x1\xB\x1\x6\x1\xC\x1\xA\x1\xC\x1\x5\x2\xC\x1\x3\x1\xC\x1\x8\x1\x9"+
				"\x7\xC\x5\xFFFF\xFF80\xC",
				"\x2\x19\x1\xFFFF\x2\x19\x12\xFFFF\x1\x19\x2C\xFFFF\x1\x1D\xA\xFFFF\x1"+
				"\x1E\x3\xFFFF\x1\x1B\x10\xFFFF\x1\x1A\xA\xFFFF\x1\x1C",
				"\xA\xC\x1\xFFFF\x1\xC\x2\xFFFF\x22\xC\x1\x20\x3\xC\x1\x21\x1\x24\x1"+
				"\x21\x1\x24\x10\xC\x1\x2F\x1\x27\x1\xC\x1\x2D\x1\xC\x1\x25\x2\xC\x1"+
				"\x22\x1\xC\x1\x29\x1\x2B\x14\xC\x1\x2E\x1\x26\x1\xC\x1\x2C\x1\xC\x1"+
				"\x23\x2\xC\x1\x1F\x1\xC\x1\x28\x1\x2A\xFF8C\xC",
				"\x2\x30\x1\xFFFF\x2\x30\x12\xFFFF\x1\x30\x22\xFFFF\x1\x37\x10\xFFFF"+
				"\x1\x36\x3\xFFFF\x1\x35\x3\xFFFF\x1\x32\x6\xFFFF\x1\x34\x10\xFFFF\x1"+
				"\x33\x3\xFFFF\x1\x31",
				"\x2\x38\x1\xFFFF\x2\x38\x12\xFFFF\x1\x38\x2C\xFFFF\x1\x3B\xE\xFFFF\x1"+
				"\x3A\x10\xFFFF\x1\x39",
				"\x2\x3C\x1\xFFFF\x2\x3C\x12\xFFFF\x1\x3C\x2C\xFFFF\x1\x40\x5\xFFFF\x1"+
				"\x41\x8\xFFFF\x1\x3E\x10\xFFFF\x1\x3D\x5\xFFFF\x1\x3F",
				"\x2\x42\x1\xFFFF\x2\x42\x12\xFFFF\x1\x42\x2D\xFFFF\x1\x45\xD\xFFFF\x1"+
				"\x44\x11\xFFFF\x1\x43",
				"\x2\x46\x1\xFFFF\x2\x46\x12\xFFFF\x1\x46\x24\xFFFF\x1\x49\x16\xFFFF"+
				"\x1\x48\x8\xFFFF\x1\x47",
				"\x2\x4A\x1\xFFFF\x2\x4A\x12\xFFFF\x1\x4A\x20\xFFFF\x1\x4D\x1A\xFFFF"+
				"\x1\x4C\x4\xFFFF\x1\x4B",
				"\x1\xFFFF",
				"\x2\x4F\x1\xFFFF\x2\x4F\x12\xFFFF\x1\x4F\x27\xFFFF\x1\x52\x13\xFFFF"+
				"\x1\x51\xB\xFFFF\x1\x50",
				"\x2\x53\x1\xFFFF\x2\x53\x12\xFFFF\x1\x53\x39\xFFFF\x1\x56\x1\xFFFF\x1"+
				"\x55\x1D\xFFFF\x1\x54",
				"",
				"\x2\x19\x1\xFFFF\x2\x19\x12\xFFFF\x1\x19\x2C\xFFFF\x1\x1D\xA\xFFFF\x1"+
				"\x1E\x3\xFFFF\x1\x1B\x10\xFFFF\x1\x1A\xA\xFFFF\x1\x1C",
				"\x2\x30\x1\xFFFF\x2\x30\x12\xFFFF\x1\x30\x22\xFFFF\x1\x37\x10\xFFFF"+
				"\x1\x36\x3\xFFFF\x1\x35\x3\xFFFF\x1\x32\x6\xFFFF\x1\x34\x10\xFFFF\x1"+
				"\x33\x3\xFFFF\x1\x31",
				"\x2\x38\x1\xFFFF\x2\x38\x12\xFFFF\x1\x38\x2C\xFFFF\x1\x3B\xE\xFFFF\x1"+
				"\x3A\x10\xFFFF\x1\x39",
				"\x2\x3C\x1\xFFFF\x2\x3C\x12\xFFFF\x1\x3C\x2C\xFFFF\x1\x40\x5\xFFFF\x1"+
				"\x41\x8\xFFFF\x1\x3E\x10\xFFFF\x1\x3D\x5\xFFFF\x1\x3F",
				"\x2\x42\x1\xFFFF\x2\x42\x12\xFFFF\x1\x42\x2D\xFFFF\x1\x45\xD\xFFFF\x1"+
				"\x44\x11\xFFFF\x1\x43",
				"\x2\x46\x1\xFFFF\x2\x46\x12\xFFFF\x1\x46\x24\xFFFF\x1\x49\x16\xFFFF"+
				"\x1\x48\x8\xFFFF\x1\x47",
				"\x2\x4A\x1\xFFFF\x2\x4A\x12\xFFFF\x1\x4A\x20\xFFFF\x1\x4D\x1A\xFFFF"+
				"\x1\x4C\x4\xFFFF\x1\x4B",
				"\x1\xFFFF",
				"\x2\x4F\x1\xFFFF\x2\x4F\x12\xFFFF\x1\x4F\x27\xFFFF\x1\x52\x13\xFFFF"+
				"\x1\x51\xB\xFFFF\x1\x50",
				"\x2\x53\x1\xFFFF\x2\x53\x12\xFFFF\x1\x53\x39\xFFFF\x1\x56\x1\xFFFF\x1"+
				"\x55\x1D\xFFFF\x1\x54",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\xA\xC\x1\xFFFF\x1\xC\x2\xFFFF\x22\xC\x1\x5A\x3\xC\x1\x5B\x1\x5D\x1"+
				"\x5B\x1\x5D\x15\xC\x1\x58\xA\xC\x1\x5C\x14\xC\x1\x57\xA\xC\x1\x59\xFF87"+
				"\xC",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\x64\x10\xFFFF\x1\x62\x3\xFFFF\x1\x5F\x3\xFFFF\x1\x60\x6\xFFFF\x1"+
				"\x63\x10\xFFFF\x1\x61\x3\xFFFF\x1\x5E",
				"\x1\x65\x3\xFFFF\x1\x66\x1\x67\x1\x66\x1\x67",
				"\x1\x69\x1\x6C\x1\x68\x2\xFFFF\x1\x6E\x1\x6B\x8\xFFFF\x1\x70\x1\xFFFF"+
				"\x1\x6F\x1D\xFFFF\x1\x6D\x1\xFFFF\x1\x6A",
				"\x1\x64\x10\xFFFF\x1\x62\x3\xFFFF\x1\x5F\x3\xFFFF\x1\x60\x6\xFFFF\x1"+
				"\x63\x10\xFFFF\x1\x61\x3\xFFFF\x1\x5E",
				"\x1\x72\x5\xFFFF\x1\x75\x8\xFFFF\x1\x73\x10\xFFFF\x1\x71\x5\xFFFF\x1"+
				"\x74",
				"\x1\x76\x1\xFFFF\x1\x77\x1\x78",
				"\x1\x72\x5\xFFFF\x1\x75\x8\xFFFF\x1\x73\x10\xFFFF\x1\x71\x5\xFFFF\x1"+
				"\x74",
				"\x1\x7A\xD\xFFFF\x1\x7B\x11\xFFFF\x1\x79",
				"\x1\x7A\xD\xFFFF\x1\x7B\x11\xFFFF\x1\x79",
				"\x1\x7D\x1A\xFFFF\x1\x7E\x4\xFFFF\x1\x7C",
				"\x1\x7D\x1A\xFFFF\x1\x7E\x4\xFFFF\x1\x7C",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\x80\x13\xFFFF\x1\x81\xB\xFFFF\x1\x7F",
				"\x1\x80\x13\xFFFF\x1\x81\xB\xFFFF\x1\x7F",
				"\x1\x83\x1\xFFFF\x1\x84\x1D\xFFFF\x1\x82",
				"\x1\x83\x1\xFFFF\x1\x84\x1D\xFFFF\x1\x82",
				"",
				"\x1\xFFFF",
				"\xA\xC\x1\xFFFF\x1\xC\x2\xFFFF\x22\xC\x1\x88\x3\xC\x1\x8B\x1\x89\x1"+
				"\x8B\x1\x89\x1C\xC\x1\x8A\x3\xC\x1\x86\x1B\xC\x1\x87\x3\xC\x1\x85\xFF87"+
				"\xC",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"\x1\xFFFF",
				"\xA\xC\x1\xFFFF\x1\xC\x2\xFFFF\x22\xC\x1\x8E\x3\xC\x1\x8F\x1\xC\x1\x8F"+
				"\x16\xC\x1\x8D\x1F\xC\x1\x8C\xFF92\xC",
				"\x1\xFFFF",
				"",
				"\x1\xFFFF",
				"\xA\xC\x1\xFFFF\x1\xC\x2\xFFFF\x22\xC\x1\x93\x3\xC\x1\x94\x1\x96\x1"+
				"\x94\x1\x96\x15\xC\x1\x91\x5\xC\x1\x95\x19\xC\x1\x90\x5\xC\x1\x92\xFF8C"+
				"\xC",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"\x1\xFFFF",
				"\xA\xC\x1\xFFFF\x1\xC\x2\xFFFF\x22\xC\x1\x99\x3\xC\x1\x9A\x1\xC\x1\x9A"+
				"\x17\xC\x1\x98\x1F\xC\x1\x97\xFF91\xC",
				"\x1\xFFFF",
				"",
				"\x2\x9B\x1\xFFFF\x2\x9B\x12\xFFFF\x1\x9B\x26\xFFFF\x1\x9E\x14\xFFFF"+
				"\x1\x9D\xA\xFFFF\x1\x9C",
				"\xA\xC\x1\xFFFF\x1\xC\x2\xFFFF\x22\xC\x1\x9F\x3\xC\x1\xA0\x1\xC\x1\xA0"+
				"\xFFC9\xC",
				"\x2\x9B\x1\xFFFF\x2\x9B\x12\xFFFF\x1\x9B\x26\xFFFF\x1\x9E\x14\xFFFF"+
				"\x1\x9D\xA\xFFFF\x1\x9C",
				"",
				"\x2\xA1\x1\xFFFF\x2\xA1\x12\xFFFF\x1\xA1\x23\xFFFF\x1\xA4\x17\xFFFF"+
				"\x1\xA3\x7\xFFFF\x1\xA2",
				"\xA\xC\x1\xFFFF\x1\xC\x2\xFFFF\x22\xC\x1\xA5\x3\xC\x1\xA6\x1\xC\x1\xA6"+
				"\xFFC9\xC",
				"\x2\xA1\x1\xFFFF\x2\xA1\x12\xFFFF\x1\xA1\x23\xFFFF\x1\xA4\x17\xFFFF"+
				"\x1\xA3\x7\xFFFF\x1\xA2",
				"",
				"",
				"\x2\x53\x1\xFFFF\x2\x53\x12\xFFFF\x1\x53\x39\xFFFF\x1\x56\x1\xFFFF\x1"+
				"\x55\x1D\xFFFF\x1\x54",
				"\xA\xC\x1\xFFFF\x1\xC\x2\xFFFF\x22\xC\x1\xA9\x3\xC\x1\xAA\x1\xC\x1\xAA"+
				"\x11\xC\x1\xA8\x1F\xC\x1\xA7\xFF97\xC",
				"\x2\x53\x1\xFFFF\x2\x53\x12\xFFFF\x1\x53\x39\xFFFF\x1\x56\x1\xFFFF\x1"+
				"\x55\x1D\xFFFF\x1\x54",
				"",
				"\x1\xFFFF",
				"\xA\xC\x1\xFFFF\x1\xC\x2\xFFFF\x22\xC\x1\xAD\x4\xC\x1\xAE\x1\xC\x1\xAE"+
				"\x22\xC\x1\xAC\x1F\xC\x1\xAB\xFF85\xC",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xAF\x3\xFFFF\x1\xB0\x1\xB1\x1\xB0\x1\xB1",
				"\x1\xB3\x1F\xFFFF\x1\xB2",
				"\x1\xFFFF",
				"\x1\xB4",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\xA\xC\x1\xFFFF\x1\xC\x2\xFFFF\x22\xC\x1\xB5\x3\xC\x1\xB7\x1\xB6\x1"+
				"\xB7\x1\xB6\x1C\xC\x1\x8A\x3\xC\x1\x86\x1B\xC\x1\x87\x3\xC\x1\x85\xFF87"+
				"\xC",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xB8\x3\xFFFF\x1\xB9\x1\xBA\x1\xB9\x1\xBA",
				"\x1\xBC\x1\xBF\x1\xBB\x2\xFFFF\x1\xC1\x1\xBE\x8\xFFFF\x1\xC3\x1\xFFFF"+
				"\x1\xC2\x1D\xFFFF\x1\xC0\x1\xFFFF\x1\xBD",
				"\x1\xC4\x1\xFFFF\x1\xC5\x1\xC6",
				"\x1\x1D\xA\xFFFF\x1\x1E\x3\xFFFF\x1\x1B\x10\xFFFF\x1\x1A\xA\xFFFF\x1"+
				"\x1C",
				"\x1\x3B\xE\xFFFF\x1\x3A\x10\xFFFF\x1\x39",
				"\x1\x40\x5\xFFFF\x1\x41\x8\xFFFF\x1\x3E\x10\xFFFF\x1\x3D\x5\xFFFF\x1"+
				"\x3F",
				"\x1\x45\xD\xFFFF\x1\x44\x11\xFFFF\x1\x43",
				"\x1\xC8\x16\xFFFF\x1\x48\x8\xFFFF\x1\xC7",
				"\x1\x52\x13\xFFFF\x1\x51\xB\xFFFF\x1\x50",
				"\x1\x56\x1\xFFFF\x1\x55\x1D\xFFFF\x1\x54",
				"\x1\x40\x5\xFFFF\x1\x41\x8\xFFFF\x1\x3E\x10\xFFFF\x1\x3D\x5\xFFFF\x1"+
				"\x3F",
				"\x1\x52\x13\xFFFF\x1\x51\xB\xFFFF\x1\x50",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\xA\xC\x1\xFFFF\x1\xC\x2\xFFFF\x22\xC\x1\xC9\x3\xC\x1\xCA\x1\xCB\x1"+
				"\xCA\x1\xCB\x15\xC\x1\x91\x5\xC\x1\x95\x19\xC\x1\x90\x5\xC\x1\x92\xFF8C"+
				"\xC",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xCD\x10\xFFFF\x1\x36\x3\xFFFF\x1\x35\x3\xFFFF\x1\x32\x6\xFFFF\x1"+
				"\xCC\x10\xFFFF\x1\x33\x3\xFFFF\x1\x31",
				"\x1\xCF\x1A\xFFFF\x1\x4C\x4\xFFFF\x1\xCE",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\xA\xC\x1\xFFFF\x1\xC\x2\xFFFF\x22\xC\x1\xD0\x3\xC\x1\xD1\x1\xC\x1\xD1"+
				"\x17\xC\x1\x98\x1F\xC\x1\x97\xFF91\xC",
				"\x2\xA1\x1\xFFFF\x2\xA1\x12\xFFFF\x1\xA1\x23\xFFFF\x1\xD3\x17\xFFFF"+
				"\x1\xD4\x7\xFFFF\x1\xD2",
				"\x2\xA1\x1\xFFFF\x2\xA1\x12\xFFFF\x1\xA1\x23\xFFFF\x1\xD3\x17\xFFFF"+
				"\x1\xD4\x7\xFFFF\x1\xD2",
				"\xA\xC\x1\xFFFF\x1\xC\x2\xFFFF\x22\xC\x1\xD5\x3\xC\x1\xD6\x1\xC\x1\xD6"+
				"\xFFC9\xC",
				"\x2\x53\x1\xFFFF\x2\x53\x12\xFFFF\x1\x53\x39\xFFFF\x1\x83\x1\xFFFF\x1"+
				"\x84\x1D\xFFFF\x1\x82",
				"\x2\x53\x1\xFFFF\x2\x53\x12\xFFFF\x1\x53\x39\xFFFF\x1\x83\x1\xFFFF\x1"+
				"\x84\x1D\xFFFF\x1\x82",
				"\xA\xC\x1\xFFFF\x1\xC\x2\xFFFF\x22\xC\x1\xD7\x3\xC\x1\xD8\x1\xC\x1\xD8"+
				"\x11\xC\x1\xA8\x1F\xC\x1\xA7\xFF97\xC",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\xA\xC\x1\xFFFF\x1\xC\x2\xFFFF\x22\xC\x1\xD9\x4\xC\x1\xDA\x1\xC\x1\xDA"+
				"\x22\xC\x1\xAC\x1F\xC\x1\xAB\xFF85\xC",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xDB\x3\xFFFF\x1\xDD\x1\xDC\x1\xDD\x1\xDC",
				"\x1\xDF\x3\xFFFF\x1\xDE",
				"\x1\xFFFF",
				"\x1\xE0",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xE1\x3\xFFFF\x1\xE2\x1\xFFFF\x1\xE2",
				"\x1\xE4\x1F\xFFFF\x1\xE3",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xE5\x3\xFFFF\x1\xE6\x1\xE7\x1\xE6\x1\xE7",
				"\x1\xE9\x1F\xFFFF\x1\xE8",
				"\x1\xFFFF",
				"\x1\xEA",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xEB\x3\xFFFF\x1\xEC\x1\xFFFF\x1\xEC",
				"\x1\xEE\x1F\xFFFF\x1\xED",
				"",
				"\x1\xFFFF",
				"\xA\xC\x1\xFFFF\x1\xC\x2\xFFFF\x22\xC\x1\xF1\x3\xC\x1\xF2\x1\xC\x1\xF2"+
				"\x10\xC\x1\xF0\x1F\xC\x1\xEF\xFF98\xC",
				"\x1\xFFFF",
				"\x1\xF3\x3\xFFFF\x1\xF4\x1\xFFFF\x1\xF4",
				"\x1\xF5",
				"",
				"\x1\xFFFF",
				"\xA\xC\x1\xFFFF\x1\xC\x2\xFFFF\x22\xC\x1\xF6\x3\xC\x1\xF7\x1\xC\x1\xF7"+
				"\xFFC9\xC",
				"\x1\xFFFF",
				"\x1\xF8\x3\xFFFF\x1\xF9\x1\xFFFF\x1\xF9",
				"\x1\xFA",
				"\x1\x83\x1\xFFFF\x1\x84\x1D\xFFFF\x1\x82",
				"\x1\x83\x1\xFFFF\x1\x84\x1D\xFFFF\x1\x82",
				"\x1\xFB\x3\xFFFF\x1\xFC\x1\xFFFF\x1\xFC",
				"\x1\xFD",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFE\x4\xFFFF\x1\xFF\x1\xFFFF\x1\xFF",
				"\x1\x101\x1F\xFFFF\x1\x100",
				"\x1\x102\x3\xFFFF\x1\x103\x1\x104\x1\x103\x1\x104",
				"\x1\x106\x1F\xFFFF\x1\x105",
				"\x1\x107",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\x108\x3\xFFFF\x1\x10A\x1\x109\x1\x10A\x1\x109",
				"\x1\x10C\x3\xFFFF\x1\x10B",
				"\x1\xE0",
				"\x1\x10D\x3\xFFFF\x1\x10E\x1\x10F\x1\x10E\x1\x10F",
				"\x1\x111\x1\x114\x1\x110\x2\xFFFF\x1\x116\x1\x113\x8\xFFFF\x1\x118\x1"+
				"\xFFFF\x1\x117\x1D\xFFFF\x1\x115\x1\xFFFF\x1\x112",
				"\x1\x119\x1\xFFFF\x1\x11A\x1\x11B",
				"\x1\x1D\xA\xFFFF\x1\x1E\x3\xFFFF\x1\x1B\x10\xFFFF\x1\x1A\xA\xFFFF\x1"+
				"\x1C",
				"\x1\x3B\xE\xFFFF\x1\x3A\x10\xFFFF\x1\x39",
				"\x1\x40\x5\xFFFF\x1\x41\x8\xFFFF\x1\x3E\x10\xFFFF\x1\x3D\x5\xFFFF\x1"+
				"\x3F",
				"\x1\x45\xD\xFFFF\x1\x44\x11\xFFFF\x1\x43",
				"\x1\x11D\x16\xFFFF\x1\x48\x8\xFFFF\x1\x11C",
				"\x1\x52\x13\xFFFF\x1\x51\xB\xFFFF\x1\x50",
				"\x1\x56\x1\xFFFF\x1\x55\x1D\xFFFF\x1\x54",
				"\x1\x40\x5\xFFFF\x1\x41\x8\xFFFF\x1\x3E\x10\xFFFF\x1\x3D\x5\xFFFF\x1"+
				"\x3F",
				"\x1\x52\x13\xFFFF\x1\x51\xB\xFFFF\x1\x50",
				"\x1\x11F\x10\xFFFF\x1\x36\x3\xFFFF\x1\x35\x3\xFFFF\x1\x32\x6\xFFFF\x1"+
				"\x11E\x10\xFFFF\x1\x33\x3\xFFFF\x1\x31",
				"\x1\x121\x1A\xFFFF\x1\x4C\x4\xFFFF\x1\x120",
				"\x1\xFFFF",
				"\x2\x122\x1\xFFFF\x2\x122\x12\xFFFF\x1\x122\x26\xFFFF\x1\x9E\x14\xFFFF"+
				"\x1\x9D\xA\xFFFF\x1\x9C",
				"\x2\x122\x1\xFFFF\x2\x122\x12\xFFFF\x1\x122\x26\xFFFF\x1\x9E\x14\xFFFF"+
				"\x1\x9D\xA\xFFFF\x1\x9C",
				"\x1\x123\x3\xFFFF\x1\x124\x1\x125\x1\x124\x1\x125",
				"\x1\xE9\x1F\xFFFF\x1\xE8",
				"\x1\x126",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x2\x127\x1\xFFFF\x2\x127\x12\xFFFF\x1\x127\x23\xFFFF\x1\x129\x17\xFFFF"+
				"\x1\xA3\x7\xFFFF\x1\x128",
				"\x2\x127\x1\xFFFF\x2\x127\x12\xFFFF\x1\x127\x23\xFFFF\x1\x129\x17\xFFFF"+
				"\x1\xA3\x7\xFFFF\x1\x128",
				"\x1\x12A\x3\xFFFF\x1\x12B\x1\xFFFF\x1\x12B",
				"\x1\xEE\x1F\xFFFF\x1\xED",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\xA\xC\x1\xFFFF\x1\xC\x2\xFFFF\x22\xC\x1\x12C\x3\xC\x1\x12D\x1\xC\x1"+
				"\x12D\xFFC9\xC",
				"\x1\x12E\x3\xFFFF\x1\x12F\x1\xFFFF\x1\x12F",
				"\x1\xFA",
				"\x1\x130\x3\xFFFF\x1\x131\x1\xFFFF\x1\x131",
				"\x1\xFD",
				"\x1\x132\x4\xFFFF\x1\x133\x1\xFFFF\x1\x133",
				"\x1\x101\x1F\xFFFF\x1\x100",
				"\x1\x134\x3\xFFFF\x1\x136\x1\x135\x1\x136\x1\x135",
				"\x1\x138\x3\xFFFF\x1\x137",
				"\x1\x139",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\x13A\x3\xFFFF\x1\x13B\x1\xFFFF\x1\x13B",
				"\x1\x13D\x1F\xFFFF\x1\x13C",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\x13E\x3\xFFFF\x1\x13F\x1\x140\x1\x13F\x1\x140",
				"\x1\x142\x1F\xFFFF\x1\x141",
				"\x1\x143",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\x144\x3\xFFFF\x1\x145\x1\xFFFF\x1\x145",
				"\x1\x147\x1F\xFFFF\x1\x146",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\x148\x3\xFFFF\x1\x149\x1\xFFFF\x1\x149",
				"\x1\x14A",
				"\x1\x14B\x3\xFFFF\x1\x14C\x1\xFFFF\x1\x14C",
				"\x1\x14D",
				"\x1\x9E\x14\xFFFF\x1\x9D\xA\xFFFF\x1\x9C",
				"\x1\x14E\x3\xFFFF\x1\x14F\x1\xFFFF\x1\x14F",
				"\x1\x150",
				"\x1\x151\x3\xFFFF\x1\x152\x1\xFFFF\x1\x152",
				"\x1\x153",
				"\x1\x155\x17\xFFFF\x1\xA3\x7\xFFFF\x1\x154",
				"\x1\x156\x3\xFFFF\x1\x157\x1\xFFFF\x1\x157",
				"\x1\x158",
				"\x1\x56\x1\xFFFF\x1\x55\x1D\xFFFF\x1\x54",
				"\x1\x159\x4\xFFFF\x1\x15A\x1\xFFFF\x1\x15A",
				"\x1\x15C\x1F\xFFFF\x1\x15B",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\x15D\x3\xFFFF\x1\x15E\x1\x15F\x1\x15E\x1\x15F",
				"\x1\x161\x1F\xFFFF\x1\x160",
				"\x1\x162",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\x163\x3\xFFFF\x1\x165\x1\x164\x1\x165\x1\x164",
				"\x1\x167\x3\xFFFF\x1\x166",
				"\x1\x139",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\x168\x1\x169\x1\x168\x1\x169",
				"\x1\x16B\x1\x16E\x1\x16A\x2\xFFFF\x1\x170\x1\x16D\x8\xFFFF\x1\x172\x1"+
				"\xFFFF\x1\x171\x1D\xFFFF\x1\x16F\x1\xFFFF\x1\x16C",
				"\x1\x173\x1\xFFFF\x1\x174\x1\x175",
				"\x1\x1D\xA\xFFFF\x1\x1E\x3\xFFFF\x1\x1B\x10\xFFFF\x1\x1A\xA\xFFFF\x1"+
				"\x1C",
				"\x1\x3B\xE\xFFFF\x1\x3A\x10\xFFFF\x1\x39",
				"\x1\x40\x5\xFFFF\x1\x41\x8\xFFFF\x1\x3E\x10\xFFFF\x1\x3D\x5\xFFFF\x1"+
				"\x3F",
				"\x1\x45\xD\xFFFF\x1\x44\x11\xFFFF\x1\x43",
				"\x1\x177\x16\xFFFF\x1\x48\x8\xFFFF\x1\x176",
				"\x1\x52\x13\xFFFF\x1\x51\xB\xFFFF\x1\x50",
				"\x1\x56\x1\xFFFF\x1\x55\x1D\xFFFF\x1\x54",
				"\x1\x40\x5\xFFFF\x1\x41\x8\xFFFF\x1\x3E\x10\xFFFF\x1\x3D\x5\xFFFF\x1"+
				"\x3F",
				"\x1\x52\x13\xFFFF\x1\x51\xB\xFFFF\x1\x50",
				"\x1\x179\x10\xFFFF\x1\x36\x3\xFFFF\x1\x35\x3\xFFFF\x1\x32\x6\xFFFF\x1"+
				"\x178\x10\xFFFF\x1\x33\x3\xFFFF\x1\x31",
				"\x1\x17B\x1A\xFFFF\x1\x4C\x4\xFFFF\x1\x17A",
				"\x1\xFFFF",
				"\x2\x122\x1\xFFFF\x2\x122\x12\xFFFF\x1\x122\x26\xFFFF\x1\x9E\x14\xFFFF"+
				"\x1\x9D\xA\xFFFF\x1\x9C",
				"\x2\x122\x1\xFFFF\x2\x122\x12\xFFFF\x1\x122\x26\xFFFF\x1\x9E\x14\xFFFF"+
				"\x1\x9D\xA\xFFFF\x1\x9C",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x2\x127\x1\xFFFF\x2\x127\x12\xFFFF\x1\x127\x23\xFFFF\x1\x17D\x17\xFFFF"+
				"\x1\xA3\x7\xFFFF\x1\x17C",
				"\x2\x127\x1\xFFFF\x2\x127\x12\xFFFF\x1\x127\x23\xFFFF\x1\x17D\x17\xFFFF"+
				"\x1\xA3\x7\xFFFF\x1\x17C",
				"\x2\x122\x1\xFFFF\x2\x122\x12\xFFFF\x1\x122\x26\xFFFF\x1\x9E\x14\xFFFF"+
				"\x1\x9D\xA\xFFFF\x1\x9C",
				"\x1\x17E\x3\xFFFF\x1\x17F\x1\x180\x1\x17F\x1\x180",
				"\x1\x142\x1F\xFFFF\x1\x141",
				"\x1\x181",
				"\x1\xFFFF",
				"\x2\x127\x1\xFFFF\x2\x127\x12\xFFFF\x1\x127\x23\xFFFF\x1\xA4\x17\xFFFF"+
				"\x1\xA3\x7\xFFFF\x1\xA2",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\x182\x3\xFFFF\x1\x183\x1\xFFFF\x1\x183",
				"\x1\x147\x1F\xFFFF\x1\x146",
				"\x1\x184\x3\xFFFF\x1\x185\x1\xFFFF\x1\x185",
				"\x1\x150",
				"\x1\x186\x3\xFFFF\x1\x187\x1\xFFFF\x1\x187",
				"\x1\x153",
				"\x1\x188\x3\xFFFF\x1\x189\x1\xFFFF\x1\x189",
				"\x1\x158",
				"\x1\x18A\x4\xFFFF\x1\x18B\x1\xFFFF\x1\x18B",
				"\x1\x15C\x1F\xFFFF\x1\x15B",
				"\x1\x18C\x3\xFFFF\x1\x18E\x1\x18D\x1\x18E\x1\x18D",
				"\x1\x190\x3\xFFFF\x1\x18F",
				"\x1\x191",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\x192\x3\xFFFF\x1\x193\x1\xFFFF\x1\x193",
				"\x1\x195\x1F\xFFFF\x1\x194",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\x196\x3\xFFFF\x1\x197\x1\x198\x1\x197\x1\x198",
				"\x1\x19A\x1F\xFFFF\x1\x199",
				"\x1\x19B",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\x19C\x3\xFFFF\x1\x19D\x1\xFFFF\x1\x19D",
				"\x1\x19F\x1F\xFFFF\x1\x19E",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\x1A0\x3\xFFFF\x1\x1A1\x1\xFFFF\x1\x1A1",
				"\x1\x1A2",
				"\x1\xFFFF",
				"\x1\x1A3\x3\xFFFF\x1\x1A4\x1\xFFFF\x1\x1A4",
				"\x1\x1A5",
				"\x1\x9E\x14\xFFFF\x1\x9D\xA\xFFFF\x1\x9C",
				"\x1\x1A6\x3\xFFFF\x1\x1A7\x1\xFFFF\x1\x1A7",
				"\x1\x1A8",
				"\x1\xFFFF",
				"\x1\x1A9\x3\xFFFF\x1\x1AA\x1\xFFFF\x1\x1AA",
				"\x1\x1AB",
				"\x1\x1AD\x17\xFFFF\x1\xA3\x7\xFFFF\x1\x1AC",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\x1AE\x3\xFFFF\x1\x1AF\x1\xFFFF\x1\x1AF",
				"\x1\x1B0",
				"\x1\x56\x1\xFFFF\x1\x55\x1D\xFFFF\x1\x54",
				"\x1\x1B1\x4\xFFFF\x1\x1B2\x1\xFFFF\x1\x1B2",
				"\x1\x1B4\x1F\xFFFF\x1\x1B3",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\x1B5\x1\x1B6\x1\x1B5\x1\x1B6",
				"\x1\x1B8\x1F\xFFFF\x1\x1B7",
				"\x1\x1B9",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\x1BA\x3\xFFFF\x1\x1BC\x1\x1BB\x1\x1BC\x1\x1BB",
				"\x1\x1BE\x3\xFFFF\x1\x1BD",
				"\x1\x191",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\x1C0\x1\x1C3\x1\x1BF\x2\xFFFF\x1\x1C5\x1\x1C2\x8\xFFFF\x1\x1C7\x1"+
				"\xFFFF\x1\x1C6\x1D\xFFFF\x1\x1C4\x1\xFFFF\x1\x1C1",
				"\x1\x1C8\x1\xFFFF\x1\x1C9\x1\x1CA",
				"\x1\x1D\xA\xFFFF\x1\x1E\x3\xFFFF\x1\x1B\x10\xFFFF\x1\x1A\xA\xFFFF\x1"+
				"\x1C",
				"\x1\x3B\xE\xFFFF\x1\x3A\x10\xFFFF\x1\x39",
				"\x1\x40\x5\xFFFF\x1\x41\x8\xFFFF\x1\x3E\x10\xFFFF\x1\x3D\x5\xFFFF\x1"+
				"\x3F",
				"\x1\x45\xD\xFFFF\x1\x44\x11\xFFFF\x1\x43",
				"\x1\x1CC\x16\xFFFF\x1\x48\x8\xFFFF\x1\x1CB",
				"\x1\x52\x13\xFFFF\x1\x51\xB\xFFFF\x1\x50",
				"\x1\x56\x1\xFFFF\x1\x55\x1D\xFFFF\x1\x54",
				"\x1\x40\x5\xFFFF\x1\x41\x8\xFFFF\x1\x3E\x10\xFFFF\x1\x3D\x5\xFFFF\x1"+
				"\x3F",
				"\x1\x52\x13\xFFFF\x1\x51\xB\xFFFF\x1\x50",
				"\x1\x1CE\x10\xFFFF\x1\x36\x3\xFFFF\x1\x35\x3\xFFFF\x1\x32\x6\xFFFF\x1"+
				"\x1CD\x10\xFFFF\x1\x33\x3\xFFFF\x1\x31",
				"\x1\x1D0\x1A\xFFFF\x1\x4C\x4\xFFFF\x1\x1CF",
				"\x1\xFFFF",
				"\x2\x122\x1\xFFFF\x2\x122\x12\xFFFF\x1\x122\x26\xFFFF\x1\x9E\x14\xFFFF"+
				"\x1\x9D\xA\xFFFF\x1\x9C",
				"\x2\x122\x1\xFFFF\x2\x122\x12\xFFFF\x1\x122\x26\xFFFF\x1\x9E\x14\xFFFF"+
				"\x1\x9D\xA\xFFFF\x1\x9C",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x2\x127\x1\xFFFF\x2\x127\x12\xFFFF\x1\x127\x23\xFFFF\x1\x1D2\x17\xFFFF"+
				"\x1\xA3\x7\xFFFF\x1\x1D1",
				"\x2\x127\x1\xFFFF\x2\x127\x12\xFFFF\x1\x127\x23\xFFFF\x1\x1D2\x17\xFFFF"+
				"\x1\xA3\x7\xFFFF\x1\x1D1",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\x1D3\x3\xFFFF\x1\x1D4\x1\x1D5\x1\x1D4\x1\x1D5",
				"\x1\x19A\x1F\xFFFF\x1\x199",
				"\x1\x1D6",
				"\x1\xFFFF",
				"\x1\x1D7\x3\xFFFF\x1\x1D8\x1\xFFFF\x1\x1D8",
				"\x1\x19F\x1F\xFFFF\x1\x19E",
				"\x1\x1D9\x3\xFFFF\x1\x1DA\x1\xFFFF\x1\x1DA",
				"\x1\x1A8",
				"\x1\x1DB\x3\xFFFF\x1\x1DC\x1\xFFFF\x1\x1DC",
				"\x1\x1AB",
				"\x1\x1DD\x3\xFFFF\x1\x1DE\x1\xFFFF\x1\x1DE",
				"\x1\x1B0",
				"\x1\x1DF\x4\xFFFF\x1\x1E0\x1\xFFFF\x1\x1E0",
				"\x1\x1B4\x1F\xFFFF\x1\x1B3",
				"\x1\x1E2\x1\x1E1\x1\x1E2\x1\x1E1",
				"\x1\x1E4\x3\xFFFF\x1\x1E3",
				"\x1\x1E5",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\x1E6\x1\xFFFF\x1\x1E6",
				"\x1\x1E8\x1F\xFFFF\x1\x1E7",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\x1E9\x1\x1EA\x1\x1E9\x1\x1EA",
				"\x1\x1EC\x1F\xFFFF\x1\x1EB",
				"\x1\x1ED",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\x1EE\x1\xFFFF\x1\x1EE",
				"\x1\x1F0\x1F\xFFFF\x1\x1EF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\x1F1\x3\xFFFF\x1\x1F2\x1\xFFFF\x1\x1F2",
				"\x1\x1F3",
				"\x1\xFFFF",
				"\x1\x1F4\x1\xFFFF\x1\x1F4",
				"\x1\x1F5",
				"\x1\x9E\x14\xFFFF\x1\x9D\xA\xFFFF\x1\x9C",
				"\x1\x1F6\x3\xFFFF\x1\x1F7\x1\xFFFF\x1\x1F7",
				"\x1\x1F8",
				"\x1\xFFFF",
				"\x1\x1F9\x1\xFFFF\x1\x1F9",
				"\x1\x1FA",
				"\x1\x1FC\x17\xFFFF\x1\xA3\x7\xFFFF\x1\x1FB",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\x1FD\x1\xFFFF\x1\x1FD",
				"\x1\x1FE",
				"\x1\x56\x1\xFFFF\x1\x55\x1D\xFFFF\x1\x54",
				"\x1\x1FF\x1\xFFFF\x1\x1FF",
				"\x1\x201\x1F\xFFFF\x1\x200",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\x203\x1F\xFFFF\x1\x202",
				"\x1\x204",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\x206\x1\x205\x1\x206\x1\x205",
				"\x1\x208\x3\xFFFF\x1\x207",
				"\x1\x1E5",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\x1D\xA\xFFFF\x1\x1E\x3\xFFFF\x1\x1B\x10\xFFFF\x1\x1A\xA\xFFFF\x1"+
				"\x1C",
				"\x1\x3B\xE\xFFFF\x1\x3A\x10\xFFFF\x1\x39",
				"\x1\x40\x5\xFFFF\x1\x41\x8\xFFFF\x1\x3E\x10\xFFFF\x1\x3D\x5\xFFFF\x1"+
				"\x3F",
				"\x1\x45\xD\xFFFF\x1\x44\x11\xFFFF\x1\x43",
				"\x1\x49\x16\xFFFF\x1\x48\x8\xFFFF\x1\x47",
				"\x1\x52\x13\xFFFF\x1\x51\xB\xFFFF\x1\x50",
				"\x1\x56\x1\xFFFF\x1\x55\x1D\xFFFF\x1\x54",
				"\x1\x40\x5\xFFFF\x1\x41\x8\xFFFF\x1\x3E\x10\xFFFF\x1\x3D\x5\xFFFF\x1"+
				"\x3F",
				"\x1\x52\x13\xFFFF\x1\x51\xB\xFFFF\x1\x50",
				"\x1\x37\x10\xFFFF\x1\x36\x3\xFFFF\x1\x35\x3\xFFFF\x1\x32\x6\xFFFF\x1"+
				"\x34\x10\xFFFF\x1\x33\x3\xFFFF\x1\x31",
				"\x1\x4D\x1A\xFFFF\x1\x4C\x4\xFFFF\x1\x4B",
				"\x1\xFFFF",
				"\x2\x122\x1\xFFFF\x2\x122\x12\xFFFF\x1\x122\x26\xFFFF\x1\x9E\x14\xFFFF"+
				"\x1\x9D\xA\xFFFF\x1\x9C",
				"\x2\x122\x1\xFFFF\x2\x122\x12\xFFFF\x1\x122\x26\xFFFF\x1\x9E\x14\xFFFF"+
				"\x1\x9D\xA\xFFFF\x1\x9C",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x2\x127\x1\xFFFF\x2\x127\x12\xFFFF\x1\x127\x23\xFFFF\x1\xA4\x17\xFFFF"+
				"\x1\xA3\x7\xFFFF\x1\xA2",
				"\x2\x127\x1\xFFFF\x2\x127\x12\xFFFF\x1\x127\x23\xFFFF\x1\xA4\x17\xFFFF"+
				"\x1\xA3\x7\xFFFF\x1\xA2",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\x209\x1\x20A\x1\x209\x1\x20A",
				"\x1\x1EC\x1F\xFFFF\x1\x1EB",
				"\x1\x20B",
				"\x1\xFFFF",
				"\x1\x20C\x1\xFFFF\x1\x20C",
				"\x1\x1F0\x1F\xFFFF\x1\x1EF",
				"\x1\x20D\x3\xFFFF\x1\x20E\x1\xFFFF\x1\x20E",
				"\x1\x1F8",
				"\x1\x20F\x1\xFFFF\x1\x20F",
				"\x1\x1FA",
				"\x1\x210\x1\xFFFF\x1\x210",
				"\x1\x1FE",
				"\x1\x211\x1\xFFFF\x1\x211",
				"\x1\x201\x1F\xFFFF\x1\x200",
				"\x1\x213\x3\xFFFF\x1\x212",
				"\x1\x214",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\x216\x1F\xFFFF\x1\x215",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\x218\x1F\xFFFF\x1\x217",
				"\x1\x219",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\x21B\x1F\xFFFF\x1\x21A",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\x21C\x1\xFFFF\x1\x21C",
				"\x1\x21D",
				"\x1\xFFFF",
				"\x1\x21E",
				"\x1\x9E\x14\xFFFF\x1\x9D\xA\xFFFF\x1\x9C",
				"\x1\x21F\x1\xFFFF\x1\x21F",
				"\x1\x220",
				"\x1\xFFFF",
				"\x1\x221",
				"\x1\x223\x17\xFFFF\x1\xA3\x7\xFFFF\x1\x222",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\x224",
				"\x1\x56\x1\xFFFF\x1\x55\x1D\xFFFF\x1\x54",
				"\x1\x226\x1F\xFFFF\x1\x225",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\x228\x3\xFFFF\x1\x227",
				"\x1\x214",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\x218\x1F\xFFFF\x1\x217",
				"\x1\x229",
				"\x1\xFFFF",
				"\x1\x21B\x1F\xFFFF\x1\x21A",
				"\x1\x22A\x1\xFFFF\x1\x22A",
				"\x1\x220",
				"\x1\x221",
				"\x1\x224",
				"\x1\x226\x1F\xFFFF\x1\x225",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\x22B",
				"\x1\xFFFF",
				"\x1\x9E\x14\xFFFF\x1\x9D\xA\xFFFF\x1\x9C",
				"\x1\x22C",
				"\x1\xFFFF",
				"\x1\xA4\x17\xFFFF\x1\xA3\x7\xFFFF\x1\xA2",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\x56\x1\xFFFF\x1\x55\x1D\xFFFF\x1\x54",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\x22C",
				"\x1\xFFFF",
				"\x1\xFFFF"
			};

			private static readonly short[] DFA205_eot = DFA.UnpackEncodedString(DFA205_eotS);
			private static readonly short[] DFA205_eof = DFA.UnpackEncodedString(DFA205_eofS);
			private static readonly char[] DFA205_min = DFA.UnpackEncodedStringToUnsignedChars(DFA205_minS);
			private static readonly char[] DFA205_max = DFA.UnpackEncodedStringToUnsignedChars(DFA205_maxS);
			private static readonly short[] DFA205_accept = DFA.UnpackEncodedString(DFA205_acceptS);
			private static readonly short[] DFA205_special = DFA.UnpackEncodedString(DFA205_specialS);
			private static readonly short[][] DFA205_transition;

			static DFA205()
			{
				int numStates = DFA205_transitionS.Length;
				DFA205_transition = new short[numStates][];
				for ( int i=0; i < numStates; i++ )
				{
					DFA205_transition[i] = DFA.UnpackEncodedString(DFA205_transitionS[i]);
				}
			}

			public DFA205( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
				: base(specialStateTransition)
			{
				this.recognizer = recognizer;
				this.decisionNumber = 205;
				this.eot = DFA205_eot;
				this.eof = DFA205_eof;
				this.min = DFA205_min;
				this.max = DFA205_max;
				this.accept = DFA205_accept;
				this.special = DFA205_special;
				this.transition = DFA205_transition;
			}

			public override string Description { get { return "611:9: ( ( E ( M | X ) )=> E ( M | X ) | ( P ( X | T | C ) )=> P ( X | T | C ) | ( C M )=> C M | ( M ( M | S ) )=> M ( M | S ) | ( I N )=> I N | ( D E G )=> D E G | ( R A D )=> R A D | ( S )=> S | ( ( K )? H Z )=> ( K )? H Z | IDENT | '%' |)"; } }

			public override void Error(NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
			}
		}

		private int SpecialStateTransition205(DFA dfa, int s, IIntStream _input)
		{
			IIntStream input = _input;
			int _s = s;
			switch (s)
			{
				case 0:
				int LA205_1 = input.LA(1);


				int index205_1 = input.Index;
				input.Rewind();
				s = -1;
				if (((LA205_1>='\t' && LA205_1<='\n')||(LA205_1>='\f' && LA205_1<='\r')||LA205_1==' ') && (EvaluatePredicate(synpred1_CSS3_fragment))) {s = 25;}

				else if ((LA205_1=='m')) {s = 26;}

				else if ((LA205_1=='\\')) {s = 27;}

				else if ((LA205_1=='x')) {s = 28;}

				else if ((LA205_1=='M')) {s = 29;}

				else if ((LA205_1=='X')) {s = 30;}

				else s = 12;


				input.Seek(index205_1);
				if (s >= 0) return s;
				break;
				case 1:
				int LA205_2 = input.LA(1);

				s = -1;
				if ((LA205_2=='p')) {s = 31;}

				else if ((LA205_2=='0')) {s = 32;}

				else if ((LA205_2=='4'||LA205_2=='6')) {s = 33;}

				else if ((LA205_2=='P')) {s = 34;}

				else if ((LA205_2=='m')) {s = 35;}

				else if ((LA205_2=='5'||LA205_2=='7')) {s = 36;}

				else if ((LA205_2=='M')) {s = 37;}

				else if ((LA205_2=='i')) {s = 38;}

				else if ((LA205_2=='I')) {s = 39;}

				else if ((LA205_2=='r')) {s = 40;}

				else if ((LA205_2=='R')) {s = 41;}

				else if ((LA205_2=='s')) {s = 42;}

				else if ((LA205_2=='S')) {s = 43;}

				else if ((LA205_2=='k')) {s = 44;}

				else if ((LA205_2=='K')) {s = 45;}

				else if ((LA205_2=='h')) {s = 46;}

				else if ((LA205_2=='H')) {s = 47;}

				else if (((LA205_2>='\u0000' && LA205_2<='\t')||LA205_2=='\u000B'||(LA205_2>='\u000E' && LA205_2<='/')||(LA205_2>='1' && LA205_2<='3')||(LA205_2>='8' && LA205_2<='G')||LA205_2=='J'||LA205_2=='L'||(LA205_2>='N' && LA205_2<='O')||LA205_2=='Q'||(LA205_2>='T' && LA205_2<='g')||LA205_2=='j'||LA205_2=='l'||(LA205_2>='n' && LA205_2<='o')||LA205_2=='q'||(LA205_2>='t' && LA205_2<='\uFFFF'))) {s = 12;}

				if (s >= 0) return s;
				break;
				case 2:
				int LA205_3 = input.LA(1);


				int index205_3 = input.Index;
				input.Rewind();
				s = -1;
				if (((LA205_3>='\t' && LA205_3<='\n')||(LA205_3>='\f' && LA205_3<='\r')||LA205_3==' ') && (EvaluatePredicate(synpred2_CSS3_fragment))) {s = 48;}

				else if ((LA205_3=='x')) {s = 49;}

				else if ((LA205_3=='\\')) {s = 50;}

				else if ((LA205_3=='t')) {s = 51;}

				else if ((LA205_3=='c')) {s = 52;}

				else if ((LA205_3=='X')) {s = 53;}

				else if ((LA205_3=='T')) {s = 54;}

				else if ((LA205_3=='C')) {s = 55;}

				else s = 12;


				input.Seek(index205_3);
				if (s >= 0) return s;
				break;
				case 3:
				int LA205_4 = input.LA(1);


				int index205_4 = input.Index;
				input.Rewind();
				s = -1;
				if (((LA205_4>='\t' && LA205_4<='\n')||(LA205_4>='\f' && LA205_4<='\r')||LA205_4==' ') && (EvaluatePredicate(synpred3_CSS3_fragment))) {s = 56;}

				else if ((LA205_4=='m')) {s = 57;}

				else if ((LA205_4=='\\')) {s = 58;}

				else if ((LA205_4=='M')) {s = 59;}

				else s = 12;


				input.Seek(index205_4);
				if (s >= 0) return s;
				break;
				case 4:
				int LA205_5 = input.LA(1);


				int index205_5 = input.Index;
				input.Rewind();
				s = -1;
				if (((LA205_5>='\t' && LA205_5<='\n')||(LA205_5>='\f' && LA205_5<='\r')||LA205_5==' ') && (EvaluatePredicate(synpred4_CSS3_fragment))) {s = 60;}

				else if ((LA205_5=='m')) {s = 61;}

				else if ((LA205_5=='\\')) {s = 62;}

				else if ((LA205_5=='s')) {s = 63;}

				else if ((LA205_5=='M')) {s = 64;}

				else if ((LA205_5=='S')) {s = 65;}

				else s = 12;


				input.Seek(index205_5);
				if (s >= 0) return s;
				break;
				case 5:
				int LA205_6 = input.LA(1);


				int index205_6 = input.Index;
				input.Rewind();
				s = -1;
				if (((LA205_6>='\t' && LA205_6<='\n')||(LA205_6>='\f' && LA205_6<='\r')||LA205_6==' ') && (EvaluatePredicate(synpred5_CSS3_fragment))) {s = 66;}

				else if ((LA205_6=='n')) {s = 67;}

				else if ((LA205_6=='\\')) {s = 68;}

				else if ((LA205_6=='N')) {s = 69;}

				else s = 12;


				input.Seek(index205_6);
				if (s >= 0) return s;
				break;
				case 6:
				int LA205_7 = input.LA(1);


				int index205_7 = input.Index;
				input.Rewind();
				s = -1;
				if (((LA205_7>='\t' && LA205_7<='\n')||(LA205_7>='\f' && LA205_7<='\r')||LA205_7==' ') && (EvaluatePredicate(synpred6_CSS3_fragment))) {s = 70;}

				else if ((LA205_7=='e')) {s = 71;}

				else if ((LA205_7=='\\')) {s = 72;}

				else if ((LA205_7=='E')) {s = 73;}

				else s = 12;


				input.Seek(index205_7);
				if (s >= 0) return s;
				break;
				case 7:
				int LA205_8 = input.LA(1);


				int index205_8 = input.Index;
				input.Rewind();
				s = -1;
				if (((LA205_8>='\t' && LA205_8<='\n')||(LA205_8>='\f' && LA205_8<='\r')||LA205_8==' ') && (EvaluatePredicate(synpred7_CSS3_fragment))) {s = 74;}

				else if ((LA205_8=='a')) {s = 75;}

				else if ((LA205_8=='\\')) {s = 76;}

				else if ((LA205_8=='A')) {s = 77;}

				else s = 12;


				input.Seek(index205_8);
				if (s >= 0) return s;
				break;
				case 8:
				int LA205_9 = input.LA(1);


				int index205_9 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred8_CSS3_fragment))) {s = 78;}

				else if ((true)) {s = 12;}


				input.Seek(index205_9);
				if (s >= 0) return s;
				break;
				case 9:
				int LA205_10 = input.LA(1);


				int index205_10 = input.Index;
				input.Rewind();
				s = -1;
				if (((LA205_10>='\t' && LA205_10<='\n')||(LA205_10>='\f' && LA205_10<='\r')||LA205_10==' ') && (EvaluatePredicate(synpred9_CSS3_fragment))) {s = 79;}

				else if ((LA205_10=='h')) {s = 80;}

				else if ((LA205_10=='\\')) {s = 81;}

				else if ((LA205_10=='H')) {s = 82;}

				else s = 12;


				input.Seek(index205_10);
				if (s >= 0) return s;
				break;
				case 10:
				int LA205_11 = input.LA(1);


				int index205_11 = input.Index;
				input.Rewind();
				s = -1;
				if (((LA205_11>='\t' && LA205_11<='\n')||(LA205_11>='\f' && LA205_11<='\r')||LA205_11==' ') && (EvaluatePredicate(synpred9_CSS3_fragment))) {s = 83;}

				else if ((LA205_11=='z')) {s = 84;}

				else if ((LA205_11=='\\')) {s = 85;}

				else if ((LA205_11=='Z')) {s = 86;}

				else s = 12;


				input.Seek(index205_11);
				if (s >= 0) return s;
				break;
				case 11:
				int LA205_13 = input.LA(1);


				int index205_13 = input.Index;
				input.Rewind();
				s = -1;
				if (((LA205_13>='\t' && LA205_13<='\n')||(LA205_13>='\f' && LA205_13<='\r')||LA205_13==' ') && (EvaluatePredicate(synpred1_CSS3_fragment))) {s = 25;}

				else if ((LA205_13=='m')) {s = 26;}

				else if ((LA205_13=='\\')) {s = 27;}

				else if ((LA205_13=='x')) {s = 28;}

				else if ((LA205_13=='M')) {s = 29;}

				else if ((LA205_13=='X')) {s = 30;}

				else s = 12;


				input.Seek(index205_13);
				if (s >= 0) return s;
				break;
				case 12:
				int LA205_14 = input.LA(1);


				int index205_14 = input.Index;
				input.Rewind();
				s = -1;
				if (((LA205_14>='\t' && LA205_14<='\n')||(LA205_14>='\f' && LA205_14<='\r')||LA205_14==' ') && (EvaluatePredicate(synpred2_CSS3_fragment))) {s = 48;}

				else if ((LA205_14=='x')) {s = 49;}

				else if ((LA205_14=='\\')) {s = 50;}

				else if ((LA205_14=='t')) {s = 51;}

				else if ((LA205_14=='c')) {s = 52;}

				else if ((LA205_14=='X')) {s = 53;}

				else if ((LA205_14=='T')) {s = 54;}

				else if ((LA205_14=='C')) {s = 55;}

				else s = 12;


				input.Seek(index205_14);
				if (s >= 0) return s;
				break;
				case 13:
				int LA205_15 = input.LA(1);


				int index205_15 = input.Index;
				input.Rewind();
				s = -1;
				if (((LA205_15>='\t' && LA205_15<='\n')||(LA205_15>='\f' && LA205_15<='\r')||LA205_15==' ') && (EvaluatePredicate(synpred3_CSS3_fragment))) {s = 56;}

				else if ((LA205_15=='m')) {s = 57;}

				else if ((LA205_15=='\\')) {s = 58;}

				else if ((LA205_15=='M')) {s = 59;}

				else s = 12;


				input.Seek(index205_15);
				if (s >= 0) return s;
				break;
				case 14:
				int LA205_16 = input.LA(1);


				int index205_16 = input.Index;
				input.Rewind();
				s = -1;
				if (((LA205_16>='\t' && LA205_16<='\n')||(LA205_16>='\f' && LA205_16<='\r')||LA205_16==' ') && (EvaluatePredicate(synpred4_CSS3_fragment))) {s = 60;}

				else if ((LA205_16=='m')) {s = 61;}

				else if ((LA205_16=='\\')) {s = 62;}

				else if ((LA205_16=='s')) {s = 63;}

				else if ((LA205_16=='M')) {s = 64;}

				else if ((LA205_16=='S')) {s = 65;}

				else s = 12;


				input.Seek(index205_16);
				if (s >= 0) return s;
				break;
				case 15:
				int LA205_17 = input.LA(1);


				int index205_17 = input.Index;
				input.Rewind();
				s = -1;
				if (((LA205_17>='\t' && LA205_17<='\n')||(LA205_17>='\f' && LA205_17<='\r')||LA205_17==' ') && (EvaluatePredicate(synpred5_CSS3_fragment))) {s = 66;}

				else if ((LA205_17=='n')) {s = 67;}

				else if ((LA205_17=='\\')) {s = 68;}

				else if ((LA205_17=='N')) {s = 69;}

				else s = 12;


				input.Seek(index205_17);
				if (s >= 0) return s;
				break;
				case 16:
				int LA205_18 = input.LA(1);


				int index205_18 = input.Index;
				input.Rewind();
				s = -1;
				if (((LA205_18>='\t' && LA205_18<='\n')||(LA205_18>='\f' && LA205_18<='\r')||LA205_18==' ') && (EvaluatePredicate(synpred6_CSS3_fragment))) {s = 70;}

				else if ((LA205_18=='e')) {s = 71;}

				else if ((LA205_18=='\\')) {s = 72;}

				else if ((LA205_18=='E')) {s = 73;}

				else s = 12;


				input.Seek(index205_18);
				if (s >= 0) return s;
				break;
				case 17:
				int LA205_19 = input.LA(1);


				int index205_19 = input.Index;
				input.Rewind();
				s = -1;
				if (((LA205_19>='\t' && LA205_19<='\n')||(LA205_19>='\f' && LA205_19<='\r')||LA205_19==' ') && (EvaluatePredicate(synpred7_CSS3_fragment))) {s = 74;}

				else if ((LA205_19=='a')) {s = 75;}

				else if ((LA205_19=='\\')) {s = 76;}

				else if ((LA205_19=='A')) {s = 77;}

				else s = 12;


				input.Seek(index205_19);
				if (s >= 0) return s;
				break;
				case 18:
				int LA205_20 = input.LA(1);


				int index205_20 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred8_CSS3_fragment))) {s = 78;}

				else if ((true)) {s = 12;}


				input.Seek(index205_20);
				if (s >= 0) return s;
				break;
				case 19:
				int LA205_21 = input.LA(1);


				int index205_21 = input.Index;
				input.Rewind();
				s = -1;
				if (((LA205_21>='\t' && LA205_21<='\n')||(LA205_21>='\f' && LA205_21<='\r')||LA205_21==' ') && (EvaluatePredicate(synpred9_CSS3_fragment))) {s = 79;}

				else if ((LA205_21=='h')) {s = 80;}

				else if ((LA205_21=='\\')) {s = 81;}

				else if ((LA205_21=='H')) {s = 82;}

				else s = 12;


				input.Seek(index205_21);
				if (s >= 0) return s;
				break;
				case 20:
				int LA205_22 = input.LA(1);


				int index205_22 = input.Index;
				input.Rewind();
				s = -1;
				if (((LA205_22>='\t' && LA205_22<='\n')||(LA205_22>='\f' && LA205_22<='\r')||LA205_22==' ') && (EvaluatePredicate(synpred9_CSS3_fragment))) {s = 83;}

				else if ((LA205_22=='z')) {s = 84;}

				else if ((LA205_22=='\\')) {s = 85;}

				else if ((LA205_22=='Z')) {s = 86;}

				else s = 12;


				input.Seek(index205_22);
				if (s >= 0) return s;
				break;
				case 21:
				int LA205_26 = input.LA(1);


				int index205_26 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred1_CSS3_fragment))) {s = 25;}

				else if ((true)) {s = 12;}


				input.Seek(index205_26);
				if (s >= 0) return s;
				break;
				case 22:
				int LA205_27 = input.LA(1);

				s = -1;
				if ((LA205_27=='m')) {s = 87;}

				else if ((LA205_27=='M')) {s = 88;}

				else if ((LA205_27=='x')) {s = 89;}

				else if ((LA205_27=='0')) {s = 90;}

				else if ((LA205_27=='4'||LA205_27=='6')) {s = 91;}

				else if ((LA205_27=='X')) {s = 92;}

				else if (((LA205_27>='\u0000' && LA205_27<='\t')||LA205_27=='\u000B'||(LA205_27>='\u000E' && LA205_27<='/')||(LA205_27>='1' && LA205_27<='3')||(LA205_27>='8' && LA205_27<='L')||(LA205_27>='N' && LA205_27<='W')||(LA205_27>='Y' && LA205_27<='l')||(LA205_27>='n' && LA205_27<='w')||(LA205_27>='y' && LA205_27<='\uFFFF'))) {s = 12;}

				else if ((LA205_27=='5'||LA205_27=='7')) {s = 93;}

				if (s >= 0) return s;
				break;
				case 23:
				int LA205_28 = input.LA(1);


				int index205_28 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred1_CSS3_fragment))) {s = 25;}

				else if ((true)) {s = 12;}


				input.Seek(index205_28);
				if (s >= 0) return s;
				break;
				case 24:
				int LA205_29 = input.LA(1);


				int index205_29 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred1_CSS3_fragment))) {s = 25;}

				else if ((true)) {s = 12;}


				input.Seek(index205_29);
				if (s >= 0) return s;
				break;
				case 25:
				int LA205_30 = input.LA(1);


				int index205_30 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred1_CSS3_fragment))) {s = 25;}

				else if ((true)) {s = 12;}


				input.Seek(index205_30);
				if (s >= 0) return s;
				break;
				case 26:
				int LA205_42 = input.LA(1);


				int index205_42 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred8_CSS3_fragment))) {s = 78;}

				else if ((true)) {s = 12;}


				input.Seek(index205_42);
				if (s >= 0) return s;
				break;
				case 27:
				int LA205_43 = input.LA(1);


				int index205_43 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred8_CSS3_fragment))) {s = 78;}

				else if ((true)) {s = 12;}


				input.Seek(index205_43);
				if (s >= 0) return s;
				break;
				case 28:
				int LA205_49 = input.LA(1);


				int index205_49 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred2_CSS3_fragment))) {s = 48;}

				else if ((true)) {s = 12;}


				input.Seek(index205_49);
				if (s >= 0) return s;
				break;
				case 29:
				int LA205_50 = input.LA(1);

				s = -1;
				if ((LA205_50=='x')) {s = 133;}

				else if ((LA205_50=='X')) {s = 134;}

				else if ((LA205_50=='t')) {s = 135;}

				else if ((LA205_50=='0')) {s = 136;}

				else if ((LA205_50=='5'||LA205_50=='7')) {s = 137;}

				else if ((LA205_50=='T')) {s = 138;}

				else if (((LA205_50>='\u0000' && LA205_50<='\t')||LA205_50=='\u000B'||(LA205_50>='\u000E' && LA205_50<='/')||(LA205_50>='1' && LA205_50<='3')||(LA205_50>='8' && LA205_50<='S')||(LA205_50>='U' && LA205_50<='W')||(LA205_50>='Y' && LA205_50<='s')||(LA205_50>='u' && LA205_50<='w')||(LA205_50>='y' && LA205_50<='\uFFFF'))) {s = 12;}

				else if ((LA205_50=='4'||LA205_50=='6')) {s = 139;}

				if (s >= 0) return s;
				break;
				case 30:
				int LA205_51 = input.LA(1);


				int index205_51 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred2_CSS3_fragment))) {s = 48;}

				else if ((true)) {s = 12;}


				input.Seek(index205_51);
				if (s >= 0) return s;
				break;
				case 31:
				int LA205_52 = input.LA(1);


				int index205_52 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred2_CSS3_fragment))) {s = 48;}

				else if ((true)) {s = 12;}


				input.Seek(index205_52);
				if (s >= 0) return s;
				break;
				case 32:
				int LA205_53 = input.LA(1);


				int index205_53 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred2_CSS3_fragment))) {s = 48;}

				else if ((true)) {s = 12;}


				input.Seek(index205_53);
				if (s >= 0) return s;
				break;
				case 33:
				int LA205_54 = input.LA(1);


				int index205_54 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred2_CSS3_fragment))) {s = 48;}

				else if ((true)) {s = 12;}


				input.Seek(index205_54);
				if (s >= 0) return s;
				break;
				case 34:
				int LA205_55 = input.LA(1);


				int index205_55 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred2_CSS3_fragment))) {s = 48;}

				else if ((true)) {s = 12;}


				input.Seek(index205_55);
				if (s >= 0) return s;
				break;
				case 35:
				int LA205_57 = input.LA(1);


				int index205_57 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred3_CSS3_fragment))) {s = 56;}

				else if ((true)) {s = 12;}


				input.Seek(index205_57);
				if (s >= 0) return s;
				break;
				case 36:
				int LA205_58 = input.LA(1);

				s = -1;
				if ((LA205_58=='m')) {s = 140;}

				else if ((LA205_58=='M')) {s = 141;}

				else if (((LA205_58>='\u0000' && LA205_58<='\t')||LA205_58=='\u000B'||(LA205_58>='\u000E' && LA205_58<='/')||(LA205_58>='1' && LA205_58<='3')||LA205_58=='5'||(LA205_58>='7' && LA205_58<='L')||(LA205_58>='N' && LA205_58<='l')||(LA205_58>='n' && LA205_58<='\uFFFF'))) {s = 12;}

				else if ((LA205_58=='0')) {s = 142;}

				else if ((LA205_58=='4'||LA205_58=='6')) {s = 143;}

				if (s >= 0) return s;
				break;
				case 37:
				int LA205_59 = input.LA(1);


				int index205_59 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred3_CSS3_fragment))) {s = 56;}

				else if ((true)) {s = 12;}


				input.Seek(index205_59);
				if (s >= 0) return s;
				break;
				case 38:
				int LA205_61 = input.LA(1);


				int index205_61 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred4_CSS3_fragment))) {s = 60;}

				else if ((true)) {s = 12;}


				input.Seek(index205_61);
				if (s >= 0) return s;
				break;
				case 39:
				int LA205_62 = input.LA(1);

				s = -1;
				if ((LA205_62=='m')) {s = 144;}

				else if ((LA205_62=='M')) {s = 145;}

				else if ((LA205_62=='s')) {s = 146;}

				else if ((LA205_62=='0')) {s = 147;}

				else if ((LA205_62=='4'||LA205_62=='6')) {s = 148;}

				else if ((LA205_62=='S')) {s = 149;}

				else if (((LA205_62>='\u0000' && LA205_62<='\t')||LA205_62=='\u000B'||(LA205_62>='\u000E' && LA205_62<='/')||(LA205_62>='1' && LA205_62<='3')||(LA205_62>='8' && LA205_62<='L')||(LA205_62>='N' && LA205_62<='R')||(LA205_62>='T' && LA205_62<='l')||(LA205_62>='n' && LA205_62<='r')||(LA205_62>='t' && LA205_62<='\uFFFF'))) {s = 12;}

				else if ((LA205_62=='5'||LA205_62=='7')) {s = 150;}

				if (s >= 0) return s;
				break;
				case 40:
				int LA205_63 = input.LA(1);


				int index205_63 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred4_CSS3_fragment))) {s = 60;}

				else if ((true)) {s = 12;}


				input.Seek(index205_63);
				if (s >= 0) return s;
				break;
				case 41:
				int LA205_64 = input.LA(1);


				int index205_64 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred4_CSS3_fragment))) {s = 60;}

				else if ((true)) {s = 12;}


				input.Seek(index205_64);
				if (s >= 0) return s;
				break;
				case 42:
				int LA205_65 = input.LA(1);


				int index205_65 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred4_CSS3_fragment))) {s = 60;}

				else if ((true)) {s = 12;}


				input.Seek(index205_65);
				if (s >= 0) return s;
				break;
				case 43:
				int LA205_67 = input.LA(1);


				int index205_67 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred5_CSS3_fragment))) {s = 66;}

				else if ((true)) {s = 12;}


				input.Seek(index205_67);
				if (s >= 0) return s;
				break;
				case 44:
				int LA205_68 = input.LA(1);

				s = -1;
				if ((LA205_68=='n')) {s = 151;}

				else if ((LA205_68=='N')) {s = 152;}

				else if (((LA205_68>='\u0000' && LA205_68<='\t')||LA205_68=='\u000B'||(LA205_68>='\u000E' && LA205_68<='/')||(LA205_68>='1' && LA205_68<='3')||LA205_68=='5'||(LA205_68>='7' && LA205_68<='M')||(LA205_68>='O' && LA205_68<='m')||(LA205_68>='o' && LA205_68<='\uFFFF'))) {s = 12;}

				else if ((LA205_68=='0')) {s = 153;}

				else if ((LA205_68=='4'||LA205_68=='6')) {s = 154;}

				if (s >= 0) return s;
				break;
				case 45:
				int LA205_69 = input.LA(1);


				int index205_69 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred5_CSS3_fragment))) {s = 66;}

				else if ((true)) {s = 12;}


				input.Seek(index205_69);
				if (s >= 0) return s;
				break;
				case 46:
				int LA205_71 = input.LA(1);


				int index205_71 = input.Index;
				input.Rewind();
				s = -1;
				if (((LA205_71>='\t' && LA205_71<='\n')||(LA205_71>='\f' && LA205_71<='\r')||LA205_71==' ') && (EvaluatePredicate(synpred6_CSS3_fragment))) {s = 155;}

				else if ((LA205_71=='g')) {s = 156;}

				else if ((LA205_71=='\\')) {s = 157;}

				else if ((LA205_71=='G')) {s = 158;}

				else s = 12;


				input.Seek(index205_71);
				if (s >= 0) return s;
				break;
				case 47:
				int LA205_72 = input.LA(1);

				s = -1;
				if (((LA205_72>='\u0000' && LA205_72<='\t')||LA205_72=='\u000B'||(LA205_72>='\u000E' && LA205_72<='/')||(LA205_72>='1' && LA205_72<='3')||LA205_72=='5'||(LA205_72>='7' && LA205_72<='\uFFFF'))) {s = 12;}

				else if ((LA205_72=='0')) {s = 159;}

				else if ((LA205_72=='4'||LA205_72=='6')) {s = 160;}

				if (s >= 0) return s;
				break;
				case 48:
				int LA205_73 = input.LA(1);


				int index205_73 = input.Index;
				input.Rewind();
				s = -1;
				if (((LA205_73>='\t' && LA205_73<='\n')||(LA205_73>='\f' && LA205_73<='\r')||LA205_73==' ') && (EvaluatePredicate(synpred6_CSS3_fragment))) {s = 155;}

				else if ((LA205_73=='g')) {s = 156;}

				else if ((LA205_73=='\\')) {s = 157;}

				else if ((LA205_73=='G')) {s = 158;}

				else s = 12;


				input.Seek(index205_73);
				if (s >= 0) return s;
				break;
				case 49:
				int LA205_75 = input.LA(1);


				int index205_75 = input.Index;
				input.Rewind();
				s = -1;
				if (((LA205_75>='\t' && LA205_75<='\n')||(LA205_75>='\f' && LA205_75<='\r')||LA205_75==' ') && (EvaluatePredicate(synpred7_CSS3_fragment))) {s = 161;}

				else if ((LA205_75=='d')) {s = 162;}

				else if ((LA205_75=='\\')) {s = 163;}

				else if ((LA205_75=='D')) {s = 164;}

				else s = 12;


				input.Seek(index205_75);
				if (s >= 0) return s;
				break;
				case 50:
				int LA205_76 = input.LA(1);

				s = -1;
				if (((LA205_76>='\u0000' && LA205_76<='\t')||LA205_76=='\u000B'||(LA205_76>='\u000E' && LA205_76<='/')||(LA205_76>='1' && LA205_76<='3')||LA205_76=='5'||(LA205_76>='7' && LA205_76<='\uFFFF'))) {s = 12;}

				else if ((LA205_76=='0')) {s = 165;}

				else if ((LA205_76=='4'||LA205_76=='6')) {s = 166;}

				if (s >= 0) return s;
				break;
				case 51:
				int LA205_77 = input.LA(1);


				int index205_77 = input.Index;
				input.Rewind();
				s = -1;
				if (((LA205_77>='\t' && LA205_77<='\n')||(LA205_77>='\f' && LA205_77<='\r')||LA205_77==' ') && (EvaluatePredicate(synpred7_CSS3_fragment))) {s = 161;}

				else if ((LA205_77=='d')) {s = 162;}

				else if ((LA205_77=='\\')) {s = 163;}

				else if ((LA205_77=='D')) {s = 164;}

				else s = 12;


				input.Seek(index205_77);
				if (s >= 0) return s;
				break;
				case 52:
				int LA205_80 = input.LA(1);


				int index205_80 = input.Index;
				input.Rewind();
				s = -1;
				if (((LA205_80>='\t' && LA205_80<='\n')||(LA205_80>='\f' && LA205_80<='\r')||LA205_80==' ') && (EvaluatePredicate(synpred9_CSS3_fragment))) {s = 83;}

				else if ((LA205_80=='z')) {s = 84;}

				else if ((LA205_80=='\\')) {s = 85;}

				else if ((LA205_80=='Z')) {s = 86;}

				else s = 12;


				input.Seek(index205_80);
				if (s >= 0) return s;
				break;
				case 53:
				int LA205_81 = input.LA(1);

				s = -1;
				if ((LA205_81=='h')) {s = 167;}

				else if ((LA205_81=='H')) {s = 168;}

				else if (((LA205_81>='\u0000' && LA205_81<='\t')||LA205_81=='\u000B'||(LA205_81>='\u000E' && LA205_81<='/')||(LA205_81>='1' && LA205_81<='3')||LA205_81=='5'||(LA205_81>='7' && LA205_81<='G')||(LA205_81>='I' && LA205_81<='g')||(LA205_81>='i' && LA205_81<='\uFFFF'))) {s = 12;}

				else if ((LA205_81=='0')) {s = 169;}

				else if ((LA205_81=='4'||LA205_81=='6')) {s = 170;}

				if (s >= 0) return s;
				break;
				case 54:
				int LA205_82 = input.LA(1);


				int index205_82 = input.Index;
				input.Rewind();
				s = -1;
				if (((LA205_82>='\t' && LA205_82<='\n')||(LA205_82>='\f' && LA205_82<='\r')||LA205_82==' ') && (EvaluatePredicate(synpred9_CSS3_fragment))) {s = 83;}

				else if ((LA205_82=='z')) {s = 84;}

				else if ((LA205_82=='\\')) {s = 85;}

				else if ((LA205_82=='Z')) {s = 86;}

				else s = 12;


				input.Seek(index205_82);
				if (s >= 0) return s;
				break;
				case 55:
				int LA205_84 = input.LA(1);


				int index205_84 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred9_CSS3_fragment))) {s = 83;}

				else if ((true)) {s = 12;}


				input.Seek(index205_84);
				if (s >= 0) return s;
				break;
				case 56:
				int LA205_85 = input.LA(1);

				s = -1;
				if ((LA205_85=='z')) {s = 171;}

				else if ((LA205_85=='Z')) {s = 172;}

				else if (((LA205_85>='\u0000' && LA205_85<='\t')||LA205_85=='\u000B'||(LA205_85>='\u000E' && LA205_85<='/')||(LA205_85>='1' && LA205_85<='4')||LA205_85=='6'||(LA205_85>='8' && LA205_85<='Y')||(LA205_85>='[' && LA205_85<='y')||(LA205_85>='{' && LA205_85<='\uFFFF'))) {s = 12;}

				else if ((LA205_85=='0')) {s = 173;}

				else if ((LA205_85=='5'||LA205_85=='7')) {s = 174;}

				if (s >= 0) return s;
				break;
				case 57:
				int LA205_86 = input.LA(1);


				int index205_86 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred9_CSS3_fragment))) {s = 83;}

				else if ((true)) {s = 12;}


				input.Seek(index205_86);
				if (s >= 0) return s;
				break;
				case 58:
				int LA205_87 = input.LA(1);


				int index205_87 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred1_CSS3_fragment))) {s = 25;}

				else if ((true)) {s = 12;}


				input.Seek(index205_87);
				if (s >= 0) return s;
				break;
				case 59:
				int LA205_88 = input.LA(1);


				int index205_88 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred1_CSS3_fragment))) {s = 25;}

				else if ((true)) {s = 12;}


				input.Seek(index205_88);
				if (s >= 0) return s;
				break;
				case 60:
				int LA205_89 = input.LA(1);


				int index205_89 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred1_CSS3_fragment))) {s = 25;}

				else if ((true)) {s = 12;}


				input.Seek(index205_89);
				if (s >= 0) return s;
				break;
				case 61:
				int LA205_92 = input.LA(1);


				int index205_92 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred1_CSS3_fragment))) {s = 25;}

				else if ((true)) {s = 12;}


				input.Seek(index205_92);
				if (s >= 0) return s;
				break;
				case 62:
				int LA205_94 = input.LA(1);


				int index205_94 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred2_CSS3_fragment))) {s = 48;}

				else if ((true)) {s = 12;}


				input.Seek(index205_94);
				if (s >= 0) return s;
				break;
				case 63:
				int LA205_95 = input.LA(1);


				int index205_95 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred2_CSS3_fragment))) {s = 48;}

				else if ((true)) {s = 12;}


				input.Seek(index205_95);
				if (s >= 0) return s;
				break;
				case 64:
				int LA205_96 = input.LA(1);

				s = -1;
				if ((LA205_96=='x')) {s = 133;}

				else if ((LA205_96=='0')) {s = 181;}

				else if ((LA205_96=='X')) {s = 134;}

				else if ((LA205_96=='t')) {s = 135;}

				else if ((LA205_96=='5'||LA205_96=='7')) {s = 182;}

				else if ((LA205_96=='4'||LA205_96=='6')) {s = 183;}

				else if ((LA205_96=='T')) {s = 138;}

				else if (((LA205_96>='\u0000' && LA205_96<='\t')||LA205_96=='\u000B'||(LA205_96>='\u000E' && LA205_96<='/')||(LA205_96>='1' && LA205_96<='3')||(LA205_96>='8' && LA205_96<='S')||(LA205_96>='U' && LA205_96<='W')||(LA205_96>='Y' && LA205_96<='s')||(LA205_96>='u' && LA205_96<='w')||(LA205_96>='y' && LA205_96<='\uFFFF'))) {s = 12;}

				if (s >= 0) return s;
				break;
				case 65:
				int LA205_97 = input.LA(1);


				int index205_97 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred2_CSS3_fragment))) {s = 48;}

				else if ((true)) {s = 12;}


				input.Seek(index205_97);
				if (s >= 0) return s;
				break;
				case 66:
				int LA205_98 = input.LA(1);


				int index205_98 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred2_CSS3_fragment))) {s = 48;}

				else if ((true)) {s = 12;}


				input.Seek(index205_98);
				if (s >= 0) return s;
				break;
				case 67:
				int LA205_99 = input.LA(1);


				int index205_99 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred2_CSS3_fragment))) {s = 48;}

				else if ((true)) {s = 12;}


				input.Seek(index205_99);
				if (s >= 0) return s;
				break;
				case 68:
				int LA205_100 = input.LA(1);


				int index205_100 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred2_CSS3_fragment))) {s = 48;}

				else if ((true)) {s = 12;}


				input.Seek(index205_100);
				if (s >= 0) return s;
				break;
				case 69:
				int LA205_113 = input.LA(1);


				int index205_113 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred4_CSS3_fragment))) {s = 60;}

				else if ((true)) {s = 12;}


				input.Seek(index205_113);
				if (s >= 0) return s;
				break;
				case 70:
				int LA205_114 = input.LA(1);


				int index205_114 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred4_CSS3_fragment))) {s = 60;}

				else if ((true)) {s = 12;}


				input.Seek(index205_114);
				if (s >= 0) return s;
				break;
				case 71:
				int LA205_115 = input.LA(1);

				s = -1;
				if ((LA205_115=='m')) {s = 144;}

				else if ((LA205_115=='0')) {s = 201;}

				else if ((LA205_115=='M')) {s = 145;}

				else if ((LA205_115=='s')) {s = 146;}

				else if ((LA205_115=='4'||LA205_115=='6')) {s = 202;}

				else if ((LA205_115=='5'||LA205_115=='7')) {s = 203;}

				else if ((LA205_115=='S')) {s = 149;}

				else if (((LA205_115>='\u0000' && LA205_115<='\t')||LA205_115=='\u000B'||(LA205_115>='\u000E' && LA205_115<='/')||(LA205_115>='1' && LA205_115<='3')||(LA205_115>='8' && LA205_115<='L')||(LA205_115>='N' && LA205_115<='R')||(LA205_115>='T' && LA205_115<='l')||(LA205_115>='n' && LA205_115<='r')||(LA205_115>='t' && LA205_115<='\uFFFF'))) {s = 12;}

				if (s >= 0) return s;
				break;
				case 72:
				int LA205_116 = input.LA(1);


				int index205_116 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred4_CSS3_fragment))) {s = 60;}

				else if ((true)) {s = 12;}


				input.Seek(index205_116);
				if (s >= 0) return s;
				break;
				case 73:
				int LA205_117 = input.LA(1);


				int index205_117 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred4_CSS3_fragment))) {s = 60;}

				else if ((true)) {s = 12;}


				input.Seek(index205_117);
				if (s >= 0) return s;
				break;
				case 74:
				int LA205_120 = input.LA(1);


				int index205_120 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred8_CSS3_fragment))) {s = 78;}

				else if ((true)) {s = 12;}


				input.Seek(index205_120);
				if (s >= 0) return s;
				break;
				case 75:
				int LA205_121 = input.LA(1);


				int index205_121 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred5_CSS3_fragment))) {s = 66;}

				else if ((true)) {s = 12;}


				input.Seek(index205_121);
				if (s >= 0) return s;
				break;
				case 76:
				int LA205_122 = input.LA(1);


				int index205_122 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred5_CSS3_fragment))) {s = 66;}

				else if ((true)) {s = 12;}


				input.Seek(index205_122);
				if (s >= 0) return s;
				break;
				case 77:
				int LA205_123 = input.LA(1);

				s = -1;
				if ((LA205_123=='n')) {s = 151;}

				else if ((LA205_123=='0')) {s = 208;}

				else if ((LA205_123=='N')) {s = 152;}

				else if (((LA205_123>='\u0000' && LA205_123<='\t')||LA205_123=='\u000B'||(LA205_123>='\u000E' && LA205_123<='/')||(LA205_123>='1' && LA205_123<='3')||LA205_123=='5'||(LA205_123>='7' && LA205_123<='M')||(LA205_123>='O' && LA205_123<='m')||(LA205_123>='o' && LA205_123<='\uFFFF'))) {s = 12;}

				else if ((LA205_123=='4'||LA205_123=='6')) {s = 209;}

				if (s >= 0) return s;
				break;
				case 78:
				int LA205_124 = input.LA(1);


				int index205_124 = input.Index;
				input.Rewind();
				s = -1;
				if ((LA205_124=='d')) {s = 210;}

				else if ((LA205_124=='D')) {s = 211;}

				else if ((LA205_124=='\\')) {s = 212;}

				else if (((LA205_124>='\t' && LA205_124<='\n')||(LA205_124>='\f' && LA205_124<='\r')||LA205_124==' ') && (EvaluatePredicate(synpred7_CSS3_fragment))) {s = 161;}

				else s = 12;


				input.Seek(index205_124);
				if (s >= 0) return s;
				break;
				case 79:
				int LA205_125 = input.LA(1);


				int index205_125 = input.Index;
				input.Rewind();
				s = -1;
				if ((LA205_125=='d')) {s = 210;}

				else if ((LA205_125=='D')) {s = 211;}

				else if ((LA205_125=='\\')) {s = 212;}

				else if (((LA205_125>='\t' && LA205_125<='\n')||(LA205_125>='\f' && LA205_125<='\r')||LA205_125==' ') && (EvaluatePredicate(synpred7_CSS3_fragment))) {s = 161;}

				else s = 12;


				input.Seek(index205_125);
				if (s >= 0) return s;
				break;
				case 80:
				int LA205_126 = input.LA(1);

				s = -1;
				if (((LA205_126>='\u0000' && LA205_126<='\t')||LA205_126=='\u000B'||(LA205_126>='\u000E' && LA205_126<='/')||(LA205_126>='1' && LA205_126<='3')||LA205_126=='5'||(LA205_126>='7' && LA205_126<='\uFFFF'))) {s = 12;}

				else if ((LA205_126=='0')) {s = 213;}

				else if ((LA205_126=='4'||LA205_126=='6')) {s = 214;}

				if (s >= 0) return s;
				break;
				case 81:
				int LA205_127 = input.LA(1);


				int index205_127 = input.Index;
				input.Rewind();
				s = -1;
				if ((LA205_127=='z')) {s = 130;}

				else if ((LA205_127=='Z')) {s = 131;}

				else if ((LA205_127=='\\')) {s = 132;}

				else if (((LA205_127>='\t' && LA205_127<='\n')||(LA205_127>='\f' && LA205_127<='\r')||LA205_127==' ') && (EvaluatePredicate(synpred9_CSS3_fragment))) {s = 83;}

				else s = 12;


				input.Seek(index205_127);
				if (s >= 0) return s;
				break;
				case 82:
				int LA205_128 = input.LA(1);


				int index205_128 = input.Index;
				input.Rewind();
				s = -1;
				if ((LA205_128=='z')) {s = 130;}

				else if ((LA205_128=='Z')) {s = 131;}

				else if ((LA205_128=='\\')) {s = 132;}

				else if (((LA205_128>='\t' && LA205_128<='\n')||(LA205_128>='\f' && LA205_128<='\r')||LA205_128==' ') && (EvaluatePredicate(synpred9_CSS3_fragment))) {s = 83;}

				else s = 12;


				input.Seek(index205_128);
				if (s >= 0) return s;
				break;
				case 83:
				int LA205_129 = input.LA(1);

				s = -1;
				if ((LA205_129=='h')) {s = 167;}

				else if ((LA205_129=='0')) {s = 215;}

				else if ((LA205_129=='H')) {s = 168;}

				else if (((LA205_129>='\u0000' && LA205_129<='\t')||LA205_129=='\u000B'||(LA205_129>='\u000E' && LA205_129<='/')||(LA205_129>='1' && LA205_129<='3')||LA205_129=='5'||(LA205_129>='7' && LA205_129<='G')||(LA205_129>='I' && LA205_129<='g')||(LA205_129>='i' && LA205_129<='\uFFFF'))) {s = 12;}

				else if ((LA205_129=='4'||LA205_129=='6')) {s = 216;}

				if (s >= 0) return s;
				break;
				case 84:
				int LA205_130 = input.LA(1);


				int index205_130 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred9_CSS3_fragment))) {s = 83;}

				else if ((true)) {s = 12;}


				input.Seek(index205_130);
				if (s >= 0) return s;
				break;
				case 85:
				int LA205_131 = input.LA(1);


				int index205_131 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred9_CSS3_fragment))) {s = 83;}

				else if ((true)) {s = 12;}


				input.Seek(index205_131);
				if (s >= 0) return s;
				break;
				case 86:
				int LA205_132 = input.LA(1);

				s = -1;
				if ((LA205_132=='z')) {s = 171;}

				else if ((LA205_132=='0')) {s = 217;}

				else if ((LA205_132=='Z')) {s = 172;}

				else if (((LA205_132>='\u0000' && LA205_132<='\t')||LA205_132=='\u000B'||(LA205_132>='\u000E' && LA205_132<='/')||(LA205_132>='1' && LA205_132<='4')||LA205_132=='6'||(LA205_132>='8' && LA205_132<='Y')||(LA205_132>='[' && LA205_132<='y')||(LA205_132>='{' && LA205_132<='\uFFFF'))) {s = 12;}

				else if ((LA205_132=='5'||LA205_132=='7')) {s = 218;}

				if (s >= 0) return s;
				break;
				case 87:
				int LA205_133 = input.LA(1);


				int index205_133 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred2_CSS3_fragment))) {s = 48;}

				else if ((true)) {s = 12;}


				input.Seek(index205_133);
				if (s >= 0) return s;
				break;
				case 88:
				int LA205_134 = input.LA(1);


				int index205_134 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred2_CSS3_fragment))) {s = 48;}

				else if ((true)) {s = 12;}


				input.Seek(index205_134);
				if (s >= 0) return s;
				break;
				case 89:
				int LA205_135 = input.LA(1);


				int index205_135 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred2_CSS3_fragment))) {s = 48;}

				else if ((true)) {s = 12;}


				input.Seek(index205_135);
				if (s >= 0) return s;
				break;
				case 90:
				int LA205_138 = input.LA(1);


				int index205_138 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred2_CSS3_fragment))) {s = 48;}

				else if ((true)) {s = 12;}


				input.Seek(index205_138);
				if (s >= 0) return s;
				break;
				case 91:
				int LA205_140 = input.LA(1);


				int index205_140 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred3_CSS3_fragment))) {s = 56;}

				else if ((true)) {s = 12;}


				input.Seek(index205_140);
				if (s >= 0) return s;
				break;
				case 92:
				int LA205_141 = input.LA(1);


				int index205_141 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred3_CSS3_fragment))) {s = 56;}

				else if ((true)) {s = 12;}


				input.Seek(index205_141);
				if (s >= 0) return s;
				break;
				case 93:
				int LA205_144 = input.LA(1);


				int index205_144 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred4_CSS3_fragment))) {s = 60;}

				else if ((true)) {s = 12;}


				input.Seek(index205_144);
				if (s >= 0) return s;
				break;
				case 94:
				int LA205_145 = input.LA(1);


				int index205_145 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred4_CSS3_fragment))) {s = 60;}

				else if ((true)) {s = 12;}


				input.Seek(index205_145);
				if (s >= 0) return s;
				break;
				case 95:
				int LA205_146 = input.LA(1);


				int index205_146 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred4_CSS3_fragment))) {s = 60;}

				else if ((true)) {s = 12;}


				input.Seek(index205_146);
				if (s >= 0) return s;
				break;
				case 96:
				int LA205_149 = input.LA(1);


				int index205_149 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred4_CSS3_fragment))) {s = 60;}

				else if ((true)) {s = 12;}


				input.Seek(index205_149);
				if (s >= 0) return s;
				break;
				case 97:
				int LA205_151 = input.LA(1);


				int index205_151 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred5_CSS3_fragment))) {s = 66;}

				else if ((true)) {s = 12;}


				input.Seek(index205_151);
				if (s >= 0) return s;
				break;
				case 98:
				int LA205_152 = input.LA(1);


				int index205_152 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred5_CSS3_fragment))) {s = 66;}

				else if ((true)) {s = 12;}


				input.Seek(index205_152);
				if (s >= 0) return s;
				break;
				case 99:
				int LA205_156 = input.LA(1);


				int index205_156 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred6_CSS3_fragment))) {s = 155;}

				else if ((true)) {s = 12;}


				input.Seek(index205_156);
				if (s >= 0) return s;
				break;
				case 100:
				int LA205_157 = input.LA(1);

				s = -1;
				if ((LA205_157=='g')) {s = 239;}

				else if ((LA205_157=='G')) {s = 240;}

				else if (((LA205_157>='\u0000' && LA205_157<='\t')||LA205_157=='\u000B'||(LA205_157>='\u000E' && LA205_157<='/')||(LA205_157>='1' && LA205_157<='3')||LA205_157=='5'||(LA205_157>='7' && LA205_157<='F')||(LA205_157>='H' && LA205_157<='f')||(LA205_157>='h' && LA205_157<='\uFFFF'))) {s = 12;}

				else if ((LA205_157=='0')) {s = 241;}

				else if ((LA205_157=='4'||LA205_157=='6')) {s = 242;}

				if (s >= 0) return s;
				break;
				case 101:
				int LA205_158 = input.LA(1);


				int index205_158 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred6_CSS3_fragment))) {s = 155;}

				else if ((true)) {s = 12;}


				input.Seek(index205_158);
				if (s >= 0) return s;
				break;
				case 102:
				int LA205_162 = input.LA(1);


				int index205_162 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_CSS3_fragment))) {s = 161;}

				else if ((true)) {s = 12;}


				input.Seek(index205_162);
				if (s >= 0) return s;
				break;
				case 103:
				int LA205_163 = input.LA(1);

				s = -1;
				if (((LA205_163>='\u0000' && LA205_163<='\t')||LA205_163=='\u000B'||(LA205_163>='\u000E' && LA205_163<='/')||(LA205_163>='1' && LA205_163<='3')||LA205_163=='5'||(LA205_163>='7' && LA205_163<='\uFFFF'))) {s = 12;}

				else if ((LA205_163=='0')) {s = 246;}

				else if ((LA205_163=='4'||LA205_163=='6')) {s = 247;}

				if (s >= 0) return s;
				break;
				case 104:
				int LA205_164 = input.LA(1);


				int index205_164 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_CSS3_fragment))) {s = 161;}

				else if ((true)) {s = 12;}


				input.Seek(index205_164);
				if (s >= 0) return s;
				break;
				case 105:
				int LA205_171 = input.LA(1);


				int index205_171 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred9_CSS3_fragment))) {s = 83;}

				else if ((true)) {s = 12;}


				input.Seek(index205_171);
				if (s >= 0) return s;
				break;
				case 106:
				int LA205_172 = input.LA(1);


				int index205_172 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred9_CSS3_fragment))) {s = 83;}

				else if ((true)) {s = 12;}


				input.Seek(index205_172);
				if (s >= 0) return s;
				break;
				case 107:
				int LA205_178 = input.LA(1);


				int index205_178 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred1_CSS3_fragment))) {s = 25;}

				else if ((true)) {s = 12;}


				input.Seek(index205_178);
				if (s >= 0) return s;
				break;
				case 108:
				int LA205_179 = input.LA(1);


				int index205_179 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred1_CSS3_fragment))) {s = 25;}

				else if ((true)) {s = 12;}


				input.Seek(index205_179);
				if (s >= 0) return s;
				break;
				case 109:
				int LA205_180 = input.LA(1);


				int index205_180 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred1_CSS3_fragment))) {s = 25;}

				else if ((true)) {s = 12;}


				input.Seek(index205_180);
				if (s >= 0) return s;
				break;
				case 110:
				int LA205_198 = input.LA(1);


				int index205_198 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred8_CSS3_fragment))) {s = 78;}

				else if ((true)) {s = 12;}


				input.Seek(index205_198);
				if (s >= 0) return s;
				break;
				case 111:
				int LA205_204 = input.LA(1);


				int index205_204 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred2_CSS3_fragment))) {s = 48;}

				else if ((true)) {s = 12;}


				input.Seek(index205_204);
				if (s >= 0) return s;
				break;
				case 112:
				int LA205_205 = input.LA(1);


				int index205_205 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred2_CSS3_fragment))) {s = 48;}

				else if ((true)) {s = 12;}


				input.Seek(index205_205);
				if (s >= 0) return s;
				break;
				case 113:
				int LA205_210 = input.LA(1);


				int index205_210 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_CSS3_fragment))) {s = 161;}

				else if ((true)) {s = 12;}


				input.Seek(index205_210);
				if (s >= 0) return s;
				break;
				case 114:
				int LA205_211 = input.LA(1);


				int index205_211 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_CSS3_fragment))) {s = 161;}

				else if ((true)) {s = 12;}


				input.Seek(index205_211);
				if (s >= 0) return s;
				break;
				case 115:
				int LA205_212 = input.LA(1);

				s = -1;
				if (((LA205_212>='\u0000' && LA205_212<='\t')||LA205_212=='\u000B'||(LA205_212>='\u000E' && LA205_212<='/')||(LA205_212>='1' && LA205_212<='3')||LA205_212=='5'||(LA205_212>='7' && LA205_212<='\uFFFF'))) {s = 12;}

				else if ((LA205_212=='0')) {s = 300;}

				else if ((LA205_212=='4'||LA205_212=='6')) {s = 301;}

				if (s >= 0) return s;
				break;
				case 116:
				int LA205_222 = input.LA(1);


				int index205_222 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred2_CSS3_fragment))) {s = 48;}

				else if ((true)) {s = 12;}


				input.Seek(index205_222);
				if (s >= 0) return s;
				break;
				case 117:
				int LA205_223 = input.LA(1);


				int index205_223 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred2_CSS3_fragment))) {s = 48;}

				else if ((true)) {s = 12;}


				input.Seek(index205_223);
				if (s >= 0) return s;
				break;
				case 118:
				int LA205_224 = input.LA(1);


				int index205_224 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred2_CSS3_fragment))) {s = 48;}

				else if ((true)) {s = 12;}


				input.Seek(index205_224);
				if (s >= 0) return s;
				break;
				case 119:
				int LA205_227 = input.LA(1);


				int index205_227 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred3_CSS3_fragment))) {s = 56;}

				else if ((true)) {s = 12;}


				input.Seek(index205_227);
				if (s >= 0) return s;
				break;
				case 120:
				int LA205_228 = input.LA(1);


				int index205_228 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred3_CSS3_fragment))) {s = 56;}

				else if ((true)) {s = 12;}


				input.Seek(index205_228);
				if (s >= 0) return s;
				break;
				case 121:
				int LA205_232 = input.LA(1);


				int index205_232 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred4_CSS3_fragment))) {s = 60;}

				else if ((true)) {s = 12;}


				input.Seek(index205_232);
				if (s >= 0) return s;
				break;
				case 122:
				int LA205_233 = input.LA(1);


				int index205_233 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred4_CSS3_fragment))) {s = 60;}

				else if ((true)) {s = 12;}


				input.Seek(index205_233);
				if (s >= 0) return s;
				break;
				case 123:
				int LA205_234 = input.LA(1);


				int index205_234 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred4_CSS3_fragment))) {s = 60;}

				else if ((true)) {s = 12;}


				input.Seek(index205_234);
				if (s >= 0) return s;
				break;
				case 124:
				int LA205_237 = input.LA(1);


				int index205_237 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred5_CSS3_fragment))) {s = 66;}

				else if ((true)) {s = 12;}


				input.Seek(index205_237);
				if (s >= 0) return s;
				break;
				case 125:
				int LA205_238 = input.LA(1);


				int index205_238 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred5_CSS3_fragment))) {s = 66;}

				else if ((true)) {s = 12;}


				input.Seek(index205_238);
				if (s >= 0) return s;
				break;
				case 126:
				int LA205_239 = input.LA(1);


				int index205_239 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred6_CSS3_fragment))) {s = 155;}

				else if ((true)) {s = 12;}


				input.Seek(index205_239);
				if (s >= 0) return s;
				break;
				case 127:
				int LA205_240 = input.LA(1);


				int index205_240 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred6_CSS3_fragment))) {s = 155;}

				else if ((true)) {s = 12;}


				input.Seek(index205_240);
				if (s >= 0) return s;
				break;
				case 128:
				int LA205_256 = input.LA(1);


				int index205_256 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred9_CSS3_fragment))) {s = 83;}

				else if ((true)) {s = 12;}


				input.Seek(index205_256);
				if (s >= 0) return s;
				break;
				case 129:
				int LA205_257 = input.LA(1);


				int index205_257 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred9_CSS3_fragment))) {s = 83;}

				else if ((true)) {s = 12;}


				input.Seek(index205_257);
				if (s >= 0) return s;
				break;
				case 130:
				int LA205_261 = input.LA(1);


				int index205_261 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred1_CSS3_fragment))) {s = 25;}

				else if ((true)) {s = 12;}


				input.Seek(index205_261);
				if (s >= 0) return s;
				break;
				case 131:
				int LA205_262 = input.LA(1);


				int index205_262 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred1_CSS3_fragment))) {s = 25;}

				else if ((true)) {s = 12;}


				input.Seek(index205_262);
				if (s >= 0) return s;
				break;
				case 132:
				int LA205_263 = input.LA(1);


				int index205_263 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred1_CSS3_fragment))) {s = 25;}

				else if ((true)) {s = 12;}


				input.Seek(index205_263);
				if (s >= 0) return s;
				break;
				case 133:
				int LA205_267 = input.LA(1);


				int index205_267 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred2_CSS3_fragment))) {s = 48;}

				else if ((true)) {s = 12;}


				input.Seek(index205_267);
				if (s >= 0) return s;
				break;
				case 134:
				int LA205_268 = input.LA(1);


				int index205_268 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred2_CSS3_fragment))) {s = 48;}

				else if ((true)) {s = 12;}


				input.Seek(index205_268);
				if (s >= 0) return s;
				break;
				case 135:
				int LA205_283 = input.LA(1);


				int index205_283 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred8_CSS3_fragment))) {s = 78;}

				else if ((true)) {s = 12;}


				input.Seek(index205_283);
				if (s >= 0) return s;
				break;
				case 136:
				int LA205_286 = input.LA(1);


				int index205_286 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred2_CSS3_fragment))) {s = 48;}

				else if ((true)) {s = 12;}


				input.Seek(index205_286);
				if (s >= 0) return s;
				break;
				case 137:
				int LA205_287 = input.LA(1);


				int index205_287 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred2_CSS3_fragment))) {s = 48;}

				else if ((true)) {s = 12;}


				input.Seek(index205_287);
				if (s >= 0) return s;
				break;
				case 138:
				int LA205_294 = input.LA(1);


				int index205_294 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred4_CSS3_fragment))) {s = 60;}

				else if ((true)) {s = 12;}


				input.Seek(index205_294);
				if (s >= 0) return s;
				break;
				case 139:
				int LA205_296 = input.LA(1);


				int index205_296 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_CSS3_fragment))) {s = 161;}

				else if ((true)) {s = 12;}


				input.Seek(index205_296);
				if (s >= 0) return s;
				break;
				case 140:
				int LA205_297 = input.LA(1);


				int index205_297 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_CSS3_fragment))) {s = 161;}

				else if ((true)) {s = 12;}


				input.Seek(index205_297);
				if (s >= 0) return s;
				break;
				case 141:
				int LA205_311 = input.LA(1);


				int index205_311 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred2_CSS3_fragment))) {s = 48;}

				else if ((true)) {s = 12;}


				input.Seek(index205_311);
				if (s >= 0) return s;
				break;
				case 142:
				int LA205_312 = input.LA(1);


				int index205_312 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred2_CSS3_fragment))) {s = 48;}

				else if ((true)) {s = 12;}


				input.Seek(index205_312);
				if (s >= 0) return s;
				break;
				case 143:
				int LA205_313 = input.LA(1);


				int index205_313 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred2_CSS3_fragment))) {s = 48;}

				else if ((true)) {s = 12;}


				input.Seek(index205_313);
				if (s >= 0) return s;
				break;
				case 144:
				int LA205_316 = input.LA(1);


				int index205_316 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred3_CSS3_fragment))) {s = 56;}

				else if ((true)) {s = 12;}


				input.Seek(index205_316);
				if (s >= 0) return s;
				break;
				case 145:
				int LA205_317 = input.LA(1);


				int index205_317 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred3_CSS3_fragment))) {s = 56;}

				else if ((true)) {s = 12;}


				input.Seek(index205_317);
				if (s >= 0) return s;
				break;
				case 146:
				int LA205_321 = input.LA(1);


				int index205_321 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred4_CSS3_fragment))) {s = 60;}

				else if ((true)) {s = 12;}


				input.Seek(index205_321);
				if (s >= 0) return s;
				break;
				case 147:
				int LA205_322 = input.LA(1);


				int index205_322 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred4_CSS3_fragment))) {s = 60;}

				else if ((true)) {s = 12;}


				input.Seek(index205_322);
				if (s >= 0) return s;
				break;
				case 148:
				int LA205_323 = input.LA(1);


				int index205_323 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred4_CSS3_fragment))) {s = 60;}

				else if ((true)) {s = 12;}


				input.Seek(index205_323);
				if (s >= 0) return s;
				break;
				case 149:
				int LA205_326 = input.LA(1);


				int index205_326 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred5_CSS3_fragment))) {s = 66;}

				else if ((true)) {s = 12;}


				input.Seek(index205_326);
				if (s >= 0) return s;
				break;
				case 150:
				int LA205_327 = input.LA(1);


				int index205_327 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred5_CSS3_fragment))) {s = 66;}

				else if ((true)) {s = 12;}


				input.Seek(index205_327);
				if (s >= 0) return s;
				break;
				case 151:
				int LA205_330 = input.LA(1);


				int index205_330 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred6_CSS3_fragment))) {s = 155;}

				else if ((true)) {s = 12;}


				input.Seek(index205_330);
				if (s >= 0) return s;
				break;
				case 152:
				int LA205_336 = input.LA(1);


				int index205_336 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_CSS3_fragment))) {s = 161;}

				else if ((true)) {s = 12;}


				input.Seek(index205_336);
				if (s >= 0) return s;
				break;
				case 153:
				int LA205_340 = input.LA(1);


				int index205_340 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_CSS3_fragment))) {s = 161;}

				else if ((true)) {s = 12;}


				input.Seek(index205_340);
				if (s >= 0) return s;
				break;
				case 154:
				int LA205_341 = input.LA(1);


				int index205_341 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_CSS3_fragment))) {s = 161;}

				else if ((true)) {s = 12;}


				input.Seek(index205_341);
				if (s >= 0) return s;
				break;
				case 155:
				int LA205_347 = input.LA(1);


				int index205_347 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred9_CSS3_fragment))) {s = 83;}

				else if ((true)) {s = 12;}


				input.Seek(index205_347);
				if (s >= 0) return s;
				break;
				case 156:
				int LA205_348 = input.LA(1);


				int index205_348 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred9_CSS3_fragment))) {s = 83;}

				else if ((true)) {s = 12;}


				input.Seek(index205_348);
				if (s >= 0) return s;
				break;
				case 157:
				int LA205_352 = input.LA(1);


				int index205_352 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred1_CSS3_fragment))) {s = 25;}

				else if ((true)) {s = 12;}


				input.Seek(index205_352);
				if (s >= 0) return s;
				break;
				case 158:
				int LA205_353 = input.LA(1);


				int index205_353 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred1_CSS3_fragment))) {s = 25;}

				else if ((true)) {s = 12;}


				input.Seek(index205_353);
				if (s >= 0) return s;
				break;
				case 159:
				int LA205_354 = input.LA(1);


				int index205_354 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred1_CSS3_fragment))) {s = 25;}

				else if ((true)) {s = 12;}


				input.Seek(index205_354);
				if (s >= 0) return s;
				break;
				case 160:
				int LA205_358 = input.LA(1);


				int index205_358 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred2_CSS3_fragment))) {s = 48;}

				else if ((true)) {s = 12;}


				input.Seek(index205_358);
				if (s >= 0) return s;
				break;
				case 161:
				int LA205_359 = input.LA(1);


				int index205_359 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred2_CSS3_fragment))) {s = 48;}

				else if ((true)) {s = 12;}


				input.Seek(index205_359);
				if (s >= 0) return s;
				break;
				case 162:
				int LA205_373 = input.LA(1);


				int index205_373 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred8_CSS3_fragment))) {s = 78;}

				else if ((true)) {s = 12;}


				input.Seek(index205_373);
				if (s >= 0) return s;
				break;
				case 163:
				int LA205_376 = input.LA(1);


				int index205_376 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred2_CSS3_fragment))) {s = 48;}

				else if ((true)) {s = 12;}


				input.Seek(index205_376);
				if (s >= 0) return s;
				break;
				case 164:
				int LA205_377 = input.LA(1);


				int index205_377 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred2_CSS3_fragment))) {s = 48;}

				else if ((true)) {s = 12;}


				input.Seek(index205_377);
				if (s >= 0) return s;
				break;
				case 165:
				int LA205_380 = input.LA(1);


				int index205_380 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_CSS3_fragment))) {s = 161;}

				else if ((true)) {s = 12;}


				input.Seek(index205_380);
				if (s >= 0) return s;
				break;
				case 166:
				int LA205_381 = input.LA(1);


				int index205_381 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_CSS3_fragment))) {s = 161;}

				else if ((true)) {s = 12;}


				input.Seek(index205_381);
				if (s >= 0) return s;
				break;
				case 167:
				int LA205_385 = input.LA(1);


				int index205_385 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred4_CSS3_fragment))) {s = 60;}

				else if ((true)) {s = 12;}


				input.Seek(index205_385);
				if (s >= 0) return s;
				break;
				case 168:
				int LA205_399 = input.LA(1);


				int index205_399 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred2_CSS3_fragment))) {s = 48;}

				else if ((true)) {s = 12;}


				input.Seek(index205_399);
				if (s >= 0) return s;
				break;
				case 169:
				int LA205_400 = input.LA(1);


				int index205_400 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred2_CSS3_fragment))) {s = 48;}

				else if ((true)) {s = 12;}


				input.Seek(index205_400);
				if (s >= 0) return s;
				break;
				case 170:
				int LA205_401 = input.LA(1);


				int index205_401 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred2_CSS3_fragment))) {s = 48;}

				else if ((true)) {s = 12;}


				input.Seek(index205_401);
				if (s >= 0) return s;
				break;
				case 171:
				int LA205_404 = input.LA(1);


				int index205_404 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred3_CSS3_fragment))) {s = 56;}

				else if ((true)) {s = 12;}


				input.Seek(index205_404);
				if (s >= 0) return s;
				break;
				case 172:
				int LA205_405 = input.LA(1);


				int index205_405 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred3_CSS3_fragment))) {s = 56;}

				else if ((true)) {s = 12;}


				input.Seek(index205_405);
				if (s >= 0) return s;
				break;
				case 173:
				int LA205_409 = input.LA(1);


				int index205_409 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred4_CSS3_fragment))) {s = 60;}

				else if ((true)) {s = 12;}


				input.Seek(index205_409);
				if (s >= 0) return s;
				break;
				case 174:
				int LA205_410 = input.LA(1);


				int index205_410 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred4_CSS3_fragment))) {s = 60;}

				else if ((true)) {s = 12;}


				input.Seek(index205_410);
				if (s >= 0) return s;
				break;
				case 175:
				int LA205_411 = input.LA(1);


				int index205_411 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred4_CSS3_fragment))) {s = 60;}

				else if ((true)) {s = 12;}


				input.Seek(index205_411);
				if (s >= 0) return s;
				break;
				case 176:
				int LA205_414 = input.LA(1);


				int index205_414 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred5_CSS3_fragment))) {s = 66;}

				else if ((true)) {s = 12;}


				input.Seek(index205_414);
				if (s >= 0) return s;
				break;
				case 177:
				int LA205_415 = input.LA(1);


				int index205_415 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred5_CSS3_fragment))) {s = 66;}

				else if ((true)) {s = 12;}


				input.Seek(index205_415);
				if (s >= 0) return s;
				break;
				case 178:
				int LA205_418 = input.LA(1);


				int index205_418 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred6_CSS3_fragment))) {s = 155;}

				else if ((true)) {s = 12;}


				input.Seek(index205_418);
				if (s >= 0) return s;
				break;
				case 179:
				int LA205_424 = input.LA(1);


				int index205_424 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_CSS3_fragment))) {s = 161;}

				else if ((true)) {s = 12;}


				input.Seek(index205_424);
				if (s >= 0) return s;
				break;
				case 180:
				int LA205_428 = input.LA(1);


				int index205_428 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_CSS3_fragment))) {s = 161;}

				else if ((true)) {s = 12;}


				input.Seek(index205_428);
				if (s >= 0) return s;
				break;
				case 181:
				int LA205_429 = input.LA(1);


				int index205_429 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_CSS3_fragment))) {s = 161;}

				else if ((true)) {s = 12;}


				input.Seek(index205_429);
				if (s >= 0) return s;
				break;
				case 182:
				int LA205_435 = input.LA(1);


				int index205_435 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred9_CSS3_fragment))) {s = 83;}

				else if ((true)) {s = 12;}


				input.Seek(index205_435);
				if (s >= 0) return s;
				break;
				case 183:
				int LA205_436 = input.LA(1);


				int index205_436 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred9_CSS3_fragment))) {s = 83;}

				else if ((true)) {s = 12;}


				input.Seek(index205_436);
				if (s >= 0) return s;
				break;
				case 184:
				int LA205_439 = input.LA(1);


				int index205_439 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred1_CSS3_fragment))) {s = 25;}

				else if ((true)) {s = 12;}


				input.Seek(index205_439);
				if (s >= 0) return s;
				break;
				case 185:
				int LA205_440 = input.LA(1);


				int index205_440 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred1_CSS3_fragment))) {s = 25;}

				else if ((true)) {s = 12;}


				input.Seek(index205_440);
				if (s >= 0) return s;
				break;
				case 186:
				int LA205_441 = input.LA(1);


				int index205_441 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred1_CSS3_fragment))) {s = 25;}

				else if ((true)) {s = 12;}


				input.Seek(index205_441);
				if (s >= 0) return s;
				break;
				case 187:
				int LA205_445 = input.LA(1);


				int index205_445 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred2_CSS3_fragment))) {s = 48;}

				else if ((true)) {s = 12;}


				input.Seek(index205_445);
				if (s >= 0) return s;
				break;
				case 188:
				int LA205_446 = input.LA(1);


				int index205_446 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred2_CSS3_fragment))) {s = 48;}

				else if ((true)) {s = 12;}


				input.Seek(index205_446);
				if (s >= 0) return s;
				break;
				case 189:
				int LA205_458 = input.LA(1);


				int index205_458 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred8_CSS3_fragment))) {s = 78;}

				else if ((true)) {s = 12;}


				input.Seek(index205_458);
				if (s >= 0) return s;
				break;
				case 190:
				int LA205_461 = input.LA(1);


				int index205_461 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred2_CSS3_fragment))) {s = 48;}

				else if ((true)) {s = 12;}


				input.Seek(index205_461);
				if (s >= 0) return s;
				break;
				case 191:
				int LA205_462 = input.LA(1);


				int index205_462 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred2_CSS3_fragment))) {s = 48;}

				else if ((true)) {s = 12;}


				input.Seek(index205_462);
				if (s >= 0) return s;
				break;
				case 192:
				int LA205_465 = input.LA(1);


				int index205_465 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_CSS3_fragment))) {s = 161;}

				else if ((true)) {s = 12;}


				input.Seek(index205_465);
				if (s >= 0) return s;
				break;
				case 193:
				int LA205_466 = input.LA(1);


				int index205_466 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_CSS3_fragment))) {s = 161;}

				else if ((true)) {s = 12;}


				input.Seek(index205_466);
				if (s >= 0) return s;
				break;
				case 194:
				int LA205_470 = input.LA(1);


				int index205_470 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred4_CSS3_fragment))) {s = 60;}

				else if ((true)) {s = 12;}


				input.Seek(index205_470);
				if (s >= 0) return s;
				break;
				case 195:
				int LA205_483 = input.LA(1);


				int index205_483 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred2_CSS3_fragment))) {s = 48;}

				else if ((true)) {s = 12;}


				input.Seek(index205_483);
				if (s >= 0) return s;
				break;
				case 196:
				int LA205_484 = input.LA(1);


				int index205_484 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred2_CSS3_fragment))) {s = 48;}

				else if ((true)) {s = 12;}


				input.Seek(index205_484);
				if (s >= 0) return s;
				break;
				case 197:
				int LA205_485 = input.LA(1);


				int index205_485 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred2_CSS3_fragment))) {s = 48;}

				else if ((true)) {s = 12;}


				input.Seek(index205_485);
				if (s >= 0) return s;
				break;
				case 198:
				int LA205_487 = input.LA(1);


				int index205_487 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred3_CSS3_fragment))) {s = 56;}

				else if ((true)) {s = 12;}


				input.Seek(index205_487);
				if (s >= 0) return s;
				break;
				case 199:
				int LA205_488 = input.LA(1);


				int index205_488 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred3_CSS3_fragment))) {s = 56;}

				else if ((true)) {s = 12;}


				input.Seek(index205_488);
				if (s >= 0) return s;
				break;
				case 200:
				int LA205_491 = input.LA(1);


				int index205_491 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred4_CSS3_fragment))) {s = 60;}

				else if ((true)) {s = 12;}


				input.Seek(index205_491);
				if (s >= 0) return s;
				break;
				case 201:
				int LA205_492 = input.LA(1);


				int index205_492 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred4_CSS3_fragment))) {s = 60;}

				else if ((true)) {s = 12;}


				input.Seek(index205_492);
				if (s >= 0) return s;
				break;
				case 202:
				int LA205_493 = input.LA(1);


				int index205_493 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred4_CSS3_fragment))) {s = 60;}

				else if ((true)) {s = 12;}


				input.Seek(index205_493);
				if (s >= 0) return s;
				break;
				case 203:
				int LA205_495 = input.LA(1);


				int index205_495 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred5_CSS3_fragment))) {s = 66;}

				else if ((true)) {s = 12;}


				input.Seek(index205_495);
				if (s >= 0) return s;
				break;
				case 204:
				int LA205_496 = input.LA(1);


				int index205_496 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred5_CSS3_fragment))) {s = 66;}

				else if ((true)) {s = 12;}


				input.Seek(index205_496);
				if (s >= 0) return s;
				break;
				case 205:
				int LA205_499 = input.LA(1);


				int index205_499 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred6_CSS3_fragment))) {s = 155;}

				else if ((true)) {s = 12;}


				input.Seek(index205_499);
				if (s >= 0) return s;
				break;
				case 206:
				int LA205_504 = input.LA(1);


				int index205_504 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_CSS3_fragment))) {s = 161;}

				else if ((true)) {s = 12;}


				input.Seek(index205_504);
				if (s >= 0) return s;
				break;
				case 207:
				int LA205_507 = input.LA(1);


				int index205_507 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_CSS3_fragment))) {s = 161;}

				else if ((true)) {s = 12;}


				input.Seek(index205_507);
				if (s >= 0) return s;
				break;
				case 208:
				int LA205_508 = input.LA(1);


				int index205_508 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_CSS3_fragment))) {s = 161;}

				else if ((true)) {s = 12;}


				input.Seek(index205_508);
				if (s >= 0) return s;
				break;
				case 209:
				int LA205_512 = input.LA(1);


				int index205_512 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred9_CSS3_fragment))) {s = 83;}

				else if ((true)) {s = 12;}


				input.Seek(index205_512);
				if (s >= 0) return s;
				break;
				case 210:
				int LA205_513 = input.LA(1);


				int index205_513 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred9_CSS3_fragment))) {s = 83;}

				else if ((true)) {s = 12;}


				input.Seek(index205_513);
				if (s >= 0) return s;
				break;
				case 211:
				int LA205_514 = input.LA(1);


				int index205_514 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred1_CSS3_fragment))) {s = 25;}

				else if ((true)) {s = 12;}


				input.Seek(index205_514);
				if (s >= 0) return s;
				break;
				case 212:
				int LA205_515 = input.LA(1);


				int index205_515 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred1_CSS3_fragment))) {s = 25;}

				else if ((true)) {s = 12;}


				input.Seek(index205_515);
				if (s >= 0) return s;
				break;
				case 213:
				int LA205_516 = input.LA(1);


				int index205_516 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred1_CSS3_fragment))) {s = 25;}

				else if ((true)) {s = 12;}


				input.Seek(index205_516);
				if (s >= 0) return s;
				break;
				case 214:
				int LA205_519 = input.LA(1);


				int index205_519 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred2_CSS3_fragment))) {s = 48;}

				else if ((true)) {s = 12;}


				input.Seek(index205_519);
				if (s >= 0) return s;
				break;
				case 215:
				int LA205_520 = input.LA(1);


				int index205_520 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred2_CSS3_fragment))) {s = 48;}

				else if ((true)) {s = 12;}


				input.Seek(index205_520);
				if (s >= 0) return s;
				break;
				case 216:
				int LA205_523 = input.LA(1);


				int index205_523 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred4_CSS3_fragment))) {s = 60;}

				else if ((true)) {s = 12;}


				input.Seek(index205_523);
				if (s >= 0) return s;
				break;
				case 217:
				int LA205_530 = input.LA(1);


				int index205_530 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred2_CSS3_fragment))) {s = 48;}

				else if ((true)) {s = 12;}


				input.Seek(index205_530);
				if (s >= 0) return s;
				break;
				case 218:
				int LA205_531 = input.LA(1);


				int index205_531 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred2_CSS3_fragment))) {s = 48;}

				else if ((true)) {s = 12;}


				input.Seek(index205_531);
				if (s >= 0) return s;
				break;
				case 219:
				int LA205_532 = input.LA(1);


				int index205_532 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred2_CSS3_fragment))) {s = 48;}

				else if ((true)) {s = 12;}


				input.Seek(index205_532);
				if (s >= 0) return s;
				break;
				case 220:
				int LA205_533 = input.LA(1);


				int index205_533 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred3_CSS3_fragment))) {s = 56;}

				else if ((true)) {s = 12;}


				input.Seek(index205_533);
				if (s >= 0) return s;
				break;
				case 221:
				int LA205_534 = input.LA(1);


				int index205_534 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred3_CSS3_fragment))) {s = 56;}

				else if ((true)) {s = 12;}


				input.Seek(index205_534);
				if (s >= 0) return s;
				break;
				case 222:
				int LA205_535 = input.LA(1);


				int index205_535 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred4_CSS3_fragment))) {s = 60;}

				else if ((true)) {s = 12;}


				input.Seek(index205_535);
				if (s >= 0) return s;
				break;
				case 223:
				int LA205_536 = input.LA(1);


				int index205_536 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred4_CSS3_fragment))) {s = 60;}

				else if ((true)) {s = 12;}


				input.Seek(index205_536);
				if (s >= 0) return s;
				break;
				case 224:
				int LA205_537 = input.LA(1);


				int index205_537 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred4_CSS3_fragment))) {s = 60;}

				else if ((true)) {s = 12;}


				input.Seek(index205_537);
				if (s >= 0) return s;
				break;
				case 225:
				int LA205_538 = input.LA(1);


				int index205_538 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred5_CSS3_fragment))) {s = 66;}

				else if ((true)) {s = 12;}


				input.Seek(index205_538);
				if (s >= 0) return s;
				break;
				case 226:
				int LA205_539 = input.LA(1);


				int index205_539 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred5_CSS3_fragment))) {s = 66;}

				else if ((true)) {s = 12;}


				input.Seek(index205_539);
				if (s >= 0) return s;
				break;
				case 227:
				int LA205_541 = input.LA(1);


				int index205_541 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred6_CSS3_fragment))) {s = 155;}

				else if ((true)) {s = 12;}


				input.Seek(index205_541);
				if (s >= 0) return s;
				break;
				case 228:
				int LA205_544 = input.LA(1);


				int index205_544 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_CSS3_fragment))) {s = 161;}

				else if ((true)) {s = 12;}


				input.Seek(index205_544);
				if (s >= 0) return s;
				break;
				case 229:
				int LA205_546 = input.LA(1);


				int index205_546 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_CSS3_fragment))) {s = 161;}

				else if ((true)) {s = 12;}


				input.Seek(index205_546);
				if (s >= 0) return s;
				break;
				case 230:
				int LA205_547 = input.LA(1);


				int index205_547 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_CSS3_fragment))) {s = 161;}

				else if ((true)) {s = 12;}


				input.Seek(index205_547);
				if (s >= 0) return s;
				break;
				case 231:
				int LA205_549 = input.LA(1);


				int index205_549 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred9_CSS3_fragment))) {s = 83;}

				else if ((true)) {s = 12;}


				input.Seek(index205_549);
				if (s >= 0) return s;
				break;
				case 232:
				int LA205_550 = input.LA(1);


				int index205_550 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred9_CSS3_fragment))) {s = 83;}

				else if ((true)) {s = 12;}


				input.Seek(index205_550);
				if (s >= 0) return s;
				break;
				case 233:
				int LA205_551 = input.LA(1);


				int index205_551 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred2_CSS3_fragment))) {s = 48;}

				else if ((true)) {s = 12;}


				input.Seek(index205_551);
				if (s >= 0) return s;
				break;
				case 234:
				int LA205_552 = input.LA(1);


				int index205_552 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred2_CSS3_fragment))) {s = 48;}

				else if ((true)) {s = 12;}


				input.Seek(index205_552);
				if (s >= 0) return s;
				break;
				case 235:
				int LA205_553 = input.LA(1);


				int index205_553 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred4_CSS3_fragment))) {s = 60;}

				else if ((true)) {s = 12;}


				input.Seek(index205_553);
				if (s >= 0) return s;
				break;
				case 236:
				int LA205_555 = input.LA(1);


				int index205_555 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred6_CSS3_fragment))) {s = 155;}

				else if ((true)) {s = 12;}


				input.Seek(index205_555);
				if (s >= 0) return s;
				break;
				case 237:
				int LA205_556 = input.LA(1);


				int index205_556 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_CSS3_fragment))) {s = 161;}

				else if ((true)) {s = 12;}


				input.Seek(index205_556);
				if (s >= 0) return s;
				break;
			}
			if (state.backtracking > 0) {state.failed=true; return -1;}
			NoViableAltException nvae = new NoViableAltException(dfa.Description, 205, _s, input);
			dfa.Error(nvae);
			throw nvae;
		}
		private class DFA202 : DFA
		{
			private const string DFA202_eotS =
				"\xA\xFFFF";
			private const string DFA202_eofS =
				"\xA\xFFFF";
			private const string DFA202_minS =
				"\x1\x43\x1\xFFFF\x1\x30\x2\xFFFF\x1\x30\x1\x34\x2\x30\x1\x34";
			private const string DFA202_maxS =
				"\x1\x78\x1\xFFFF\x1\x78\x2\xFFFF\x1\x37\x1\x38\x3\x37";
			private const string DFA202_acceptS =
				"\x1\xFFFF\x1\x1\x1\xFFFF\x1\x2\x1\x3\x5\xFFFF";
			private const string DFA202_specialS =
				"\xA\xFFFF}>";
			private static readonly string[] DFA202_transitionS =
			{
				"\x1\x4\x10\xFFFF\x1\x3\x3\xFFFF\x1\x1\x3\xFFFF\x1\x2\x6\xFFFF\x1\x4"+
				"\x10\xFFFF\x1\x3\x3\xFFFF\x1\x1",
				"",
				"\x1\x5\x3\xFFFF\x1\x4\x1\x6\x1\x4\x1\x6\x1C\xFFFF\x1\x3\x3\xFFFF\x1"+
				"\x1\x1B\xFFFF\x1\x3\x3\xFFFF\x1\x1",
				"",
				"",
				"\x1\x7\x3\xFFFF\x1\x4\x1\x6\x1\x4\x1\x6",
				"\x1\x3\x3\xFFFF\x1\x1",
				"\x1\x8\x3\xFFFF\x1\x4\x1\x6\x1\x4\x1\x6",
				"\x1\x9\x3\xFFFF\x1\x4\x1\x6\x1\x4\x1\x6",
				"\x1\x4\x1\x6\x1\x4\x1\x6"
			};

			private static readonly short[] DFA202_eot = DFA.UnpackEncodedString(DFA202_eotS);
			private static readonly short[] DFA202_eof = DFA.UnpackEncodedString(DFA202_eofS);
			private static readonly char[] DFA202_min = DFA.UnpackEncodedStringToUnsignedChars(DFA202_minS);
			private static readonly char[] DFA202_max = DFA.UnpackEncodedStringToUnsignedChars(DFA202_maxS);
			private static readonly short[] DFA202_accept = DFA.UnpackEncodedString(DFA202_acceptS);
			private static readonly short[] DFA202_special = DFA.UnpackEncodedString(DFA202_specialS);
			private static readonly short[][] DFA202_transition;

			static DFA202()
			{
				int numStates = DFA202_transitionS.Length;
				DFA202_transition = new short[numStates][];
				for ( int i=0; i < numStates; i++ )
				{
					DFA202_transition[i] = DFA.UnpackEncodedString(DFA202_transitionS[i]);
				}
			}

			public DFA202( BaseRecognizer recognizer )
			{
				this.recognizer = recognizer;
				this.decisionNumber = 202;
				this.eot = DFA202_eot;
				this.eof = DFA202_eof;
				this.min = DFA202_min;
				this.max = DFA202_max;
				this.accept = DFA202_accept;
				this.special = DFA202_special;
				this.transition = DFA202_transition;
			}

			public override string Description { get { return "620:17: ( X | T | C )"; } }

			public override void Error(NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
			}
		}

		private class DFA212 : DFA
		{
			private const string DFA212_eotS =
				"\x1\xFFFF\x1\x20\x1\xFFFF\x1\x22\xF\xFFFF\x1\x23\x2\xFFFF\x2\x15\xC\xFFFF"+
					"\x2\x15\x2\xFFFF\x4\x15\x5\xFFFF\x2\x15\x1\xFFFF\x7\x15\x2\xFFFF\xA\x15"+
					"\x1\xFFFF\xA\x15\x1\xFFFF\x9\x15\x1\xFFFF\xD\x15";
			private const string DFA212_eofS =
				"\x6A\xFFFF";
			private const string DFA212_minS =
				"\x1\x9\x1\x2A\x1\xFFFF\x1\x2D\xF\xFFFF\x1\x30\x2\xFFFF\x2\x9\x1\x0\x1"+
					"\xFFFF\x1\x49\x9\xFFFF\x2\x9\x1\x0\x1\xFFFF\x1\x52\x1\x30\x1\x52\x1\x35"+
					"\x2\xFFFF\x1\x30\x2\xFFFF\x2\x9\x1\x0\x1\x4C\x1\x30\x1\x4C\x1\x32\x1"+
					"\x30\x1\x35\x1\x52\x1\x30\x1\x39\x1\x28\x1\x30\x1\x28\x1\x43\x1\x30\x1"+
					"\x32\x1\x4C\x1\x30\x1\x35\x1\x52\x2\x30\x1\x43\x2\x28\x1\x30\x1\x32\x1"+
					"\x4C\x2\x35\x1\x52\x2\x30\x1\x43\x2\x28\x1\x35\x1\x32\x1\x4C\x1\x35\x1"+
					"\x52\x2\x34\x1\x43\x2\x28\x1\x32\x1\x4C\x1\x52\x1\x43\x2\x28\x1\x4C\x2"+
					"\x28";
			private const string DFA212_maxS =
				"\x1\xFFFF\x1\x2A\x1\xFFFF\x1\xFFFF\xF\xFFFF\x1\x39\x2\xFFFF\x2\x72\x1"+
					"\xFFFF\x1\xFFFF\x1\x70\x9\xFFFF\x2\x6C\x1\xFFFF\x1\xFFFF\x1\x72\x1\x37"+
					"\x1\x72\x1\x35\x2\xFFFF\x1\x70\x2\xFFFF\x2\x28\x1\xFFFF\x1\x6C\x1\x37"+
					"\x1\x6C\x1\x32\x1\x37\x1\x35\x1\x72\x1\x37\x1\x64\x1\x28\x1\x36\x1\x28"+
					"\x1\x63\x1\x37\x1\x32\x1\x6C\x1\x37\x1\x35\x1\x72\x1\x37\x1\x36\x1\x63"+
					"\x2\x28\x1\x37\x1\x32\x1\x6C\x1\x37\x1\x35\x1\x72\x1\x37\x1\x36\x1\x63"+
					"\x2\x28\x1\x37\x1\x32\x1\x6C\x1\x35\x1\x72\x1\x37\x1\x36\x1\x63\x2\x28"+
					"\x1\x32\x1\x6C\x1\x72\x1\x63\x2\x28\x1\x6C\x2\x28";
			private const string DFA212_acceptS =
				"\x2\xFFFF\x1\x2\x1\xFFFF\x1\x4\x1\x5\x1\x6\x1\x7\x1\x8\x1\x9\x1\xA\x1"+
					"\xB\x1\xC\x1\xD\x1\x10\x1\x11\x1\x12\x1\x13\x1\x14\x1\xFFFF\x1\x16\x1"+
					"\x17\x3\xFFFF\x1\x18\x1\xFFFF\x1\x1D\x1\x1E\x1\x20\x1\x21\x1\x1\x1\xE"+
					"\x1\x3\x1\xF\x1\x15\x3\xFFFF\x1\x1F\x4\xFFFF\x1\x1C\x1\x19\x1\xFFFF\x1"+
					"\x1A\x1\x1B\x39\xFFFF";
			private const string DFA212_specialS =
				"\x18\xFFFF\x1\x0\xD\xFFFF\x1\x1\xC\xFFFF\x1\x2\x36\xFFFF}>";
			private static readonly string[] DFA212_transitionS =
			{
				"\x1\x1D\x1\x1E\x2\xFFFF\x1\x1E\x12\xFFFF\x1\x1D\x1\x1B\x1\x14\x1\x19"+
				"\x3\xFFFF\x1\x14\x1\x10\x1\x11\x1\xF\x1\xE\x1\x12\x1\x3\x1\x13\x1\x1"+
				"\xA\x1C\x1\xD\x1\xC\x1\x2\x1\xB\x1\x6\x1\xFFFF\x1\x1A\x14\x15\x1\x17"+
				"\x5\x15\x1\x9\x1\x18\x1\xA\x1\xFFFF\x1\x15\x1\xFFFF\x14\x15\x1\x16\x5"+
				"\x15\x1\x7\x1\x5\x1\x8\x1\x4\x1\xFFFF\xFF80\x15",
				"\x1\x1F",
				"",
				"\x1\x21\x13\xFFFF\x1A\x15\x1\xFFFF\x1\x15\x2\xFFFF\x1\x15\x1\xFFFF\x1A"+
				"\x15\x5\xFFFF\xFF80\x15",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\xA\x1C",
				"",
				"",
				"\x2\x27\x1\xFFFF\x2\x27\x12\xFFFF\x1\x27\x31\xFFFF\x1\x25\x9\xFFFF\x1"+
				"\x26\x15\xFFFF\x1\x24",
				"\x2\x27\x1\xFFFF\x2\x27\x12\xFFFF\x1\x27\x31\xFFFF\x1\x25\x9\xFFFF\x1"+
				"\x26\x15\xFFFF\x1\x24",
				"\xA\x15\x1\xFFFF\x1\x15\x2\xFFFF\x22\x15\x1\x29\x4\x15\x1\x2B\x1\x15"+
				"\x1\x2B\x1D\x15\x1\x2A\x1F\x15\x1\x28\xFF8A\x15",
				"",
				"\x1\x2D\x3\xFFFF\x1\x30\x2\xFFFF\x1\x2F\xB\xFFFF\x1\x2E\x6\xFFFF\x1"+
				"\x2C\x5\xFFFF\x1\x2D\x3\xFFFF\x1\x30\x2\xFFFF\x1\x2F",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x2\x27\x1\xFFFF\x2\x27\x12\xFFFF\x1\x27\x2B\xFFFF\x1\x32\xF\xFFFF\x1"+
				"\x33\xF\xFFFF\x1\x31",
				"\x2\x27\x1\xFFFF\x2\x27\x12\xFFFF\x1\x27\x2B\xFFFF\x1\x32\xF\xFFFF\x1"+
				"\x33\xF\xFFFF\x1\x31",
				"\xA\x15\x1\xFFFF\x1\x15\x2\xFFFF\x22\x15\x1\x35\x4\x15\x1\x37\x1\x15"+
				"\x1\x37\x1A\x15\x1\x36\x1F\x15\x1\x34\xFF8D\x15",
				"",
				"\x1\x25\x9\xFFFF\x1\x26\x15\xFFFF\x1\x24",
				"\x1\x38\x4\xFFFF\x1\x39\x1\xFFFF\x1\x39",
				"\x1\x25\x9\xFFFF\x1\x26\x15\xFFFF\x1\x24",
				"\x1\x3A",
				"",
				"",
				"\x1\x3B\x3\xFFFF\x1\x3C\x1\x2F\x1\x3C\x1\x2F\x11\xFFFF\x1\x2D\x3\xFFFF"+
				"\x1\x30\x2\xFFFF\x1\x2F\x18\xFFFF\x1\x2D\x3\xFFFF\x1\x30\x2\xFFFF\x1"+
				"\x2F",
				"",
				"",
				"\x2\x27\x1\xFFFF\x2\x27\x12\xFFFF\x1\x27\x7\xFFFF\x1\x27",
				"\x2\x27\x1\xFFFF\x2\x27\x12\xFFFF\x1\x27\x7\xFFFF\x1\x27",
				"\xA\x15\x1\xFFFF\x1\x15\x2\xFFFF\x22\x15\x1\x3E\x3\x15\x1\x40\x1\x15"+
				"\x1\x40\x15\x15\x1\x3F\x1F\x15\x1\x3D\xFF93\x15",
				"\x1\x32\xF\xFFFF\x1\x33\xF\xFFFF\x1\x31",
				"\x1\x41\x4\xFFFF\x1\x42\x1\xFFFF\x1\x42",
				"\x1\x32\xF\xFFFF\x1\x33\xF\xFFFF\x1\x31",
				"\x1\x43",
				"\x1\x44\x4\xFFFF\x1\x45\x1\xFFFF\x1\x45",
				"\x1\x46",
				"\x1\x25\x9\xFFFF\x1\x26\x15\xFFFF\x1\x24",
				"\x1\x47\x3\xFFFF\x1\x3C\x1\x2F\x1\x3C\x1\x2F",
				"\x1\x2D\xA\xFFFF\x1\x30\x1F\xFFFF\x1\x30",
				"\x1\x27",
				"\x1\x48\x3\xFFFF\x1\x49\x1\xFFFF\x1\x49",
				"\x1\x27",
				"\x1\x4B\x1F\xFFFF\x1\x4A",
				"\x1\x4C\x4\xFFFF\x1\x4D\x1\xFFFF\x1\x4D",
				"\x1\x4E",
				"\x1\x32\xF\xFFFF\x1\x33\xF\xFFFF\x1\x31",
				"\x1\x4F\x4\xFFFF\x1\x50\x1\xFFFF\x1\x50",
				"\x1\x51",
				"\x1\x25\x9\xFFFF\x1\x26\x15\xFFFF\x1\x24",
				"\x1\x52\x3\xFFFF\x1\x3C\x1\x2F\x1\x3C\x1\x2F",
				"\x1\x53\x3\xFFFF\x1\x54\x1\xFFFF\x1\x54",
				"\x1\x56\x1F\xFFFF\x1\x55",
				"\x1\x27",
				"\x1\x27",
				"\x1\x57\x4\xFFFF\x1\x58\x1\xFFFF\x1\x58",
				"\x1\x59",
				"\x1\x32\xF\xFFFF\x1\x33\xF\xFFFF\x1\x31",
				"\x1\x5A\x1\xFFFF\x1\x5A",
				"\x1\x5B",
				"\x1\x25\x9\xFFFF\x1\x26\x15\xFFFF\x1\x24",
				"\x1\x5C\x3\xFFFF\x1\x3C\x1\x2F\x1\x3C\x1\x2F",
				"\x1\x5D\x3\xFFFF\x1\x5E\x1\xFFFF\x1\x5E",
				"\x1\x60\x1F\xFFFF\x1\x5F",
				"\x1\x27",
				"\x1\x27",
				"\x1\x61\x1\xFFFF\x1\x61",
				"\x1\x62",
				"\x1\x32\xF\xFFFF\x1\x33\xF\xFFFF\x1\x31",
				"\x1\x63",
				"\x1\x25\x9\xFFFF\x1\x26\x15\xFFFF\x1\x24",
				"\x1\x3C\x1\x2F\x1\x3C\x1\x2F",
				"\x1\x64\x1\xFFFF\x1\x64",
				"\x1\x66\x1F\xFFFF\x1\x65",
				"\x1\x27",
				"\x1\x27",
				"\x1\x67",
				"\x1\x32\xF\xFFFF\x1\x33\xF\xFFFF\x1\x31",
				"\x1\x25\x9\xFFFF\x1\x26\x15\xFFFF\x1\x24",
				"\x1\x69\x1F\xFFFF\x1\x68",
				"\x1\x27",
				"\x1\x27",
				"\x1\x32\xF\xFFFF\x1\x33\xF\xFFFF\x1\x31",
				"\x1\x27",
				"\x1\x27"
			};

			private static readonly short[] DFA212_eot = DFA.UnpackEncodedString(DFA212_eotS);
			private static readonly short[] DFA212_eof = DFA.UnpackEncodedString(DFA212_eofS);
			private static readonly char[] DFA212_min = DFA.UnpackEncodedStringToUnsignedChars(DFA212_minS);
			private static readonly char[] DFA212_max = DFA.UnpackEncodedStringToUnsignedChars(DFA212_maxS);
			private static readonly short[] DFA212_accept = DFA.UnpackEncodedString(DFA212_acceptS);
			private static readonly short[] DFA212_special = DFA.UnpackEncodedString(DFA212_specialS);
			private static readonly short[][] DFA212_transition;

			static DFA212()
			{
				int numStates = DFA212_transitionS.Length;
				DFA212_transition = new short[numStates][];
				for ( int i=0; i < numStates; i++ )
				{
					DFA212_transition[i] = DFA.UnpackEncodedString(DFA212_transitionS[i]);
				}
			}

			public DFA212( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
				: base(specialStateTransition)
			{
				this.recognizer = recognizer;
				this.decisionNumber = 212;
				this.eot = DFA212_eot;
				this.eof = DFA212_eof;
				this.min = DFA212_min;
				this.max = DFA212_max;
				this.accept = DFA212_accept;
				this.special = DFA212_special;
				this.transition = DFA212_transition;
			}

			public override string Description { get { return "1:1: Tokens : ( COMMENT | CDO | CDC | INCLUDES | DASHMATCH | GREATER | LBRACE | RBRACE | LBRACKET | RBRACKET | OPEQ | SEMI | COLON | SOLIDUS | MINUS | PLUS | STAR | LPAREN | RPAREN | COMMA | DOT | STRING | IDENT | HASH | IMPORT_SYM | PAGE_SYM | MEDIA_SYM | CHARSET_SYM | IMPORTANT_SYM | NUMBER | URI | WS | NL );"; } }

			public override void Error(NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
			}
		}

		private int SpecialStateTransition212(DFA dfa, int s, IIntStream _input)
		{
			IIntStream input = _input;
			int _s = s;
			switch (s)
			{
				case 0:
				int LA212_24 = input.LA(1);

				s = -1;
				if ((LA212_24=='u')) {s = 40;}

				else if ((LA212_24=='0')) {s = 41;}

				else if ((LA212_24=='U')) {s = 42;}

				else if (((LA212_24>='\u0000' && LA212_24<='\t')||LA212_24=='\u000B'||(LA212_24>='\u000E' && LA212_24<='/')||(LA212_24>='1' && LA212_24<='4')||LA212_24=='6'||(LA212_24>='8' && LA212_24<='T')||(LA212_24>='V' && LA212_24<='t')||(LA212_24>='v' && LA212_24<='\uFFFF'))) {s = 21;}

				else if ((LA212_24=='5'||LA212_24=='7')) {s = 43;}

				if (s >= 0) return s;
				break;
				case 1:
				int LA212_38 = input.LA(1);

				s = -1;
				if ((LA212_38=='r')) {s = 52;}

				else if ((LA212_38=='0')) {s = 53;}

				else if ((LA212_38=='R')) {s = 54;}

				else if (((LA212_38>='\u0000' && LA212_38<='\t')||LA212_38=='\u000B'||(LA212_38>='\u000E' && LA212_38<='/')||(LA212_38>='1' && LA212_38<='4')||LA212_38=='6'||(LA212_38>='8' && LA212_38<='Q')||(LA212_38>='S' && LA212_38<='q')||(LA212_38>='s' && LA212_38<='\uFFFF'))) {s = 21;}

				else if ((LA212_38=='5'||LA212_38=='7')) {s = 55;}

				if (s >= 0) return s;
				break;
				case 2:
				int LA212_51 = input.LA(1);

				s = -1;
				if ((LA212_51=='l')) {s = 61;}

				else if ((LA212_51=='0')) {s = 62;}

				else if ((LA212_51=='L')) {s = 63;}

				else if (((LA212_51>='\u0000' && LA212_51<='\t')||LA212_51=='\u000B'||(LA212_51>='\u000E' && LA212_51<='/')||(LA212_51>='1' && LA212_51<='3')||LA212_51=='5'||(LA212_51>='7' && LA212_51<='K')||(LA212_51>='M' && LA212_51<='k')||(LA212_51>='m' && LA212_51<='\uFFFF'))) {s = 21;}

				else if ((LA212_51=='4'||LA212_51=='6')) {s = 64;}

				if (s >= 0) return s;
				break;
			}
			if (state.backtracking > 0) {state.failed=true; return -1;}
			NoViableAltException nvae = new NoViableAltException(dfa.Description, 212, _s, input);
			dfa.Error(nvae);
			throw nvae;
		}
		private class DFA214 : DFA
		{
			private const string DFA214_eotS =
				"\xA\xFFFF";
			private const string DFA214_eofS =
				"\xA\xFFFF";
			private const string DFA214_minS =
				"\x1\x43\x1\xFFFF\x1\x30\x2\xFFFF\x1\x30\x1\x34\x2\x30\x1\x34";
			private const string DFA214_maxS =
				"\x1\x78\x1\xFFFF\x1\x78\x2\xFFFF\x1\x37\x1\x38\x3\x37";
			private const string DFA214_acceptS =
				"\x1\xFFFF\x1\x1\x1\xFFFF\x1\x2\x1\x3\x5\xFFFF";
			private const string DFA214_specialS =
				"\xA\xFFFF}>";
			private static readonly string[] DFA214_transitionS =
			{
				"\x1\x4\x10\xFFFF\x1\x3\x3\xFFFF\x1\x1\x3\xFFFF\x1\x2\x6\xFFFF\x1\x4"+
				"\x10\xFFFF\x1\x3\x3\xFFFF\x1\x1",
				"",
				"\x1\x5\x3\xFFFF\x1\x4\x1\x6\x1\x4\x1\x6\x1C\xFFFF\x1\x3\x3\xFFFF\x1"+
				"\x1\x1B\xFFFF\x1\x3\x3\xFFFF\x1\x1",
				"",
				"",
				"\x1\x7\x3\xFFFF\x1\x4\x1\x6\x1\x4\x1\x6",
				"\x1\x3\x3\xFFFF\x1\x1",
				"\x1\x8\x3\xFFFF\x1\x4\x1\x6\x1\x4\x1\x6",
				"\x1\x9\x3\xFFFF\x1\x4\x1\x6\x1\x4\x1\x6",
				"\x1\x4\x1\x6\x1\x4\x1\x6"
			};

			private static readonly short[] DFA214_eot = DFA.UnpackEncodedString(DFA214_eotS);
			private static readonly short[] DFA214_eof = DFA.UnpackEncodedString(DFA214_eofS);
			private static readonly char[] DFA214_min = DFA.UnpackEncodedStringToUnsignedChars(DFA214_minS);
			private static readonly char[] DFA214_max = DFA.UnpackEncodedStringToUnsignedChars(DFA214_maxS);
			private static readonly short[] DFA214_accept = DFA.UnpackEncodedString(DFA214_acceptS);
			private static readonly short[] DFA214_special = DFA.UnpackEncodedString(DFA214_specialS);
			private static readonly short[][] DFA214_transition;

			static DFA214()
			{
				int numStates = DFA214_transitionS.Length;
				DFA214_transition = new short[numStates][];
				for ( int i=0; i < numStates; i++ )
				{
					DFA214_transition[i] = DFA.UnpackEncodedString(DFA214_transitionS[i]);
				}
			}

			public DFA214( BaseRecognizer recognizer )
			{
				this.recognizer = recognizer;
				this.decisionNumber = 214;
				this.eot = DFA214_eot;
				this.eof = DFA214_eof;
				this.min = DFA214_min;
				this.max = DFA214_max;
				this.accept = DFA214_accept;
				this.special = DFA214_special;
				this.transition = DFA214_transition;
			}

			public override string Description { get { return "618:17: ( X | T | C )"; } }

			public override void Error(NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
			}
		}


		#endregion

	}

} // namespace CssParser
 index205_547 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_CSS3_fragment))) {s = 161;}

				else if ((true)) {s = 12;}


				input.Seek(index205_547);
				if (s >= 0) return s;
				break;
			case 231:
				int LA205_549 = input.LA(1);


				int index205_549 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred9_CSS3_fragment))) {s = 83;}

				else if ((true)) {s = 12;}


				input.Seek(index205_549);
				if (s >= 0) return s;
				break;
			case 232:
				int LA205_550 = input.LA(1);


				int index205_550 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred9_CSS3_fragment))) {s = 83;}

				else if ((true)) {s = 12;}


				input.Seek(index205_550);
				if (s >= 0) return s;
				break;
			case 233:
				int LA205_551 = input.LA(1);


				int index205_551 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred2_CSS3_fragment))) {s = 48;}

				else if ((true)) {s = 12;}


				input.Seek(index205_551);
				if (s >= 0) return s;
				break;
			case 234:
				int LA205_552 = input.LA(1);


				int index205_552 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred2_CSS3_fragment))) {s = 48;}

				else if ((true)) {s = 12;}


				input.Seek(index205_552);
				if (s >= 0) return s;
				break;
			case 235:
				int LA205_553 = input.LA(1);


				int index205_553 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred4_CSS3_fragment))) {s = 60;}

				else if ((true)) {s = 12;}


				input.Seek(index205_553);
				if (s >= 0) return s;
				break;
			case 236:
				int LA205_555 = input.LA(1);


				int index205_555 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred6_CSS3_fragment))) {s = 155;}

				else if ((true)) {s = 12;}


				input.Seek(index205_555);
				if (s >= 0) return s;
				break;
			case 237:
				int LA205_556 = input.LA(1);


				int index205_556 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred7_CSS3_fragment))) {s = 161;}

				else if ((true)) {s = 12;}


				input.Seek(index205_556);
				if (s >= 0) return s;
				break;
		}
		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 205, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA202 : DFA
	{
		private const string DFA202_eotS =
			"\xA\xFFFF";
		private const string DFA202_eofS =
			"\xA\xFFFF";
		private const string DFA202_minS =
			"\x1\x43\x1\xFFFF\x1\x30\x2\xFFFF\x1\x30\x1\x34\x2\x30\x1\x34";
		private const string DFA202_maxS =
			"\x1\x78\x1\xFFFF\x1\x78\x2\xFFFF\x1\x37\x1\x38\x3\x37";
		private const string DFA202_acceptS =
			"\x1\xFFFF\x1\x1\x1\xFFFF\x1\x2\x1\x3\x5\xFFFF";
		private const string DFA202_specialS =
			"\xA\xFFFF}>";
		private static readonly string[] DFA202_transitionS =
			{
				"\x1\x4\x10\xFFFF\x1\x3\x3\xFFFF\x1\x1\x3\xFFFF\x1\x2\x6\xFFFF\x1\x4"+
				"\x10\xFFFF\x1\x3\x3\xFFFF\x1\x1",
				"",
				"\x1\x5\x3\xFFFF\x1\x4\x1\x6\x1\x4\x1\x6\x1C\xFFFF\x1\x3\x3\xFFFF\x1"+
				"\x1\x1B\xFFFF\x1\x3\x3\xFFFF\x1\x1",
				"",
				"",
				"\x1\x7\x3\xFFFF\x1\x4\x1\x6\x1\x4\x1\x6",
				"\x1\x3\x3\xFFFF\x1\x1",
				"\x1\x8\x3\xFFFF\x1\x4\x1\x6\x1\x4\x1\x6",
				"\x1\x9\x3\xFFFF\x1\x4\x1\x6\x1\x4\x1\x6",
				"\x1\x4\x1\x6\x1\x4\x1\x6"
			};

		private static readonly short[] DFA202_eot = DFA.UnpackEncodedString(DFA202_eotS);
		private static readonly short[] DFA202_eof = DFA.UnpackEncodedString(DFA202_eofS);
		private static readonly char[] DFA202_min = DFA.UnpackEncodedStringToUnsignedChars(DFA202_minS);
		private static readonly char[] DFA202_max = DFA.UnpackEncodedStringToUnsignedChars(DFA202_maxS);
		private static readonly short[] DFA202_accept = DFA.UnpackEncodedString(DFA202_acceptS);
		private static readonly short[] DFA202_special = DFA.UnpackEncodedString(DFA202_specialS);
		private static readonly short[][] DFA202_transition;

		static DFA202()
		{
			int numStates = DFA202_transitionS.Length;
			DFA202_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA202_transition[i] = DFA.UnpackEncodedString(DFA202_transitionS[i]);
			}
		}

		public DFA202( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 202;
			this.eot = DFA202_eot;
			this.eof = DFA202_eof;
			this.min = DFA202_min;
			this.max = DFA202_max;
			this.accept = DFA202_accept;
			this.special = DFA202_special;
			this.transition = DFA202_transition;
		}

		public override string Description { get { return "620:17: ( X | T | C )"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA212 : DFA
	{
		private const string DFA212_eotS =
			"\x1\xFFFF\x1\x20\x1\xFFFF\x1\x22\xF\xFFFF\x1\x23\x2\xFFFF\x2\x15\xC\xFFFF"+
			"\x2\x15\x2\xFFFF\x4\x15\x5\xFFFF\x2\x15\x1\xFFFF\x7\x15\x2\xFFFF\xA\x15"+
			"\x1\xFFFF\xA\x15\x1\xFFFF\x9\x15\x1\xFFFF\xD\x15";
		private const string DFA212_eofS =
			"\x6A\xFFFF";
		private const string DFA212_minS =
			"\x1\x9\x1\x2A\x1\xFFFF\x1\x2D\xF\xFFFF\x1\x30\x2\xFFFF\x2\x9\x1\x0\x1"+
			"\xFFFF\x1\x49\x9\xFFFF\x2\x9\x1\x0\x1\xFFFF\x1\x52\x1\x30\x1\x52\x1\x35"+
			"\x2\xFFFF\x1\x30\x2\xFFFF\x2\x9\x1\x0\x1\x4C\x1\x30\x1\x4C\x1\x32\x1"+
			"\x30\x1\x35\x1\x52\x1\x30\x1\x39\x1\x28\x1\x30\x1\x28\x1\x43\x1\x30\x1"+
			"\x32\x1\x4C\x1\x30\x1\x35\x1\x52\x2\x30\x1\x43\x2\x28\x1\x30\x1\x32\x1"+
			"\x4C\x2\x35\x1\x52\x2\x30\x1\x43\x2\x28\x1\x35\x1\x32\x1\x4C\x1\x35\x1"+
			"\x52\x2\x34\x1\x43\x2\x28\x1\x32\x1\x4C\x1\x52\x1\x43\x2\x28\x1\x4C\x2"+
			"\x28";
		private const string DFA212_maxS =
			"\x1\xFFFF\x1\x2A\x1\xFFFF\x1\xFFFF\xF\xFFFF\x1\x39\x2\xFFFF\x2\x72\x1"+
			"\xFFFF\x1\xFFFF\x1\x70\x9\xFFFF\x2\x6C\x1\xFFFF\x1\xFFFF\x1\x72\x1\x37"+
			"\x1\x72\x1\x35\x2\xFFFF\x1\x70\x2\xFFFF\x2\x28\x1\xFFFF\x1\x6C\x1\x37"+
			"\x1\x6C\x1\x32\x1\x37\x1\x35\x1\x72\x1\x37\x1\x64\x1\x28\x1\x36\x1\x28"+
			"\x1\x63\x1\x37\x1\x32\x1\x6C\x1\x37\x1\x35\x1\x72\x1\x37\x1\x36\x1\x63"+
			"\x2\x28\x1\x37\x1\x32\x1\x6C\x1\x37\x1\x35\x1\x72\x1\x37\x1\x36\x1\x63"+
			"\x2\x28\x1\x37\x1\x32\x1\x6C\x1\x35\x1\x72\x1\x37\x1\x36\x1\x63\x2\x28"+
			"\x1\x32\x1\x6C\x1\x72\x1\x63\x2\x28\x1\x6C\x2\x28";
		private const string DFA212_acceptS =
			"\x2\xFFFF\x1\x2\x1\xFFFF\x1\x4\x1\x5\x1\x6\x1\x7\x1\x8\x1\x9\x1\xA\x1"+
			"\xB\x1\xC\x1\xD\x1\x10\x1\x11\x1\x12\x1\x13\x1\x14\x1\xFFFF\x1\x16\x1"+
			"\x17\x3\xFFFF\x1\x18\x1\xFFFF\x1\x1D\x1\x1E\x1\x20\x1\x21\x1\x1\x1\xE"+
			"\x1\x3\x1\xF\x1\x15\x3\xFFFF\x1\x1F\x4\xFFFF\x1\x1C\x1\x19\x1\xFFFF\x1"+
			"\x1A\x1\x1B\x39\xFFFF";
		private const string DFA212_specialS =
			"\x18\xFFFF\x1\x0\xD\xFFFF\x1\x1\xC\xFFFF\x1\x2\x36\xFFFF}>";
		private static readonly string[] DFA212_transitionS =
			{
				"\x1\x1D\x1\x1E\x2\xFFFF\x1\x1E\x12\xFFFF\x1\x1D\x1\x1B\x1\x14\x1\x19"+
				"\x3\xFFFF\x1\x14\x1\x10\x1\x11\x1\xF\x1\xE\x1\x12\x1\x3\x1\x13\x1\x1"+
				"\xA\x1C\x1\xD\x1\xC\x1\x2\x1\xB\x1\x6\x1\xFFFF\x1\x1A\x14\x15\x1\x17"+
				"\x5\x15\x1\x9\x1\x18\x1\xA\x1\xFFFF\x1\x15\x1\xFFFF\x14\x15\x1\x16\x5"+
				"\x15\x1\x7\x1\x5\x1\x8\x1\x4\x1\xFFFF\xFF80\x15",
				"\x1\x1F",
				"",
				"\x1\x21\x13\xFFFF\x1A\x15\x1\xFFFF\x1\x15\x2\xFFFF\x1\x15\x1\xFFFF\x1A"+
				"\x15\x5\xFFFF\xFF80\x15",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\xA\x1C",
				"",
				"",
				"\x2\x27\x1\xFFFF\x2\x27\x12\xFFFF\x1\x27\x31\xFFFF\x1\x25\x9\xFFFF\x1"+
				"\x26\x15\xFFFF\x1\x24",
				"\x2\x27\x1\xFFFF\x2\x27\x12\xFFFF\x1\x27\x31\xFFFF\x1\x25\x9\xFFFF\x1"+
				"\x26\x15\xFFFF\x1\x24",
				"\xA\x15\x1\xFFFF\x1\x15\x2\xFFFF\x22\x15\x1\x29\x4\x15\x1\x2B\x1\x15"+
				"\x1\x2B\x1D\x15\x1\x2A\x1F\x15\x1\x28\xFF8A\x15",
				"",
				"\x1\x2D\x3\xFFFF\x1\x30\x2\xFFFF\x1\x2F\xB\xFFFF\x1\x2E\x6\xFFFF\x1"+
				"\x2C\x5\xFFFF\x1\x2D\x3\xFFFF\x1\x30\x2\xFFFF\x1\x2F",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x2\x27\x1\xFFFF\x2\x27\x12\xFFFF\x1\x27\x2B\xFFFF\x1\x32\xF\xFFFF\x1"+
				"\x33\xF\xFFFF\x1\x31",
				"\x2\x27\x1\xFFFF\x2\x27\x12\xFFFF\x1\x27\x2B\xFFFF\x1\x32\xF\xFFFF\x1"+
				"\x33\xF\xFFFF\x1\x31",
				"\xA\x15\x1\xFFFF\x1\x15\x2\xFFFF\x22\x15\x1\x35\x4\x15\x1\x37\x1\x15"+
				"\x1\x37\x1A\x15\x1\x36\x1F\x15\x1\x34\xFF8D\x15",
				"",
				"\x1\x25\x9\xFFFF\x1\x26\x15\xFFFF\x1\x24",
				"\x1\x38\x4\xFFFF\x1\x39\x1\xFFFF\x1\x39",
				"\x1\x25\x9\xFFFF\x1\x26\x15\xFFFF\x1\x24",
				"\x1\x3A",
				"",
				"",
				"\x1\x3B\x3\xFFFF\x1\x3C\x1\x2F\x1\x3C\x1\x2F\x11\xFFFF\x1\x2D\x3\xFFFF"+
				"\x1\x30\x2\xFFFF\x1\x2F\x18\xFFFF\x1\x2D\x3\xFFFF\x1\x30\x2\xFFFF\x1"+
				"\x2F",
				"",
				"",
				"\x2\x27\x1\xFFFF\x2\x27\x12\xFFFF\x1\x27\x7\xFFFF\x1\x27",
				"\x2\x27\x1\xFFFF\x2\x27\x12\xFFFF\x1\x27\x7\xFFFF\x1\x27",
				"\xA\x15\x1\xFFFF\x1\x15\x2\xFFFF\x22\x15\x1\x3E\x3\x15\x1\x40\x1\x15"+
				"\x1\x40\x15\x15\x1\x3F\x1F\x15\x1\x3D\xFF93\x15",
				"\x1\x32\xF\xFFFF\x1\x33\xF\xFFFF\x1\x31",
				"\x1\x41\x4\xFFFF\x1\x42\x1\xFFFF\x1\x42",
				"\x1\x32\xF\xFFFF\x1\x33\xF\xFFFF\x1\x31",
				"\x1\x43",
				"\x1\x44\x4\xFFFF\x1\x45\x1\xFFFF\x1\x45",
				"\x1\x46",
				"\x1\x25\x9\xFFFF\x1\x26\x15\xFFFF\x1\x24",
				"\x1\x47\x3\xFFFF\x1\x3C\x1\x2F\x1\x3C\x1\x2F",
				"\x1\x2D\xA\xFFFF\x1\x30\x1F\xFFFF\x1\x30",
				"\x1\x27",
				"\x1\x48\x3\xFFFF\x1\x49\x1\xFFFF\x1\x49",
				"\x1\x27",
				"\x1\x4B\x1F\xFFFF\x1\x4A",
				"\x1\x4C\x4\xFFFF\x1\x4D\x1\xFFFF\x1\x4D",
				"\x1\x4E",
				"\x1\x32\xF\xFFFF\x1\x33\xF\xFFFF\x1\x31",
				"\x1\x4F\x4\xFFFF\x1\x50\x1\xFFFF\x1\x50",
				"\x1\x51",
				"\x1\x25\x9\xFFFF\x1\x26\x15\xFFFF\x1\x24",
				"\x1\x52\x3\xFFFF\x1\x3C\x1\x2F\x1\x3C\x1\x2F",
				"\x1\x53\x3\xFFFF\x1\x54\x1\xFFFF\x1\x54",
				"\x1\x56\x1F\xFFFF\x1\x55",
				"\x1\x27",
				"\x1\x27",
				"\x1\x57\x4\xFFFF\x1\x58\x1\xFFFF\x1\x58",
				"\x1\x59",
				"\x1\x32\xF\xFFFF\x1\x33\xF\xFFFF\x1\x31",
				"\x1\x5A\x1\xFFFF\x1\x5A",
				"\x1\x5B",
				"\x1\x25\x9\xFFFF\x1\x26\x15\xFFFF\x1\x24",
				"\x1\x5C\x3\xFFFF\x1\x3C\x1\x2F\x1\x3C\x1\x2F",
				"\x1\x5D\x3\xFFFF\x1\x5E\x1\xFFFF\x1\x5E",
				"\x1\x60\x1F\xFFFF\x1\x5F",
				"\x1\x27",
				"\x1\x27",
				"\x1\x61\x1\xFFFF\x1\x61",
				"\x1\x62",
				"\x1\x32\xF\xFFFF\x1\x33\xF\xFFFF\x1\x31",
				"\x1\x63",
				"\x1\x25\x9\xFFFF\x1\x26\x15\xFFFF\x1\x24",
				"\x1\x3C\x1\x2F\x1\x3C\x1\x2F",
				"\x1\x64\x1\xFFFF\x1\x64",
				"\x1\x66\x1F\xFFFF\x1\x65",
				"\x1\x27",
				"\x1\x27",
				"\x1\x67",
				"\x1\x32\xF\xFFFF\x1\x33\xF\xFFFF\x1\x31",
				"\x1\x25\x9\xFFFF\x1\x26\x15\xFFFF\x1\x24",
				"\x1\x69\x1F\xFFFF\x1\x68",
				"\x1\x27",
				"\x1\x27",
				"\x1\x32\xF\xFFFF\x1\x33\xF\xFFFF\x1\x31",
				"\x1\x27",
				"\x1\x27"
			};

		private static readonly short[] DFA212_eot = DFA.UnpackEncodedString(DFA212_eotS);
		private static readonly short[] DFA212_eof = DFA.UnpackEncodedString(DFA212_eofS);
		private static readonly char[] DFA212_min = DFA.UnpackEncodedStringToUnsignedChars(DFA212_minS);
		private static readonly char[] DFA212_max = DFA.UnpackEncodedStringToUnsignedChars(DFA212_maxS);
		private static readonly short[] DFA212_accept = DFA.UnpackEncodedString(DFA212_acceptS);
		private static readonly short[] DFA212_special = DFA.UnpackEncodedString(DFA212_specialS);
		private static readonly short[][] DFA212_transition;

		static DFA212()
		{
			int numStates = DFA212_transitionS.Length;
			DFA212_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA212_transition[i] = DFA.UnpackEncodedString(DFA212_transitionS[i]);
			}
		}

		public DFA212( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 212;
			this.eot = DFA212_eot;
			this.eof = DFA212_eof;
			this.min = DFA212_min;
			this.max = DFA212_max;
			this.accept = DFA212_accept;
			this.special = DFA212_special;
			this.transition = DFA212_transition;
		}

		public override string Description { get { return "1:1: Tokens : ( COMMENT | CDO | CDC | INCLUDES | DASHMATCH | GREATER | LBRACE | RBRACE | LBRACKET | RBRACKET | OPEQ | SEMI | COLON | SOLIDUS | MINUS | PLUS | STAR | LPAREN | RPAREN | COMMA | DOT | STRING | IDENT | HASH | IMPORT_SYM | PAGE_SYM | MEDIA_SYM | CHARSET_SYM | IMPORTANT_SYM | NUMBER | URI | WS | NL );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition212(DFA dfa, int s, IIntStream _input)
	{
		IIntStream input = _input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA212_24 = input.LA(1);

				s = -1;
				if ((LA212_24=='u')) {s = 40;}

				else if ((LA212_24=='0')) {s = 41;}

				else if ((LA212_24=='U')) {s = 42;}

				else if (((LA212_24>='\u0000' && LA212_24<='\t')||LA212_24=='\u000B'||(LA212_24>='\u000E' && LA212_24<='/')||(LA212_24>='1' && LA212_24<='4')||LA212_24=='6'||(LA212_24>='8' && LA212_24<='T')||(LA212_24>='V' && LA212_24<='t')||(LA212_24>='v' && LA212_24<='\uFFFF'))) {s = 21;}

				else if ((LA212_24=='5'||LA212_24=='7')) {s = 43;}

				if (s >= 0) return s;
				break;
			case 1:
				int LA212_38 = input.LA(1);

				s = -1;
				if ((LA212_38=='r')) {s = 52;}

				else if ((LA212_38=='0')) {s = 53;}

				else if ((LA212_38=='R')) {s = 54;}

				else if (((LA212_38>='\u0000' && LA212_38<='\t')||LA212_38=='\u000B'||(LA212_38>='\u000E' && LA212_38<='/')||(LA212_38>='1' && LA212_38<='4')||LA212_38=='6'||(LA212_38>='8' && LA212_38<='Q')||(LA212_38>='S' && LA212_38<='q')||(LA212_38>='s' && LA212_38<='\uFFFF'))) {s = 21;}

				else if ((LA212_38=='5'||LA212_38=='7')) {s = 55;}

				if (s >= 0) return s;
				break;
			case 2:
				int LA212_51 = input.LA(1);

				s = -1;
				if ((LA212_51=='l')) {s = 61;}

				else if ((LA212_51=='0')) {s = 62;}

				else if ((LA212_51=='L')) {s = 63;}

				else if (((LA212_51>='\u0000' && LA212_51<='\t')||LA212_51=='\u000B'||(LA212_51>='\u000E' && LA212_51<='/')||(LA212_51>='1' && LA212_51<='3')||LA212_51=='5'||(LA212_51>='7' && LA212_51<='K')||(LA212_51>='M' && LA212_51<='k')||(LA212_51>='m' && LA212_51<='\uFFFF'))) {s = 21;}

				else if ((LA212_51=='4'||LA212_51=='6')) {s = 64;}

				if (s >= 0) return s;
				break;
		}
		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 212, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA214 : DFA
	{
		private const string DFA214_eotS =
			"\xA\xFFFF";
		private const string DFA214_eofS =
			"\xA\xFFFF";
		private const string DFA214_minS =
			"\x1\x43\x1\xFFFF\x1\x30\x2\xFFFF\x1\x30\x1\x34\x2\x30\x1\x34";
		private const string DFA214_maxS =
			"\x1\x78\x1\xFFFF\x1\x78\x2\xFFFF\x1\x37\x1\x38\x3\x37";
		private const string DFA214_acceptS =
			"\x1\xFFFF\x1\x1\x1\xFFFF\x1\x2\x1\x3\x5\xFFFF";
		private const string DFA214_specialS =
			"\xA\xFFFF}>";
		private static readonly string[] DFA214_transitionS =
			{
				"\x1\x4\x10\xFFFF\x1\x3\x3\xFFFF\x1\x1\x3\xFFFF\x1\x2\x6\xFFFF\x1\x4"+
				"\x10\xFFFF\x1\x3\x3\xFFFF\x1\x1",
				"",
				"\x1\x5\x3\xFFFF\x1\x4\x1\x6\x1\x4\x1\x6\x1C\xFFFF\x1\x3\x3\xFFFF\x1"+
				"\x1\x1B\xFFFF\x1\x3\x3\xFFFF\x1\x1",
				"",
				"",
				"\x1\x7\x3\xFFFF\x1\x4\x1\x6\x1\x4\x1\x6",
				"\x1\x3\x3\xFFFF\x1\x1",
				"\x1\x8\x3\xFFFF\x1\x4\x1\x6\x1\x4\x1\x6",
				"\x1\x9\x3\xFFFF\x1\x4\x1\x6\x1\x4\x1\x6",
				"\x1\x4\x1\x6\x1\x4\x1\x6"
			};

		private static readonly short[] DFA214_eot = DFA.UnpackEncodedString(DFA214_eotS);
		private static readonly short[] DFA214_eof = DFA.UnpackEncodedString(DFA214_eofS);
		private static readonly char[] DFA214_min = DFA.UnpackEncodedStringToUnsignedChars(DFA214_minS);
		private static readonly char[] DFA214_max = DFA.UnpackEncodedStringToUnsignedChars(DFA214_maxS);
		private static readonly short[] DFA214_accept = DFA.UnpackEncodedString(DFA214_acceptS);
		private static readonly short[] DFA214_special = DFA.UnpackEncodedString(DFA214_specialS);
		private static readonly short[][] DFA214_transition;

		static DFA214()
		{
			int numStates = DFA214_transitionS.Length;
			DFA214_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA214_transition[i] = DFA.UnpackEncodedString(DFA214_transitionS[i]);
			}
		}

		public DFA214( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 214;
			this.eot = DFA214_eot;
			this.eof = DFA214_eof;
			this.min = DFA214_min;
			this.max = DFA214_max;
			this.accept = DFA214_accept;
			this.special = DFA214_special;
			this.transition = DFA214_transition;
		}

		public override string Description { get { return "618:17: ( X | T | C )"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

}

} // namespace CssParser


