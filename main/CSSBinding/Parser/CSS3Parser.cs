//
// CSS3Parser.cs
//
// Author:
//       Diyoda Sajjana <>
//
// Copyright (c) 2013 Diyoda Sajjana
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.


//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.3.1.7705
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.3.1.7705 CSS3.g3 2013-07-14 02:22:23

// The variable 'variable' is assigned but its value is never used.
//#pragma warning disable 219
// Unreachable code detected.
//#pragma warning disable 162

using System;
using System.Collections.Generic;
using Antlr.Runtime;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace Parser
{
	[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.3.1.7705")]
	[System.CLSCompliant(false)]
	public partial class CSS3Parser : Antlr.Runtime.Parser
	{
		internal static readonly string[] tokenNames = new string[] {
			"<invalid>", "<EOR>", "<DOWN>", "<UP>", "A", "ANGLE", "B", "BOM", "C", "CDC", "CDO", "CHARSET_SYM", "COLON", "COMMA", "COMMENT", "D", "DASHMATCH", "DIMENSION", "DOT", "E", "EMS", "ESCAPE", "EXS", "F", "FREQ", "G", "GREATER", "H", "HASH", "HEXCHAR", "I", "IDENT", "IMPORTANT_SYM", "IMPORT_SYM", "INCLUDES", "INVALID", "J", "K", "L", "LBRACE", "LBRACKET", "LENGTH", "LPAREN", "M", "MEDIA_SYM", "MINUS", "N", "NAME", "NL", "NMCHAR", "NMSTART", "NONASCII", "NUMBER", "O", "OPEQ", "P", "PAGE_SYM", "PERCENTAGE", "PLUS", "Q", "R", "RBRACE", "RBRACKET", "RPAREN", "S", "SEMI", "SOLIDUS", "STAR", "STRING", "T", "TIME", "U", "UNICODE", "URI", "URL", "V", "W", "WS", "X", "Y", "Z"
		};
		public const int EOF=-1;
		public const int A=4;
		public const int ANGLE=5;
		public const int B=6;
		public const int BOM=7;
		public const int C=8;
		public const int CDC=9;
		public const int CDO=10;
		public const int CHARSET_SYM=11;
		public const int COLON=12;
		public const int COMMA=13;
		public const int COMMENT=14;
		public const int D=15;
		public const int DASHMATCH=16;
		public const int DIMENSION=17;
		public const int DOT=18;
		public const int E=19;
		public const int EMS=20;
		public const int ESCAPE=21;
		public const int EXS=22;
		public const int F=23;
		public const int FREQ=24;
		public const int G=25;
		public const int GREATER=26;
		public const int H=27;
		public const int HASH=28;
		public const int HEXCHAR=29;
		public const int I=30;
		public const int IDENT=31;
		public const int IMPORTANT_SYM=32;
		public const int IMPORT_SYM=33;
		public const int INCLUDES=34;
		public const int INVALID=35;
		public const int J=36;
		public const int K=37;
		public const int L=38;
		public const int LBRACE=39;
		public const int LBRACKET=40;
		public const int LENGTH=41;
		public const int LPAREN=42;
		public const int M=43;
		public const int MEDIA_SYM=44;
		public const int MINUS=45;
		public const int N=46;
		public const int NAME=47;
		public const int NL=48;
		public const int NMCHAR=49;
		public const int NMSTART=50;
		public const int NONASCII=51;
		public const int NUMBER=52;
		public const int O=53;
		public const int OPEQ=54;
		public const int P=55;
		public const int PAGE_SYM=56;
		public const int PERCENTAGE=57;
		public const int PLUS=58;
		public const int Q=59;
		public const int R=60;
		public const int RBRACE=61;
		public const int RBRACKET=62;
		public const int RPAREN=63;
		public const int S=64;
		public const int SEMI=65;
		public const int SOLIDUS=66;
		public const int STAR=67;
		public const int STRING=68;
		public const int T=69;
		public const int TIME=70;
		public const int U=71;
		public const int UNICODE=72;
		public const int URI=73;
		public const int URL=74;
		public const int V=75;
		public const int W=76;
		public const int WS=77;
		public const int X=78;
		public const int Y=79;
		public const int Z=80;

		// delegates
		// delegators

		public CSS3Parser( ITokenStream input )
			: this( input, new RecognizerSharedState() )
		{
		}
		public CSS3Parser(ITokenStream input, RecognizerSharedState state)
			: base(input, state)
		{
			ITreeAdaptor treeAdaptor = default(ITreeAdaptor);
			CreateTreeAdaptor(ref treeAdaptor);

			TreeAdaptor = treeAdaptor ?? new CommonTreeAdaptor();


			OnCreated();
		}

		// Implement this function in your helper file to use a custom tree adaptor
		partial void CreateTreeAdaptor(ref ITreeAdaptor adaptor);

		private ITreeAdaptor adaptor;

		public ITreeAdaptor TreeAdaptor
		{
			get
			{
				return adaptor;
			}

			set
			{
				this.adaptor = value;
			}
		}

		public override string[] TokenNames { get { return CSS3Parser.tokenNames; } }
		public override string GrammarFileName { get { return "CSS3.g3"; } }


		partial void OnCreated();
		partial void EnterRule(string ruleName, int ruleIndex);
		partial void LeaveRule(string ruleName, int ruleIndex);

		#region Rules
		private sealed partial class styleSheet_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
		{
			private CommonTree _tree;
			public CommonTree Tree { get { return _tree; } set { _tree = value; } }
			object IAstRuleReturnScope.Tree { get { return Tree; } }
			public styleSheet_return(CSS3Parser grammar) {OnCreated(grammar);}
			partial void OnCreated(CSS3Parser grammar);
		}

		partial void EnterRule_styleSheet();
		partial void LeaveRule_styleSheet();

		// $ANTLR start "styleSheet"
		// CSS3.g3:38:1: styleSheet : charSet ( imports )* bodylist EOF ;
		[GrammarRule("styleSheet")]
		private CSS3Parser.styleSheet_return styleSheet()
		{
			EnterRule_styleSheet();
			EnterRule("styleSheet", 1);
			TraceIn("styleSheet", 1);
			CSS3Parser.styleSheet_return retval = new CSS3Parser.styleSheet_return(this);
			retval.Start = (CommonToken)input.LT(1);

			CommonTree root_0 = default(CommonTree);

			CommonToken EOF4 = default(CommonToken);
			CSS3Parser.charSet_return charSet1 = default(CSS3Parser.charSet_return);
			CSS3Parser.imports_return imports2 = default(CSS3Parser.imports_return);
			CSS3Parser.bodylist_return bodylist3 = default(CSS3Parser.bodylist_return);

			CommonTree EOF4_tree = default(CommonTree);

			try { DebugEnterRule(GrammarFileName, "styleSheet");
				DebugLocation(38, 4);
				try
				{
					// CSS3.g3:39:5: ( charSet ( imports )* bodylist EOF )
					DebugEnterAlt(1);
					// CSS3.g3:39:9: charSet ( imports )* bodylist EOF
					{
						root_0 = (CommonTree)adaptor.Nil();

						DebugLocation(39, 9);
						PushFollow(Follow._charSet_in_styleSheet99);
						charSet1=charSet();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, charSet1.Tree);
						DebugLocation(40, 9);
						// CSS3.g3:40:9: ( imports )*
						try { DebugEnterSubRule(1);
							while (true)
							{
								int alt1=2;
								try { DebugEnterDecision(1, false);
									int LA1_0 = input.LA(1);

									if ((LA1_0==IMPORT_SYM))
									{
										alt1 = 1;
									}


								} finally { DebugExitDecision(1); }
								switch ( alt1 )
								{
									case 1:
									DebugEnterAlt(1);
									// CSS3.g3:40:9: imports
									{
										DebugLocation(40, 9);
										PushFollow(Follow._imports_in_styleSheet109);
										imports2=imports();
										PopFollow();
										if (state.failed) return retval;
										if (state.backtracking == 0) adaptor.AddChild(root_0, imports2.Tree);

									}
									break;

									default:
									goto loop1;
								}
							}

							loop1:
								;

						} finally { DebugExitSubRule(1); }

						DebugLocation(41, 9);
						PushFollow(Follow._bodylist_in_styleSheet120);
						bodylist3=bodylist();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, bodylist3.Tree);
						DebugLocation(42, 6);
						EOF4=(CommonToken)Match(input,EOF,Follow._EOF_in_styleSheet127); if (state.failed) return retval;
						if (state.backtracking == 0) {
							EOF4_tree = (CommonTree)adaptor.Create(EOF4);
							adaptor.AddChild(root_0, EOF4_tree);
						}

					}

					retval.Stop = (CommonToken)input.LT(-1);

					if (state.backtracking == 0) {
						retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
						adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
					}
				}
				catch (RecognitionException re)
				{
					ReportError(re);
					Recover(input,re);
					retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

				}
				finally
				{
					TraceOut("styleSheet", 1);
					LeaveRule("styleSheet", 1);
					LeaveRule_styleSheet();
				}
				DebugLocation(43, 4);
			} finally { DebugExitRule(GrammarFileName, "styleSheet"); }
			return retval;

		}
		// $ANTLR end "styleSheet"

		private sealed partial class charSet_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
		{
			private CommonTree _tree;
			public CommonTree Tree { get { return _tree; } set { _tree = value; } }
			object IAstRuleReturnScope.Tree { get { return Tree; } }
			public charSet_return(CSS3Parser grammar) {OnCreated(grammar);}
			partial void OnCreated(CSS3Parser grammar);
		}

		partial void EnterRule_charSet();
		partial void LeaveRule_charSet();

		// $ANTLR start "charSet"
		// CSS3.g3:48:1: charSet : ( CHARSET_SYM STRING SEMI |);
		[GrammarRule("charSet")]
		private CSS3Parser.charSet_return charSet()
		{
			EnterRule_charSet();
			EnterRule("charSet", 2);
			TraceIn("charSet", 2);
			CSS3Parser.charSet_return retval = new CSS3Parser.charSet_return(this);
			retval.Start = (CommonToken)input.LT(1);

			CommonTree root_0 = default(CommonTree);

			CommonToken CHARSET_SYM5 = default(CommonToken);
			CommonToken STRING6 = default(CommonToken);
			CommonToken SEMI7 = default(CommonToken);

			CommonTree CHARSET_SYM5_tree = default(CommonTree);
			CommonTree STRING6_tree = default(CommonTree);
			CommonTree SEMI7_tree = default(CommonTree);

			try { DebugEnterRule(GrammarFileName, "charSet");
				DebugLocation(48, 4);
				try
				{
					// CSS3.g3:49:5: ( CHARSET_SYM STRING SEMI |)
					int alt2=2;
					try { DebugEnterDecision(2, false);
						int LA2_0 = input.LA(1);

						if ((LA2_0==CHARSET_SYM))
						{
							alt2 = 1;
						}
						else if ((LA2_0==EOF||LA2_0==COLON||LA2_0==DOT||LA2_0==HASH||LA2_0==IDENT||LA2_0==IMPORT_SYM||LA2_0==LBRACKET||LA2_0==MEDIA_SYM||LA2_0==PAGE_SYM||LA2_0==STAR))
						{
							alt2 = 2;
						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 2, 0, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					} finally { DebugExitDecision(2); }
					switch (alt2)
					{
						case 1:
						DebugEnterAlt(1);
						// CSS3.g3:49:9: CHARSET_SYM STRING SEMI
						{
							root_0 = (CommonTree)adaptor.Nil();

							DebugLocation(49, 9);
							CHARSET_SYM5=(CommonToken)Match(input,CHARSET_SYM,Follow._CHARSET_SYM_in_charSet153); if (state.failed) return retval;
							if (state.backtracking == 0) {
								CHARSET_SYM5_tree = (CommonTree)adaptor.Create(CHARSET_SYM5);
								adaptor.AddChild(root_0, CHARSET_SYM5_tree);
							}
							DebugLocation(49, 21);
							STRING6=(CommonToken)Match(input,STRING,Follow._STRING_in_charSet155); if (state.failed) return retval;
							if (state.backtracking == 0) {
								STRING6_tree = (CommonTree)adaptor.Create(STRING6);
								adaptor.AddChild(root_0, STRING6_tree);
							}
							DebugLocation(49, 28);
							SEMI7=(CommonToken)Match(input,SEMI,Follow._SEMI_in_charSet157); if (state.failed) return retval;
							if (state.backtracking == 0) {
								SEMI7_tree = (CommonTree)adaptor.Create(SEMI7);
								adaptor.AddChild(root_0, SEMI7_tree);
							}

						}
						break;
						case 2:
						DebugEnterAlt(2);
						// CSS3.g3:51:5: 
						{
							root_0 = (CommonTree)adaptor.Nil();

						}
						break;

					}
					retval.Stop = (CommonToken)input.LT(-1);

					if (state.backtracking == 0) {
						retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
						adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
					}
				}
				catch (RecognitionException re)
				{
					ReportError(re);
					Recover(input,re);
					retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

				}
				finally
				{
					TraceOut("charSet", 2);
					LeaveRule("charSet", 2);
					LeaveRule_charSet();
				}
				DebugLocation(51, 4);
			} finally { DebugExitRule(GrammarFileName, "charSet"); }
			return retval;

		}
		// $ANTLR end "charSet"

		private sealed partial class imports_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
		{
			private CommonTree _tree;
			public CommonTree Tree { get { return _tree; } set { _tree = value; } }
			object IAstRuleReturnScope.Tree { get { return Tree; } }
			public imports_return(CSS3Parser grammar) {OnCreated(grammar);}
			partial void OnCreated(CSS3Parser grammar);
		}

		partial void EnterRule_imports();
		partial void LeaveRule_imports();

		// $ANTLR start "imports"
		// CSS3.g3:56:1: imports : IMPORT_SYM ( STRING | URI ) ( medium ( COMMA medium )* )? SEMI ;
		[GrammarRule("imports")]
		private CSS3Parser.imports_return imports()
		{
			EnterRule_imports();
			EnterRule("imports", 3);
			TraceIn("imports", 3);
			CSS3Parser.imports_return retval = new CSS3Parser.imports_return(this);
			retval.Start = (CommonToken)input.LT(1);

			CommonTree root_0 = default(CommonTree);

			CommonToken IMPORT_SYM8 = default(CommonToken);
			CommonToken set9 = default(CommonToken);
			CommonToken COMMA11 = default(CommonToken);
			CommonToken SEMI13 = default(CommonToken);
			CSS3Parser.medium_return medium10 = default(CSS3Parser.medium_return);
			CSS3Parser.medium_return medium12 = default(CSS3Parser.medium_return);

			CommonTree IMPORT_SYM8_tree = default(CommonTree);
			CommonTree set9_tree = default(CommonTree);
			CommonTree COMMA11_tree = default(CommonTree);
			CommonTree SEMI13_tree = default(CommonTree);

			try { DebugEnterRule(GrammarFileName, "imports");
				DebugLocation(56, 4);
				try
				{
					// CSS3.g3:57:5: ( IMPORT_SYM ( STRING | URI ) ( medium ( COMMA medium )* )? SEMI )
					DebugEnterAlt(1);
					// CSS3.g3:57:9: IMPORT_SYM ( STRING | URI ) ( medium ( COMMA medium )* )? SEMI
					{
						root_0 = (CommonTree)adaptor.Nil();

						DebugLocation(57, 9);
						IMPORT_SYM8=(CommonToken)Match(input,IMPORT_SYM,Follow._IMPORT_SYM_in_imports185); if (state.failed) return retval;
						if (state.backtracking == 0) {
							IMPORT_SYM8_tree = (CommonTree)adaptor.Create(IMPORT_SYM8);
							adaptor.AddChild(root_0, IMPORT_SYM8_tree);
						}
						DebugLocation(57, 20);
						set9=(CommonToken)input.LT(1);
						if (input.LA(1)==STRING||input.LA(1)==URI)
						{
							input.Consume();
							if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set9));
							state.errorRecovery=false;state.failed=false;
						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							MismatchedSetException mse = new MismatchedSetException(null,input);
							DebugRecognitionException(mse);
							throw mse;
						}

						DebugLocation(57, 33);
						// CSS3.g3:57:33: ( medium ( COMMA medium )* )?
						int alt4=2;
						try { DebugEnterSubRule(4);
							try { DebugEnterDecision(4, false);
								int LA4_0 = input.LA(1);

								if ((LA4_0==IDENT))
								{
									alt4 = 1;
								}
							} finally { DebugExitDecision(4); }
							switch (alt4)
							{
								case 1:
								DebugEnterAlt(1);
								// CSS3.g3:57:34: medium ( COMMA medium )*
								{
									DebugLocation(57, 34);
									PushFollow(Follow._medium_in_imports194);
									medium10=medium();
									PopFollow();
									if (state.failed) return retval;
									if (state.backtracking == 0) adaptor.AddChild(root_0, medium10.Tree);
									DebugLocation(57, 41);
									// CSS3.g3:57:41: ( COMMA medium )*
									try { DebugEnterSubRule(3);
										while (true)
										{
											int alt3=2;
											try { DebugEnterDecision(3, false);
												int LA3_0 = input.LA(1);

												if ((LA3_0==COMMA))
												{
													alt3 = 1;
												}


											} finally { DebugExitDecision(3); }
											switch ( alt3 )
											{
												case 1:
												DebugEnterAlt(1);
												// CSS3.g3:57:42: COMMA medium
												{
													DebugLocation(57, 42);
													COMMA11=(CommonToken)Match(input,COMMA,Follow._COMMA_in_imports197); if (state.failed) return retval;
													if (state.backtracking == 0) {
														COMMA11_tree = (CommonTree)adaptor.Create(COMMA11);
														adaptor.AddChild(root_0, COMMA11_tree);
													}
													DebugLocation(57, 48);
													PushFollow(Follow._medium_in_imports199);
													medium12=medium();
													PopFollow();
													if (state.failed) return retval;
													if (state.backtracking == 0) adaptor.AddChild(root_0, medium12.Tree);

												}
												break;

												default:
												goto loop3;
											}
										}

										loop3:
											;

									} finally { DebugExitSubRule(3); }


								}
								break;

							}
						} finally { DebugExitSubRule(4); }

						DebugLocation(57, 59);
						SEMI13=(CommonToken)Match(input,SEMI,Follow._SEMI_in_imports205); if (state.failed) return retval;
						if (state.backtracking == 0) {
							SEMI13_tree = (CommonTree)adaptor.Create(SEMI13);
							adaptor.AddChild(root_0, SEMI13_tree);
						}

					}

					retval.Stop = (CommonToken)input.LT(-1);

					if (state.backtracking == 0) {
						retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
						adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
					}
				}
				catch (RecognitionException re)
				{
					ReportError(re);
					Recover(input,re);
					retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

				}
				finally
				{
					TraceOut("imports", 3);
					LeaveRule("imports", 3);
					LeaveRule_imports();
				}
				DebugLocation(58, 4);
			} finally { DebugExitRule(GrammarFileName, "imports"); }
			return retval;

		}
		// $ANTLR end "imports"

		private sealed partial class media_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
		{
			private CommonTree _tree;
			public CommonTree Tree { get { return _tree; } set { _tree = value; } }
			object IAstRuleReturnScope.Tree { get { return Tree; } }
			public media_return(CSS3Parser grammar) {OnCreated(grammar);}
			partial void OnCreated(CSS3Parser grammar);
		}

		partial void EnterRule_media();
		partial void LeaveRule_media();

		// $ANTLR start "media"
		// CSS3.g3:64:1: media : MEDIA_SYM medium ( COMMA medium )* LBRACE ruleSet RBRACE ;
		[GrammarRule("media")]
		private CSS3Parser.media_return media()
		{
			EnterRule_media();
			EnterRule("media", 4);
			TraceIn("media", 4);
			CSS3Parser.media_return retval = new CSS3Parser.media_return(this);
			retval.Start = (CommonToken)input.LT(1);

			CommonTree root_0 = default(CommonTree);

			CommonToken MEDIA_SYM14 = default(CommonToken);
			CommonToken COMMA16 = default(CommonToken);
			CommonToken LBRACE18 = default(CommonToken);
			CommonToken RBRACE20 = default(CommonToken);
			CSS3Parser.medium_return medium15 = default(CSS3Parser.medium_return);
			CSS3Parser.medium_return medium17 = default(CSS3Parser.medium_return);
			CSS3Parser.ruleSet_return ruleSet19 = default(CSS3Parser.ruleSet_return);

			CommonTree MEDIA_SYM14_tree = default(CommonTree);
			CommonTree COMMA16_tree = default(CommonTree);
			CommonTree LBRACE18_tree = default(CommonTree);
			CommonTree RBRACE20_tree = default(CommonTree);

			try { DebugEnterRule(GrammarFileName, "media");
				DebugLocation(64, 4);
				try
				{
					// CSS3.g3:65:5: ( MEDIA_SYM medium ( COMMA medium )* LBRACE ruleSet RBRACE )
					DebugEnterAlt(1);
					// CSS3.g3:65:7: MEDIA_SYM medium ( COMMA medium )* LBRACE ruleSet RBRACE
					{
						root_0 = (CommonTree)adaptor.Nil();

						DebugLocation(65, 7);
						MEDIA_SYM14=(CommonToken)Match(input,MEDIA_SYM,Follow._MEDIA_SYM_in_media226); if (state.failed) return retval;
						if (state.backtracking == 0) {
							MEDIA_SYM14_tree = (CommonTree)adaptor.Create(MEDIA_SYM14);
							adaptor.AddChild(root_0, MEDIA_SYM14_tree);
						}
						DebugLocation(65, 17);
						PushFollow(Follow._medium_in_media228);
						medium15=medium();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, medium15.Tree);
						DebugLocation(65, 24);
						// CSS3.g3:65:24: ( COMMA medium )*
						try { DebugEnterSubRule(5);
							while (true)
							{
								int alt5=2;
								try { DebugEnterDecision(5, false);
									int LA5_0 = input.LA(1);

									if ((LA5_0==COMMA))
									{
										alt5 = 1;
									}


								} finally { DebugExitDecision(5); }
								switch ( alt5 )
								{
									case 1:
									DebugEnterAlt(1);
									// CSS3.g3:65:25: COMMA medium
									{
										DebugLocation(65, 25);
										COMMA16=(CommonToken)Match(input,COMMA,Follow._COMMA_in_media231); if (state.failed) return retval;
										if (state.backtracking == 0) {
											COMMA16_tree = (CommonTree)adaptor.Create(COMMA16);
											adaptor.AddChild(root_0, COMMA16_tree);
										}
										DebugLocation(65, 31);
										PushFollow(Follow._medium_in_media233);
										medium17=medium();
										PopFollow();
										if (state.failed) return retval;
										if (state.backtracking == 0) adaptor.AddChild(root_0, medium17.Tree);

									}
									break;

									default:
									goto loop5;
								}
							}

							loop5:
								;

						} finally { DebugExitSubRule(5); }

						DebugLocation(66, 9);
						LBRACE18=(CommonToken)Match(input,LBRACE,Follow._LBRACE_in_media245); if (state.failed) return retval;
						if (state.backtracking == 0) {
							LBRACE18_tree = (CommonTree)adaptor.Create(LBRACE18);
							adaptor.AddChild(root_0, LBRACE18_tree);
						}
						DebugLocation(67, 13);
						PushFollow(Follow._ruleSet_in_media259);
						ruleSet19=ruleSet();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, ruleSet19.Tree);
						DebugLocation(68, 9);
						RBRACE20=(CommonToken)Match(input,RBRACE,Follow._RBRACE_in_media269); if (state.failed) return retval;
						if (state.backtracking == 0) {
							RBRACE20_tree = (CommonTree)adaptor.Create(RBRACE20);
							adaptor.AddChild(root_0, RBRACE20_tree);
						}

					}

					retval.Stop = (CommonToken)input.LT(-1);

					if (state.backtracking == 0) {
						retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
						adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
					}
				}
				catch (RecognitionException re)
				{
					ReportError(re);
					Recover(input,re);
					retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

				}
				finally
				{
					TraceOut("media", 4);
					LeaveRule("media", 4);
					LeaveRule_media();
				}
				DebugLocation(69, 4);
			} finally { DebugExitRule(GrammarFileName, "media"); }
			return retval;

		}
		// $ANTLR end "media"

		private sealed partial class medium_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
		{
			private CommonTree _tree;
			public CommonTree Tree { get { return _tree; } set { _tree = value; } }
			object IAstRuleReturnScope.Tree { get { return Tree; } }
			public medium_return(CSS3Parser grammar) {OnCreated(grammar);}
			partial void OnCreated(CSS3Parser grammar);
		}

		partial void EnterRule_medium();
		partial void LeaveRule_medium();

		// $ANTLR start "medium"
		// CSS3.g3:74:1: medium : IDENT ;
		[GrammarRule("medium")]
		private CSS3Parser.medium_return medium()
		{
			EnterRule_medium();
			EnterRule("medium", 5);
			TraceIn("medium", 5);
			CSS3Parser.medium_return retval = new CSS3Parser.medium_return(this);
			retval.Start = (CommonToken)input.LT(1);

			CommonTree root_0 = default(CommonTree);

			CommonToken IDENT21 = default(CommonToken);

			CommonTree IDENT21_tree = default(CommonTree);

			try { DebugEnterRule(GrammarFileName, "medium");
				DebugLocation(74, 4);
				try
				{
					// CSS3.g3:75:5: ( IDENT )
					DebugEnterAlt(1);
					// CSS3.g3:75:7: IDENT
					{
						root_0 = (CommonTree)adaptor.Nil();

						DebugLocation(75, 7);
						IDENT21=(CommonToken)Match(input,IDENT,Follow._IDENT_in_medium289); if (state.failed) return retval;
						if (state.backtracking == 0) {
							IDENT21_tree = (CommonTree)adaptor.Create(IDENT21);
							adaptor.AddChild(root_0, IDENT21_tree);
						}

					}

					retval.Stop = (CommonToken)input.LT(-1);

					if (state.backtracking == 0) {
						retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
						adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
					}
				}
				catch (RecognitionException re)
				{
					ReportError(re);
					Recover(input,re);
					retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

				}
				finally
				{
					TraceOut("medium", 5);
					LeaveRule("medium", 5);
					LeaveRule_medium();
				}
				DebugLocation(76, 4);
			} finally { DebugExitRule(GrammarFileName, "medium"); }
			return retval;

		}
		// $ANTLR end "medium"

		private sealed partial class bodylist_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
		{
			private CommonTree _tree;
			public CommonTree Tree { get { return _tree; } set { _tree = value; } }
			object IAstRuleReturnScope.Tree { get { return Tree; } }
			public bodylist_return(CSS3Parser grammar) {OnCreated(grammar);}
			partial void OnCreated(CSS3Parser grammar);
		}

		partial void EnterRule_bodylist();
		partial void LeaveRule_bodylist();

		// $ANTLR start "bodylist"
		// CSS3.g3:79:1: bodylist : ( bodyset )* ;
		[GrammarRule("bodylist")]
		private CSS3Parser.bodylist_return bodylist()
		{
			EnterRule_bodylist();
			EnterRule("bodylist", 6);
			TraceIn("bodylist", 6);
			CSS3Parser.bodylist_return retval = new CSS3Parser.bodylist_return(this);
			retval.Start = (CommonToken)input.LT(1);

			CommonTree root_0 = default(CommonTree);

			CSS3Parser.bodyset_return bodyset22 = default(CSS3Parser.bodyset_return);


			try { DebugEnterRule(GrammarFileName, "bodylist");
				DebugLocation(79, 4);
				try
				{
					// CSS3.g3:80:5: ( ( bodyset )* )
					DebugEnterAlt(1);
					// CSS3.g3:80:7: ( bodyset )*
					{
						root_0 = (CommonTree)adaptor.Nil();

						DebugLocation(80, 7);
						// CSS3.g3:80:7: ( bodyset )*
						try { DebugEnterSubRule(6);
							while (true)
							{
								int alt6=2;
								try { DebugEnterDecision(6, false);
									int LA6_0 = input.LA(1);

									if ((LA6_0==COLON||LA6_0==DOT||LA6_0==HASH||LA6_0==IDENT||LA6_0==LBRACKET||LA6_0==MEDIA_SYM||LA6_0==PAGE_SYM||LA6_0==STAR))
									{
										alt6 = 1;
									}


								} finally { DebugExitDecision(6); }
								switch ( alt6 )
								{
									case 1:
									DebugEnterAlt(1);
									// CSS3.g3:80:7: bodyset
									{
										DebugLocation(80, 7);
										PushFollow(Follow._bodyset_in_bodylist312);
										bodyset22=bodyset();
										PopFollow();
										if (state.failed) return retval;
										if (state.backtracking == 0) adaptor.AddChild(root_0, bodyset22.Tree);

									}
									break;

									default:
									goto loop6;
								}
							}

							loop6:
								;

						} finally { DebugExitSubRule(6); }


					}

					retval.Stop = (CommonToken)input.LT(-1);

					if (state.backtracking == 0) {
						retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
						adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
					}
				}
				catch (RecognitionException re)
				{
					ReportError(re);
					Recover(input,re);
					retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

				}
				finally
				{
					TraceOut("bodylist", 6);
					LeaveRule("bodylist", 6);
					LeaveRule_bodylist();
				}
				DebugLocation(81, 4);
			} finally { DebugExitRule(GrammarFileName, "bodylist"); }
			return retval;

		}
		// $ANTLR end "bodylist"

		private sealed partial class bodyset_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
		{
			private CommonTree _tree;
			public CommonTree Tree { get { return _tree; } set { _tree = value; } }
			object IAstRuleReturnScope.Tree { get { return Tree; } }
			public bodyset_return(CSS3Parser grammar) {OnCreated(grammar);}
			partial void OnCreated(CSS3Parser grammar);
		}

		partial void EnterRule_bodyset();
		partial void LeaveRule_bodyset();

		// $ANTLR start "bodyset"
		// CSS3.g3:83:1: bodyset : ( ruleSet | media | page );
		[GrammarRule("bodyset")]
		private CSS3Parser.bodyset_return bodyset()
		{
			EnterRule_bodyset();
			EnterRule("bodyset", 7);
			TraceIn("bodyset", 7);
			CSS3Parser.bodyset_return retval = new CSS3Parser.bodyset_return(this);
			retval.Start = (CommonToken)input.LT(1);

			CommonTree root_0 = default(CommonTree);

			CSS3Parser.ruleSet_return ruleSet23 = default(CSS3Parser.ruleSet_return);
			CSS3Parser.media_return media24 = default(CSS3Parser.media_return);
			CSS3Parser.page_return page25 = default(CSS3Parser.page_return);


			try { DebugEnterRule(GrammarFileName, "bodyset");
				DebugLocation(83, 4);
				try
				{
					// CSS3.g3:84:5: ( ruleSet | media | page )
					int alt7=3;
					try { DebugEnterDecision(7, false);
						switch (input.LA(1))
						{
							case COLON:
							case DOT:
							case HASH:
							case IDENT:
							case LBRACKET:
							case STAR:
						{
							alt7 = 1;
						}
							break;
							case MEDIA_SYM:
						{
							alt7 = 2;
						}
							break;
							case PAGE_SYM:
						{
							alt7 = 3;
						}
							break;
							default:
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 7, 0, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						}

					} finally { DebugExitDecision(7); }
					switch (alt7)
					{
						case 1:
						DebugEnterAlt(1);
						// CSS3.g3:84:7: ruleSet
						{
							root_0 = (CommonTree)adaptor.Nil();

							DebugLocation(84, 7);
							PushFollow(Follow._ruleSet_in_bodyset334);
							ruleSet23=ruleSet();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) adaptor.AddChild(root_0, ruleSet23.Tree);

						}
						break;
						case 2:
						DebugEnterAlt(2);
						// CSS3.g3:85:7: media
						{
							root_0 = (CommonTree)adaptor.Nil();

							DebugLocation(85, 7);
							PushFollow(Follow._media_in_bodyset342);
							media24=media();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) adaptor.AddChild(root_0, media24.Tree);

						}
						break;
						case 3:
						DebugEnterAlt(3);
						// CSS3.g3:86:7: page
						{
							root_0 = (CommonTree)adaptor.Nil();

							DebugLocation(86, 7);
							PushFollow(Follow._page_in_bodyset350);
							page25=page();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) adaptor.AddChild(root_0, page25.Tree);

						}
						break;

					}
					retval.Stop = (CommonToken)input.LT(-1);

					if (state.backtracking == 0) {
						retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
						adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
					}
				}
				catch (RecognitionException re)
				{
					ReportError(re);
					Recover(input,re);
					retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

				}
				finally
				{
					TraceOut("bodyset", 7);
					LeaveRule("bodyset", 7);
					LeaveRule_bodyset();
				}
				DebugLocation(87, 4);
			} finally { DebugExitRule(GrammarFileName, "bodyset"); }
			return retval;

		}
		// $ANTLR end "bodyset"

		private sealed partial class page_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
		{
			private CommonTree _tree;
			public CommonTree Tree { get { return _tree; } set { _tree = value; } }
			object IAstRuleReturnScope.Tree { get { return Tree; } }
			public page_return(CSS3Parser grammar) {OnCreated(grammar);}
			partial void OnCreated(CSS3Parser grammar);
		}

		partial void EnterRule_page();
		partial void LeaveRule_page();

		// $ANTLR start "page"
		// CSS3.g3:89:1: page : PAGE_SYM ( pseudoPage )? LBRACE declaration SEMI ( declaration SEMI )* RBRACE ;
		[GrammarRule("page")]
		private CSS3Parser.page_return page()
		{
			EnterRule_page();
			EnterRule("page", 8);
			TraceIn("page", 8);
			CSS3Parser.page_return retval = new CSS3Parser.page_return(this);
			retval.Start = (CommonToken)input.LT(1);

			CommonTree root_0 = default(CommonTree);

			CommonToken PAGE_SYM26 = default(CommonToken);
			CommonToken LBRACE28 = default(CommonToken);
			CommonToken SEMI30 = default(CommonToken);
			CommonToken SEMI32 = default(CommonToken);
			CommonToken RBRACE33 = default(CommonToken);
			CSS3Parser.pseudoPage_return pseudoPage27 = default(CSS3Parser.pseudoPage_return);
			CSS3Parser.declaration_return declaration29 = default(CSS3Parser.declaration_return);
			CSS3Parser.declaration_return declaration31 = default(CSS3Parser.declaration_return);

			CommonTree PAGE_SYM26_tree = default(CommonTree);
			CommonTree LBRACE28_tree = default(CommonTree);
			CommonTree SEMI30_tree = default(CommonTree);
			CommonTree SEMI32_tree = default(CommonTree);
			CommonTree RBRACE33_tree = default(CommonTree);

			try { DebugEnterRule(GrammarFileName, "page");
				DebugLocation(89, 4);
				try
				{
					// CSS3.g3:90:5: ( PAGE_SYM ( pseudoPage )? LBRACE declaration SEMI ( declaration SEMI )* RBRACE )
					DebugEnterAlt(1);
					// CSS3.g3:90:7: PAGE_SYM ( pseudoPage )? LBRACE declaration SEMI ( declaration SEMI )* RBRACE
					{
						root_0 = (CommonTree)adaptor.Nil();

						DebugLocation(90, 7);
						PAGE_SYM26=(CommonToken)Match(input,PAGE_SYM,Follow._PAGE_SYM_in_page374); if (state.failed) return retval;
						if (state.backtracking == 0) {
							PAGE_SYM26_tree = (CommonTree)adaptor.Create(PAGE_SYM26);
							adaptor.AddChild(root_0, PAGE_SYM26_tree);
						}
						DebugLocation(90, 16);
						// CSS3.g3:90:16: ( pseudoPage )?
						int alt8=2;
						try { DebugEnterSubRule(8);
							try { DebugEnterDecision(8, false);
								int LA8_0 = input.LA(1);

								if ((LA8_0==COLON))
								{
									alt8 = 1;
								}
							} finally { DebugExitDecision(8); }
							switch (alt8)
							{
								case 1:
								DebugEnterAlt(1);
								// CSS3.g3:90:16: pseudoPage
								{
									DebugLocation(90, 16);
									PushFollow(Follow._pseudoPage_in_page376);
									pseudoPage27=pseudoPage();
									PopFollow();
									if (state.failed) return retval;
									if (state.backtracking == 0) adaptor.AddChild(root_0, pseudoPage27.Tree);

								}
								break;

							}
						} finally { DebugExitSubRule(8); }

						DebugLocation(91, 9);
						LBRACE28=(CommonToken)Match(input,LBRACE,Follow._LBRACE_in_page387); if (state.failed) return retval;
						if (state.backtracking == 0) {
							LBRACE28_tree = (CommonTree)adaptor.Create(LBRACE28);
							adaptor.AddChild(root_0, LBRACE28_tree);
						}
						DebugLocation(92, 13);
						PushFollow(Follow._declaration_in_page401);
						declaration29=declaration();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, declaration29.Tree);
						DebugLocation(92, 25);
						SEMI30=(CommonToken)Match(input,SEMI,Follow._SEMI_in_page403); if (state.failed) return retval;
						if (state.backtracking == 0) {
							SEMI30_tree = (CommonTree)adaptor.Create(SEMI30);
							adaptor.AddChild(root_0, SEMI30_tree);
						}
						DebugLocation(92, 30);
						// CSS3.g3:92:30: ( declaration SEMI )*
						try { DebugEnterSubRule(9);
							while (true)
							{
								int alt9=2;
								try { DebugEnterDecision(9, false);
									int LA9_0 = input.LA(1);

									if ((LA9_0==IDENT))
									{
										alt9 = 1;
									}


								} finally { DebugExitDecision(9); }
								switch ( alt9 )
								{
									case 1:
									DebugEnterAlt(1);
									// CSS3.g3:92:31: declaration SEMI
									{
										DebugLocation(92, 31);
										PushFollow(Follow._declaration_in_page406);
										declaration31=declaration();
										PopFollow();
										if (state.failed) return retval;
										if (state.backtracking == 0) adaptor.AddChild(root_0, declaration31.Tree);
										DebugLocation(92, 43);
										SEMI32=(CommonToken)Match(input,SEMI,Follow._SEMI_in_page408); if (state.failed) return retval;
										if (state.backtracking == 0) {
											SEMI32_tree = (CommonTree)adaptor.Create(SEMI32);
											adaptor.AddChild(root_0, SEMI32_tree);
										}

									}
									break;

									default:
									goto loop9;
								}
							}

							loop9:
								;

						} finally { DebugExitSubRule(9); }

						DebugLocation(93, 9);
						RBRACE33=(CommonToken)Match(input,RBRACE,Follow._RBRACE_in_page420); if (state.failed) return retval;
						if (state.backtracking == 0) {
							RBRACE33_tree = (CommonTree)adaptor.Create(RBRACE33);
							adaptor.AddChild(root_0, RBRACE33_tree);
						}

					}

					retval.Stop = (CommonToken)input.LT(-1);

					if (state.backtracking == 0) {
						retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
						adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
					}
				}
				catch (RecognitionException re)
				{
					ReportError(re);
					Recover(input,re);
					retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

				}
				finally
				{
					TraceOut("page", 8);
					LeaveRule("page", 8);
					LeaveRule_page();
				}
				DebugLocation(94, 4);
			} finally { DebugExitRule(GrammarFileName, "page"); }
			return retval;

		}
		// $ANTLR end "page"

		private sealed partial class pseudoPage_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
		{
			private CommonTree _tree;
			public CommonTree Tree { get { return _tree; } set { _tree = value; } }
			object IAstRuleReturnScope.Tree { get { return Tree; } }
			public pseudoPage_return(CSS3Parser grammar) {OnCreated(grammar);}
			partial void OnCreated(CSS3Parser grammar);
		}

		partial void EnterRule_pseudoPage();
		partial void LeaveRule_pseudoPage();

		// $ANTLR start "pseudoPage"
		// CSS3.g3:96:1: pseudoPage : COLON IDENT ;
		[GrammarRule("pseudoPage")]
		private CSS3Parser.pseudoPage_return pseudoPage()
		{
			EnterRule_pseudoPage();
			EnterRule("pseudoPage", 9);
			TraceIn("pseudoPage", 9);
			CSS3Parser.pseudoPage_return retval = new CSS3Parser.pseudoPage_return(this);
			retval.Start = (CommonToken)input.LT(1);

			CommonTree root_0 = default(CommonTree);

			CommonToken COLON34 = default(CommonToken);
			CommonToken IDENT35 = default(CommonToken);

			CommonTree COLON34_tree = default(CommonTree);
			CommonTree IDENT35_tree = default(CommonTree);

			try { DebugEnterRule(GrammarFileName, "pseudoPage");
				DebugLocation(96, 4);
				try
				{
					// CSS3.g3:97:5: ( COLON IDENT )
					DebugEnterAlt(1);
					// CSS3.g3:97:7: COLON IDENT
					{
						root_0 = (CommonTree)adaptor.Nil();

						DebugLocation(97, 7);
						COLON34=(CommonToken)Match(input,COLON,Follow._COLON_in_pseudoPage441); if (state.failed) return retval;
						if (state.backtracking == 0) {
							COLON34_tree = (CommonTree)adaptor.Create(COLON34);
							adaptor.AddChild(root_0, COLON34_tree);
						}
						DebugLocation(97, 13);
						IDENT35=(CommonToken)Match(input,IDENT,Follow._IDENT_in_pseudoPage443); if (state.failed) return retval;
						if (state.backtracking == 0) {
							IDENT35_tree = (CommonTree)adaptor.Create(IDENT35);
							adaptor.AddChild(root_0, IDENT35_tree);
						}

					}

					retval.Stop = (CommonToken)input.LT(-1);

					if (state.backtracking == 0) {
						retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
						adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
					}
				}
				catch (RecognitionException re)
				{
					ReportError(re);
					Recover(input,re);
					retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

				}
				finally
				{
					TraceOut("pseudoPage", 9);
					LeaveRule("pseudoPage", 9);
					LeaveRule_pseudoPage();
				}
				DebugLocation(98, 4);
			} finally { DebugExitRule(GrammarFileName, "pseudoPage"); }
			return retval;

		}
		// $ANTLR end "pseudoPage"

		private sealed partial class operator_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
		{
			private CommonTree _tree;
			public CommonTree Tree { get { return _tree; } set { _tree = value; } }
			object IAstRuleReturnScope.Tree { get { return Tree; } }
			public operator_return(CSS3Parser grammar) {OnCreated(grammar);}
			partial void OnCreated(CSS3Parser grammar);
		}

		partial void EnterRule_operator();
		partial void LeaveRule_operator();

		// $ANTLR start "operator"
		// CSS3.g3:100:1: operator : ( SOLIDUS | COMMA |);
		[GrammarRule("operator")]
		private CSS3Parser.operator_return @operator()
		{
			EnterRule_operator();
			EnterRule("operator", 10);
			TraceIn("operator", 10);
			CSS3Parser.operator_return retval = new CSS3Parser.operator_return(this);
			retval.Start = (CommonToken)input.LT(1);

			CommonTree root_0 = default(CommonTree);

			CommonToken SOLIDUS36 = default(CommonToken);
			CommonToken COMMA37 = default(CommonToken);

			CommonTree SOLIDUS36_tree = default(CommonTree);
			CommonTree COMMA37_tree = default(CommonTree);

			try { DebugEnterRule(GrammarFileName, "operator");
				DebugLocation(100, 4);
				try
				{
					// CSS3.g3:101:5: ( SOLIDUS | COMMA |)
					int alt10=3;
					try { DebugEnterDecision(10, false);
						switch (input.LA(1))
						{
							case SOLIDUS:
						{
							alt10 = 1;
						}
							break;
							case COMMA:
						{
							alt10 = 2;
						}
							break;
							case ANGLE:
							case EMS:
							case EXS:
							case FREQ:
							case HASH:
							case IDENT:
							case LENGTH:
							case MINUS:
							case NUMBER:
							case PERCENTAGE:
							case PLUS:
							case STRING:
							case TIME:
							case URI:
						{
							alt10 = 3;
						}
							break;
							default:
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 10, 0, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						}

					} finally { DebugExitDecision(10); }
					switch (alt10)
					{
						case 1:
						DebugEnterAlt(1);
						// CSS3.g3:101:7: SOLIDUS
						{
							root_0 = (CommonTree)adaptor.Nil();

							DebugLocation(101, 7);
							SOLIDUS36=(CommonToken)Match(input,SOLIDUS,Follow._SOLIDUS_in_operator464); if (state.failed) return retval;
							if (state.backtracking == 0) {
								SOLIDUS36_tree = (CommonTree)adaptor.Create(SOLIDUS36);
								adaptor.AddChild(root_0, SOLIDUS36_tree);
							}

						}
						break;
						case 2:
						DebugEnterAlt(2);
						// CSS3.g3:102:7: COMMA
						{
							root_0 = (CommonTree)adaptor.Nil();

							DebugLocation(102, 7);
							COMMA37=(CommonToken)Match(input,COMMA,Follow._COMMA_in_operator472); if (state.failed) return retval;
							if (state.backtracking == 0) {
								COMMA37_tree = (CommonTree)adaptor.Create(COMMA37);
								adaptor.AddChild(root_0, COMMA37_tree);
							}

						}
						break;
						case 3:
						DebugEnterAlt(3);
						// CSS3.g3:104:5: 
						{
							root_0 = (CommonTree)adaptor.Nil();

						}
						break;

					}
					retval.Stop = (CommonToken)input.LT(-1);

					if (state.backtracking == 0) {
						retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
						adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
					}
				}
				catch (RecognitionException re)
				{
					ReportError(re);
					Recover(input,re);
					retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

				}
				finally
				{
					TraceOut("operator", 10);
					LeaveRule("operator", 10);
					LeaveRule_operator();
				}
				DebugLocation(104, 4);
			} finally { DebugExitRule(GrammarFileName, "operator"); }
			return retval;

		}
		// $ANTLR end "operator"

		private sealed partial class combinator_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
		{
			private CommonTree _tree;
			public CommonTree Tree { get { return _tree; } set { _tree = value; } }
			object IAstRuleReturnScope.Tree { get { return Tree; } }
			public combinator_return(CSS3Parser grammar) {OnCreated(grammar);}
			partial void OnCreated(CSS3Parser grammar);
		}

		partial void EnterRule_combinator();
		partial void LeaveRule_combinator();

		// $ANTLR start "combinator"
		// CSS3.g3:106:1: combinator : ( PLUS | GREATER |);
		[GrammarRule("combinator")]
		private CSS3Parser.combinator_return combinator()
		{
			EnterRule_combinator();
			EnterRule("combinator", 11);
			TraceIn("combinator", 11);
			CSS3Parser.combinator_return retval = new CSS3Parser.combinator_return(this);
			retval.Start = (CommonToken)input.LT(1);

			CommonTree root_0 = default(CommonTree);

			CommonToken PLUS38 = default(CommonToken);
			CommonToken GREATER39 = default(CommonToken);

			CommonTree PLUS38_tree = default(CommonTree);
			CommonTree GREATER39_tree = default(CommonTree);

			try { DebugEnterRule(GrammarFileName, "combinator");
				DebugLocation(106, 4);
				try
				{
					// CSS3.g3:107:5: ( PLUS | GREATER |)
					int alt11=3;
					try { DebugEnterDecision(11, false);
						switch (input.LA(1))
						{
							case PLUS:
						{
							alt11 = 1;
						}
							break;
							case GREATER:
						{
							alt11 = 2;
						}
							break;
							case COLON:
							case DOT:
							case HASH:
							case IDENT:
							case LBRACKET:
							case STAR:
						{
							alt11 = 3;
						}
							break;
							default:
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 11, 0, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						}

					} finally { DebugExitDecision(11); }
					switch (alt11)
					{
						case 1:
						DebugEnterAlt(1);
						// CSS3.g3:107:7: PLUS
						{
							root_0 = (CommonTree)adaptor.Nil();

							DebugLocation(107, 7);
							PLUS38=(CommonToken)Match(input,PLUS,Follow._PLUS_in_combinator499); if (state.failed) return retval;
							if (state.backtracking == 0) {
								PLUS38_tree = (CommonTree)adaptor.Create(PLUS38);
								adaptor.AddChild(root_0, PLUS38_tree);
							}

						}
						break;
						case 2:
						DebugEnterAlt(2);
						// CSS3.g3:108:7: GREATER
						{
							root_0 = (CommonTree)adaptor.Nil();

							DebugLocation(108, 7);
							GREATER39=(CommonToken)Match(input,GREATER,Follow._GREATER_in_combinator507); if (state.failed) return retval;
							if (state.backtracking == 0) {
								GREATER39_tree = (CommonTree)adaptor.Create(GREATER39);
								adaptor.AddChild(root_0, GREATER39_tree);
							}

						}
						break;
						case 3:
						DebugEnterAlt(3);
						// CSS3.g3:110:5: 
						{
							root_0 = (CommonTree)adaptor.Nil();

						}
						break;

					}
					retval.Stop = (CommonToken)input.LT(-1);

					if (state.backtracking == 0) {
						retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
						adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
					}
				}
				catch (RecognitionException re)
				{
					ReportError(re);
					Recover(input,re);
					retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

				}
				finally
				{
					TraceOut("combinator", 11);
					LeaveRule("combinator", 11);
					LeaveRule_combinator();
				}
				DebugLocation(110, 4);
			} finally { DebugExitRule(GrammarFileName, "combinator"); }
			return retval;

		}
		// $ANTLR end "combinator"

		private sealed partial class unaryOperator_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
		{
			private CommonTree _tree;
			public CommonTree Tree { get { return _tree; } set { _tree = value; } }
			object IAstRuleReturnScope.Tree { get { return Tree; } }
			public unaryOperator_return(CSS3Parser grammar) {OnCreated(grammar);}
			partial void OnCreated(CSS3Parser grammar);
		}

		partial void EnterRule_unaryOperator();
		partial void LeaveRule_unaryOperator();

		// $ANTLR start "unaryOperator"
		// CSS3.g3:112:1: unaryOperator : ( MINUS | PLUS );
		[GrammarRule("unaryOperator")]
		private CSS3Parser.unaryOperator_return unaryOperator()
		{
			EnterRule_unaryOperator();
			EnterRule("unaryOperator", 12);
			TraceIn("unaryOperator", 12);
			CSS3Parser.unaryOperator_return retval = new CSS3Parser.unaryOperator_return(this);
			retval.Start = (CommonToken)input.LT(1);

			CommonTree root_0 = default(CommonTree);

			CommonToken set40 = default(CommonToken);

			CommonTree set40_tree = default(CommonTree);

			try { DebugEnterRule(GrammarFileName, "unaryOperator");
				DebugLocation(112, 4);
				try
				{
					// CSS3.g3:113:5: ( MINUS | PLUS )
					DebugEnterAlt(1);
					// CSS3.g3:
					{
						root_0 = (CommonTree)adaptor.Nil();

						DebugLocation(113, 5);
						set40=(CommonToken)input.LT(1);
						if (input.LA(1)==MINUS||input.LA(1)==PLUS)
						{
							input.Consume();
							if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set40));
							state.errorRecovery=false;state.failed=false;
						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							MismatchedSetException mse = new MismatchedSetException(null,input);
							DebugRecognitionException(mse);
							throw mse;
						}


					}

					retval.Stop = (CommonToken)input.LT(-1);

					if (state.backtracking == 0) {
						retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
						adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
					}
				}
				catch (RecognitionException re)
				{
					ReportError(re);
					Recover(input,re);
					retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

				}
				finally
				{
					TraceOut("unaryOperator", 12);
					LeaveRule("unaryOperator", 12);
					LeaveRule_unaryOperator();
				}
				DebugLocation(115, 4);
			} finally { DebugExitRule(GrammarFileName, "unaryOperator"); }
			return retval;

		}
		// $ANTLR end "unaryOperator"

		private sealed partial class property_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
		{
			private CommonTree _tree;
			public CommonTree Tree { get { return _tree; } set { _tree = value; } }
			object IAstRuleReturnScope.Tree { get { return Tree; } }
			public property_return(CSS3Parser grammar) {OnCreated(grammar);}
			partial void OnCreated(CSS3Parser grammar);
		}

		partial void EnterRule_property();
		partial void LeaveRule_property();

		// $ANTLR start "property"
		// CSS3.g3:117:1: property : IDENT ;
		[GrammarRule("property")]
		private CSS3Parser.property_return property()
		{
			EnterRule_property();
			EnterRule("property", 13);
			TraceIn("property", 13);
			CSS3Parser.property_return retval = new CSS3Parser.property_return(this);
			retval.Start = (CommonToken)input.LT(1);

			CommonTree root_0 = default(CommonTree);

			CommonToken IDENT41 = default(CommonToken);

			CommonTree IDENT41_tree = default(CommonTree);

			try { DebugEnterRule(GrammarFileName, "property");
				DebugLocation(117, 4);
				try
				{
					// CSS3.g3:118:5: ( IDENT )
					DebugEnterAlt(1);
					// CSS3.g3:118:7: IDENT
					{
						root_0 = (CommonTree)adaptor.Nil();

						DebugLocation(118, 7);
						IDENT41=(CommonToken)Match(input,IDENT,Follow._IDENT_in_property565); if (state.failed) return retval;
						if (state.backtracking == 0) {
							IDENT41_tree = (CommonTree)adaptor.Create(IDENT41);
							adaptor.AddChild(root_0, IDENT41_tree);
						}

					}

					retval.Stop = (CommonToken)input.LT(-1);

					if (state.backtracking == 0) {
						retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
						adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
					}
				}
				catch (RecognitionException re)
				{
					ReportError(re);
					Recover(input,re);
					retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

				}
				finally
				{
					TraceOut("property", 13);
					LeaveRule("property", 13);
					LeaveRule_property();
				}
				DebugLocation(119, 4);
			} finally { DebugExitRule(GrammarFileName, "property"); }
			return retval;

		}
		// $ANTLR end "property"

		private sealed partial class ruleSet_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
		{
			private CommonTree _tree;
			public CommonTree Tree { get { return _tree; } set { _tree = value; } }
			object IAstRuleReturnScope.Tree { get { return Tree; } }
			public ruleSet_return(CSS3Parser grammar) {OnCreated(grammar);}
			partial void OnCreated(CSS3Parser grammar);
		}

		partial void EnterRule_ruleSet();
		partial void LeaveRule_ruleSet();

		// $ANTLR start "ruleSet"
		// CSS3.g3:121:1: ruleSet : selector ( COMMA selector )* LBRACE declaration SEMI ( declaration SEMI )* RBRACE ;
		[GrammarRule("ruleSet")]
		private CSS3Parser.ruleSet_return ruleSet()
		{
			EnterRule_ruleSet();
			EnterRule("ruleSet", 14);
			TraceIn("ruleSet", 14);
			CSS3Parser.ruleSet_return retval = new CSS3Parser.ruleSet_return(this);
			retval.Start = (CommonToken)input.LT(1);

			CommonTree root_0 = default(CommonTree);

			CommonToken COMMA43 = default(CommonToken);
			CommonToken LBRACE45 = default(CommonToken);
			CommonToken SEMI47 = default(CommonToken);
			CommonToken SEMI49 = default(CommonToken);
			CommonToken RBRACE50 = default(CommonToken);
			CSS3Parser.selector_return selector42 = default(CSS3Parser.selector_return);
			CSS3Parser.selector_return selector44 = default(CSS3Parser.selector_return);
			CSS3Parser.declaration_return declaration46 = default(CSS3Parser.declaration_return);
			CSS3Parser.declaration_return declaration48 = default(CSS3Parser.declaration_return);

			CommonTree COMMA43_tree = default(CommonTree);
			CommonTree LBRACE45_tree = default(CommonTree);
			CommonTree SEMI47_tree = default(CommonTree);
			CommonTree SEMI49_tree = default(CommonTree);
			CommonTree RBRACE50_tree = default(CommonTree);

			try { DebugEnterRule(GrammarFileName, "ruleSet");
				DebugLocation(121, 4);
				try
				{
					// CSS3.g3:122:5: ( selector ( COMMA selector )* LBRACE declaration SEMI ( declaration SEMI )* RBRACE )
					DebugEnterAlt(1);
					// CSS3.g3:122:7: selector ( COMMA selector )* LBRACE declaration SEMI ( declaration SEMI )* RBRACE
					{
						root_0 = (CommonTree)adaptor.Nil();

						DebugLocation(122, 7);
						PushFollow(Follow._selector_in_ruleSet586);
						selector42=selector();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, selector42.Tree);
						DebugLocation(122, 16);
						// CSS3.g3:122:16: ( COMMA selector )*
						try { DebugEnterSubRule(12);
							while (true)
							{
								int alt12=2;
								try { DebugEnterDecision(12, false);
									int LA12_0 = input.LA(1);

									if ((LA12_0==COMMA))
									{
										alt12 = 1;
									}


								} finally { DebugExitDecision(12); }
								switch ( alt12 )
								{
									case 1:
									DebugEnterAlt(1);
									// CSS3.g3:122:17: COMMA selector
									{
										DebugLocation(122, 17);
										COMMA43=(CommonToken)Match(input,COMMA,Follow._COMMA_in_ruleSet589); if (state.failed) return retval;
										if (state.backtracking == 0) {
											COMMA43_tree = (CommonTree)adaptor.Create(COMMA43);
											adaptor.AddChild(root_0, COMMA43_tree);
										}
										DebugLocation(122, 23);
										PushFollow(Follow._selector_in_ruleSet591);
										selector44=selector();
										PopFollow();
										if (state.failed) return retval;
										if (state.backtracking == 0) adaptor.AddChild(root_0, selector44.Tree);

									}
									break;

									default:
									goto loop12;
								}
							}

							loop12:
								;

						} finally { DebugExitSubRule(12); }

						DebugLocation(123, 9);
						LBRACE45=(CommonToken)Match(input,LBRACE,Follow._LBRACE_in_ruleSet603); if (state.failed) return retval;
						if (state.backtracking == 0) {
							LBRACE45_tree = (CommonTree)adaptor.Create(LBRACE45);
							adaptor.AddChild(root_0, LBRACE45_tree);
						}
						DebugLocation(124, 13);
						PushFollow(Follow._declaration_in_ruleSet617);
						declaration46=declaration();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, declaration46.Tree);
						DebugLocation(124, 25);
						SEMI47=(CommonToken)Match(input,SEMI,Follow._SEMI_in_ruleSet619); if (state.failed) return retval;
						if (state.backtracking == 0) {
							SEMI47_tree = (CommonTree)adaptor.Create(SEMI47);
							adaptor.AddChild(root_0, SEMI47_tree);
						}
						DebugLocation(124, 30);
						// CSS3.g3:124:30: ( declaration SEMI )*
						try { DebugEnterSubRule(13);
							while (true)
							{
								int alt13=2;
								try { DebugEnterDecision(13, false);
									int LA13_0 = input.LA(1);

									if ((LA13_0==IDENT))
									{
										alt13 = 1;
									}


								} finally { DebugExitDecision(13); }
								switch ( alt13 )
								{
									case 1:
									DebugEnterAlt(1);
									// CSS3.g3:124:31: declaration SEMI
									{
										DebugLocation(124, 31);
										PushFollow(Follow._declaration_in_ruleSet622);
										declaration48=declaration();
										PopFollow();
										if (state.failed) return retval;
										if (state.backtracking == 0) adaptor.AddChild(root_0, declaration48.Tree);
										DebugLocation(124, 43);
										SEMI49=(CommonToken)Match(input,SEMI,Follow._SEMI_in_ruleSet624); if (state.failed) return retval;
										if (state.backtracking == 0) {
											SEMI49_tree = (CommonTree)adaptor.Create(SEMI49);
											adaptor.AddChild(root_0, SEMI49_tree);
										}

									}
									break;

									default:
									goto loop13;
								}
							}

							loop13:
								;

						} finally { DebugExitSubRule(13); }

						DebugLocation(125, 9);
						RBRACE50=(CommonToken)Match(input,RBRACE,Follow._RBRACE_in_ruleSet636); if (state.failed) return retval;
						if (state.backtracking == 0) {
							RBRACE50_tree = (CommonTree)adaptor.Create(RBRACE50);
							adaptor.AddChild(root_0, RBRACE50_tree);
						}

					}

					retval.Stop = (CommonToken)input.LT(-1);

					if (state.backtracking == 0) {
						retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
						adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
					}
				}
				catch (RecognitionException re)
				{
					ReportError(re);
					Recover(input,re);
					retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

				}
				finally
				{
					TraceOut("ruleSet", 14);
					LeaveRule("ruleSet", 14);
					LeaveRule_ruleSet();
				}
				DebugLocation(126, 4);
			} finally { DebugExitRule(GrammarFileName, "ruleSet"); }
			return retval;

		}
		// $ANTLR end "ruleSet"

		private sealed partial class selector_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
		{
			private CommonTree _tree;
			public CommonTree Tree { get { return _tree; } set { _tree = value; } }
			object IAstRuleReturnScope.Tree { get { return Tree; } }
			public selector_return(CSS3Parser grammar) {OnCreated(grammar);}
			partial void OnCreated(CSS3Parser grammar);
		}

		partial void EnterRule_selector();
		partial void LeaveRule_selector();

		// $ANTLR start "selector"
		// CSS3.g3:128:1: selector : simpleSelector ( combinator simpleSelector )* ;
		[GrammarRule("selector")]
		private CSS3Parser.selector_return selector()
		{
			EnterRule_selector();
			EnterRule("selector", 15);
			TraceIn("selector", 15);
			CSS3Parser.selector_return retval = new CSS3Parser.selector_return(this);
			retval.Start = (CommonToken)input.LT(1);

			CommonTree root_0 = default(CommonTree);

			CSS3Parser.simpleSelector_return simpleSelector51 = default(CSS3Parser.simpleSelector_return);
			CSS3Parser.combinator_return combinator52 = default(CSS3Parser.combinator_return);
			CSS3Parser.simpleSelector_return simpleSelector53 = default(CSS3Parser.simpleSelector_return);


			try { DebugEnterRule(GrammarFileName, "selector");
				DebugLocation(128, 4);
				try
				{
					// CSS3.g3:129:5: ( simpleSelector ( combinator simpleSelector )* )
					DebugEnterAlt(1);
					// CSS3.g3:129:7: simpleSelector ( combinator simpleSelector )*
					{
						root_0 = (CommonTree)adaptor.Nil();

						DebugLocation(129, 7);
						PushFollow(Follow._simpleSelector_in_selector657);
						simpleSelector51=simpleSelector();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, simpleSelector51.Tree);
						DebugLocation(129, 22);
						// CSS3.g3:129:22: ( combinator simpleSelector )*
						try { DebugEnterSubRule(14);
							while (true)
							{
								int alt14=2;
								try { DebugEnterDecision(14, false);
									int LA14_0 = input.LA(1);

									if ((LA14_0==COLON||LA14_0==DOT||LA14_0==GREATER||LA14_0==HASH||LA14_0==IDENT||LA14_0==LBRACKET||LA14_0==PLUS||LA14_0==STAR))
									{
										alt14 = 1;
									}


								} finally { DebugExitDecision(14); }
								switch ( alt14 )
								{
									case 1:
									DebugEnterAlt(1);
									// CSS3.g3:129:23: combinator simpleSelector
									{
										DebugLocation(129, 23);
										PushFollow(Follow._combinator_in_selector660);
										combinator52=combinator();
										PopFollow();
										if (state.failed) return retval;
										if (state.backtracking == 0) adaptor.AddChild(root_0, combinator52.Tree);
										DebugLocation(129, 34);
										PushFollow(Follow._simpleSelector_in_selector662);
										simpleSelector53=simpleSelector();
										PopFollow();
										if (state.failed) return retval;
										if (state.backtracking == 0) adaptor.AddChild(root_0, simpleSelector53.Tree);

									}
									break;

									default:
									goto loop14;
								}
							}

							loop14:
								;

						} finally { DebugExitSubRule(14); }


					}

					retval.Stop = (CommonToken)input.LT(-1);

					if (state.backtracking == 0) {
						retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
						adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
					}
				}
				catch (RecognitionException re)
				{
					ReportError(re);
					Recover(input,re);
					retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

				}
				finally
				{
					TraceOut("selector", 15);
					LeaveRule("selector", 15);
					LeaveRule_selector();
				}
				DebugLocation(130, 4);
			} finally { DebugExitRule(GrammarFileName, "selector"); }
			return retval;

		}
		// $ANTLR end "selector"

		private sealed partial class simpleSelector_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
		{
			private CommonTree _tree;
			public CommonTree Tree { get { return _tree; } set { _tree = value; } }
			object IAstRuleReturnScope.Tree { get { return Tree; } }
			public simpleSelector_return(CSS3Parser grammar) {OnCreated(grammar);}
			partial void OnCreated(CSS3Parser grammar);
		}

		partial void EnterRule_simpleSelector();
		partial void LeaveRule_simpleSelector();

		// $ANTLR start "simpleSelector"
		// CSS3.g3:132:1: simpleSelector : ( elementName ( ( esPred )=> elementSubsequent )* | ( ( esPred )=> elementSubsequent )+ );
		[GrammarRule("simpleSelector")]
		private CSS3Parser.simpleSelector_return simpleSelector()
		{
			EnterRule_simpleSelector();
			EnterRule("simpleSelector", 16);
			TraceIn("simpleSelector", 16);
			CSS3Parser.simpleSelector_return retval = new CSS3Parser.simpleSelector_return(this);
			retval.Start = (CommonToken)input.LT(1);

			CommonTree root_0 = default(CommonTree);

			CSS3Parser.elementName_return elementName54 = default(CSS3Parser.elementName_return);
			CSS3Parser.elementSubsequent_return elementSubsequent55 = default(CSS3Parser.elementSubsequent_return);
			CSS3Parser.elementSubsequent_return elementSubsequent56 = default(CSS3Parser.elementSubsequent_return);


			try { DebugEnterRule(GrammarFileName, "simpleSelector");
				DebugLocation(132, 4);
				try
				{
					// CSS3.g3:133:5: ( elementName ( ( esPred )=> elementSubsequent )* | ( ( esPred )=> elementSubsequent )+ )
					int alt17=2;
					try { DebugEnterDecision(17, false);
						int LA17_0 = input.LA(1);

						if ((LA17_0==IDENT||LA17_0==STAR))
						{
							alt17 = 1;
						}
						else if ((LA17_0==COLON||LA17_0==DOT||LA17_0==HASH||LA17_0==LBRACKET))
						{
							alt17 = 2;
						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 17, 0, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					} finally { DebugExitDecision(17); }
					switch (alt17)
					{
						case 1:
						DebugEnterAlt(1);
						// CSS3.g3:133:7: elementName ( ( esPred )=> elementSubsequent )*
						{
							root_0 = (CommonTree)adaptor.Nil();

							DebugLocation(133, 7);
							PushFollow(Follow._elementName_in_simpleSelector681);
							elementName54=elementName();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) adaptor.AddChild(root_0, elementName54.Tree);
							DebugLocation(134, 9);
							// CSS3.g3:134:9: ( ( esPred )=> elementSubsequent )*
							try { DebugEnterSubRule(15);
								while (true)
								{
									int alt15=2;
									try { DebugEnterDecision(15, false);
										try
										{
											alt15 = dfa15.Predict(input);
										}
										catch (NoViableAltException nvae)
										{
											DebugRecognitionException(nvae);
											throw;
										}
									} finally { DebugExitDecision(15); }
									switch ( alt15 )
									{
										case 1:
										DebugEnterAlt(1);
										// CSS3.g3:134:10: ( esPred )=> elementSubsequent
										{
											DebugLocation(134, 20);
											PushFollow(Follow._elementSubsequent_in_simpleSelector697);
											elementSubsequent55=elementSubsequent();
											PopFollow();
											if (state.failed) return retval;
											if (state.backtracking == 0) adaptor.AddChild(root_0, elementSubsequent55.Tree);

										}
										break;

										default:
										goto loop15;
									}
								}

								loop15:
									;

							} finally { DebugExitSubRule(15); }


						}
						break;
						case 2:
						DebugEnterAlt(2);
						// CSS3.g3:136:7: ( ( esPred )=> elementSubsequent )+
						{
							root_0 = (CommonTree)adaptor.Nil();

							DebugLocation(136, 7);
							// CSS3.g3:136:7: ( ( esPred )=> elementSubsequent )+
							int cnt16=0;
							try { DebugEnterSubRule(16);
								while (true)
								{
									int alt16=2;
									try { DebugEnterDecision(16, false);
										switch (input.LA(1))
										{
											case HASH:
										{
											int LA16_2 = input.LA(2);

											if ((EvaluatePredicate(synpred2_CSS3_fragment)))
											{
												alt16 = 1;
											}


										}
											break;
											case DOT:
										{
											int LA16_3 = input.LA(2);

											if ((EvaluatePredicate(synpred2_CSS3_fragment)))
											{
												alt16 = 1;
											}


										}
											break;
											case LBRACKET:
										{
											int LA16_4 = input.LA(2);

											if ((EvaluatePredicate(synpred2_CSS3_fragment)))
											{
												alt16 = 1;
											}


										}
											break;
											case COLON:
										{
											int LA16_5 = input.LA(2);

											if ((EvaluatePredicate(synpred2_CSS3_fragment)))
											{
												alt16 = 1;
											}


										}
											break;

										}

									} finally { DebugExitDecision(16); }
									switch (alt16)
									{
										case 1:
										DebugEnterAlt(1);
										// CSS3.g3:136:8: ( esPred )=> elementSubsequent
										{
											DebugLocation(136, 18);
											PushFollow(Follow._elementSubsequent_in_simpleSelector721);
											elementSubsequent56=elementSubsequent();
											PopFollow();
											if (state.failed) return retval;
											if (state.backtracking == 0) adaptor.AddChild(root_0, elementSubsequent56.Tree);

										}
										break;

										default:
										if (cnt16 >= 1)
											goto loop16;

										if (state.backtracking>0) {state.failed=true; return retval;}
										EarlyExitException eee16 = new EarlyExitException( 16, input );
										DebugRecognitionException(eee16);
										throw eee16;
									}
									cnt16++;
								}
								loop16:
									;

							} finally { DebugExitSubRule(16); }


						}
						break;

					}
					retval.Stop = (CommonToken)input.LT(-1);

					if (state.backtracking == 0) {
						retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
						adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
					}
				}
				catch (RecognitionException re)
				{
					ReportError(re);
					Recover(input,re);
					retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

				}
				finally
				{
					TraceOut("simpleSelector", 16);
					LeaveRule("simpleSelector", 16);
					LeaveRule_simpleSelector();
				}
				DebugLocation(137, 4);
			} finally { DebugExitRule(GrammarFileName, "simpleSelector"); }
			return retval;

		}
		// $ANTLR end "simpleSelector"

		private sealed partial class esPred_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
		{
			private CommonTree _tree;
			public CommonTree Tree { get { return _tree; } set { _tree = value; } }
			object IAstRuleReturnScope.Tree { get { return Tree; } }
			public esPred_return(CSS3Parser grammar) {OnCreated(grammar);}
			partial void OnCreated(CSS3Parser grammar);
		}

		partial void EnterRule_esPred();
		partial void LeaveRule_esPred();

		// $ANTLR start "esPred"
		// CSS3.g3:139:1: esPred : ( HASH | DOT | LBRACKET | COLON );
		[GrammarRule("esPred")]
		private CSS3Parser.esPred_return esPred()
		{
			EnterRule_esPred();
			EnterRule("esPred", 17);
			TraceIn("esPred", 17);
			CSS3Parser.esPred_return retval = new CSS3Parser.esPred_return(this);
			retval.Start = (CommonToken)input.LT(1);

			CommonTree root_0 = default(CommonTree);

			CommonToken set57 = default(CommonToken);

			CommonTree set57_tree = default(CommonTree);

			try { DebugEnterRule(GrammarFileName, "esPred");
				DebugLocation(139, 4);
				try
				{
					// CSS3.g3:140:5: ( HASH | DOT | LBRACKET | COLON )
					DebugEnterAlt(1);
					// CSS3.g3:
					{
						root_0 = (CommonTree)adaptor.Nil();

						DebugLocation(140, 5);
						set57=(CommonToken)input.LT(1);
						if (input.LA(1)==COLON||input.LA(1)==DOT||input.LA(1)==HASH||input.LA(1)==LBRACKET)
						{
							input.Consume();
							if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set57));
							state.errorRecovery=false;state.failed=false;
						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							MismatchedSetException mse = new MismatchedSetException(null,input);
							DebugRecognitionException(mse);
							throw mse;
						}


					}

					retval.Stop = (CommonToken)input.LT(-1);

					if (state.backtracking == 0) {
						retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
						adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
					}
				}
				catch (RecognitionException re)
				{
					ReportError(re);
					Recover(input,re);
					retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

				}
				finally
				{
					TraceOut("esPred", 17);
					LeaveRule("esPred", 17);
					LeaveRule_esPred();
				}
				DebugLocation(141, 4);
			} finally { DebugExitRule(GrammarFileName, "esPred"); }
			return retval;

		}
		// $ANTLR end "esPred"

		private sealed partial class elementSubsequent_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
		{
			private CommonTree _tree;
			public CommonTree Tree { get { return _tree; } set { _tree = value; } }
			object IAstRuleReturnScope.Tree { get { return Tree; } }
			public elementSubsequent_return(CSS3Parser grammar) {OnCreated(grammar);}
			partial void OnCreated(CSS3Parser grammar);
		}

		partial void EnterRule_elementSubsequent();
		partial void LeaveRule_elementSubsequent();

		// $ANTLR start "elementSubsequent"
		// CSS3.g3:143:1: elementSubsequent : ( HASH | cssClass | attrib | pseudo );
		[GrammarRule("elementSubsequent")]
		private CSS3Parser.elementSubsequent_return elementSubsequent()
		{
			EnterRule_elementSubsequent();
			EnterRule("elementSubsequent", 18);
			TraceIn("elementSubsequent", 18);
			CSS3Parser.elementSubsequent_return retval = new CSS3Parser.elementSubsequent_return(this);
			retval.Start = (CommonToken)input.LT(1);

			CommonTree root_0 = default(CommonTree);

			CommonToken HASH58 = default(CommonToken);
			CSS3Parser.cssClass_return cssClass59 = default(CSS3Parser.cssClass_return);
			CSS3Parser.attrib_return attrib60 = default(CSS3Parser.attrib_return);
			CSS3Parser.pseudo_return pseudo61 = default(CSS3Parser.pseudo_return);

			CommonTree HASH58_tree = default(CommonTree);

			try { DebugEnterRule(GrammarFileName, "elementSubsequent");
				DebugLocation(143, 4);
				try
				{
					// CSS3.g3:144:5: ( HASH | cssClass | attrib | pseudo )
					int alt18=4;
					try { DebugEnterDecision(18, false);
						switch (input.LA(1))
						{
							case HASH:
						{
							alt18 = 1;
						}
							break;
							case DOT:
						{
							alt18 = 2;
						}
							break;
							case LBRACKET:
						{
							alt18 = 3;
						}
							break;
							case COLON:
						{
							alt18 = 4;
						}
							break;
							default:
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 18, 0, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						}

					} finally { DebugExitDecision(18); }
					switch (alt18)
					{
						case 1:
						DebugEnterAlt(1);
						// CSS3.g3:144:7: HASH
						{
							root_0 = (CommonTree)adaptor.Nil();

							DebugLocation(144, 7);
							HASH58=(CommonToken)Match(input,HASH,Follow._HASH_in_elementSubsequent777); if (state.failed) return retval;
							if (state.backtracking == 0) {
								HASH58_tree = (CommonTree)adaptor.Create(HASH58);
								adaptor.AddChild(root_0, HASH58_tree);
							}

						}
						break;
						case 2:
						DebugEnterAlt(2);
						// CSS3.g3:145:7: cssClass
						{
							root_0 = (CommonTree)adaptor.Nil();

							DebugLocation(145, 7);
							PushFollow(Follow._cssClass_in_elementSubsequent785);
							cssClass59=cssClass();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) adaptor.AddChild(root_0, cssClass59.Tree);

						}
						break;
						case 3:
						DebugEnterAlt(3);
						// CSS3.g3:146:7: attrib
						{
							root_0 = (CommonTree)adaptor.Nil();

							DebugLocation(146, 7);
							PushFollow(Follow._attrib_in_elementSubsequent793);
							attrib60=attrib();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) adaptor.AddChild(root_0, attrib60.Tree);

						}
						break;
						case 4:
						DebugEnterAlt(4);
						// CSS3.g3:147:7: pseudo
						{
							root_0 = (CommonTree)adaptor.Nil();

							DebugLocation(147, 7);
							PushFollow(Follow._pseudo_in_elementSubsequent801);
							pseudo61=pseudo();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) adaptor.AddChild(root_0, pseudo61.Tree);

						}
						break;

					}
					retval.Stop = (CommonToken)input.LT(-1);

					if (state.backtracking == 0) {
						retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
						adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
					}
				}
				catch (RecognitionException re)
				{
					ReportError(re);
					Recover(input,re);
					retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

				}
				finally
				{
					TraceOut("elementSubsequent", 18);
					LeaveRule("elementSubsequent", 18);
					LeaveRule_elementSubsequent();
				}
				DebugLocation(148, 4);
			} finally { DebugExitRule(GrammarFileName, "elementSubsequent"); }
			return retval;

		}
		// $ANTLR end "elementSubsequent"

		private sealed partial class cssClass_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
		{
			private CommonTree _tree;
			public CommonTree Tree { get { return _tree; } set { _tree = value; } }
			object IAstRuleReturnScope.Tree { get { return Tree; } }
			public cssClass_return(CSS3Parser grammar) {OnCreated(grammar);}
			partial void OnCreated(CSS3Parser grammar);
		}

		partial void EnterRule_cssClass();
		partial void LeaveRule_cssClass();

		// $ANTLR start "cssClass"
		// CSS3.g3:150:1: cssClass : DOT IDENT ;
		[GrammarRule("cssClass")]
		private CSS3Parser.cssClass_return cssClass()
		{
			EnterRule_cssClass();
			EnterRule("cssClass", 19);
			TraceIn("cssClass", 19);
			CSS3Parser.cssClass_return retval = new CSS3Parser.cssClass_return(this);
			retval.Start = (CommonToken)input.LT(1);

			CommonTree root_0 = default(CommonTree);

			CommonToken DOT62 = default(CommonToken);
			CommonToken IDENT63 = default(CommonToken);

			CommonTree DOT62_tree = default(CommonTree);
			CommonTree IDENT63_tree = default(CommonTree);

			try { DebugEnterRule(GrammarFileName, "cssClass");
				DebugLocation(150, 4);
				try
				{
					// CSS3.g3:151:5: ( DOT IDENT )
					DebugEnterAlt(1);
					// CSS3.g3:151:7: DOT IDENT
					{
						root_0 = (CommonTree)adaptor.Nil();

						DebugLocation(151, 7);
						DOT62=(CommonToken)Match(input,DOT,Follow._DOT_in_cssClass822); if (state.failed) return retval;
						if (state.backtracking == 0) {
							DOT62_tree = (CommonTree)adaptor.Create(DOT62);
							adaptor.AddChild(root_0, DOT62_tree);
						}
						DebugLocation(151, 11);
						IDENT63=(CommonToken)Match(input,IDENT,Follow._IDENT_in_cssClass824); if (state.failed) return retval;
						if (state.backtracking == 0) {
							IDENT63_tree = (CommonTree)adaptor.Create(IDENT63);
							adaptor.AddChild(root_0, IDENT63_tree);
						}

					}

					retval.Stop = (CommonToken)input.LT(-1);

					if (state.backtracking == 0) {
						retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
						adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
					}
				}
				catch (RecognitionException re)
				{
					ReportError(re);
					Recover(input,re);
					retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

				}
				finally
				{
					TraceOut("cssClass", 19);
					LeaveRule("cssClass", 19);
					LeaveRule_cssClass();
				}
				DebugLocation(152, 4);
			} finally { DebugExitRule(GrammarFileName, "cssClass"); }
			return retval;

		}
		// $ANTLR end "cssClass"

		private sealed partial class elementName_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
		{
			private CommonTree _tree;
			public CommonTree Tree { get { return _tree; } set { _tree = value; } }
			object IAstRuleReturnScope.Tree { get { return Tree; } }
			public elementName_return(CSS3Parser grammar) {OnCreated(grammar);}
			partial void OnCreated(CSS3Parser grammar);
		}

		partial void EnterRule_elementName();
		partial void LeaveRule_elementName();

		// $ANTLR start "elementName"
		// CSS3.g3:154:1: elementName : ( IDENT | STAR );
		[GrammarRule("elementName")]
		private CSS3Parser.elementName_return elementName()
		{
			EnterRule_elementName();
			EnterRule("elementName", 20);
			TraceIn("elementName", 20);
			CSS3Parser.elementName_return retval = new CSS3Parser.elementName_return(this);
			retval.Start = (CommonToken)input.LT(1);

			CommonTree root_0 = default(CommonTree);

			CommonToken set64 = default(CommonToken);

			CommonTree set64_tree = default(CommonTree);

			try { DebugEnterRule(GrammarFileName, "elementName");
				DebugLocation(154, 4);
				try
				{
					// CSS3.g3:155:5: ( IDENT | STAR )
					DebugEnterAlt(1);
					// CSS3.g3:
					{
						root_0 = (CommonTree)adaptor.Nil();

						DebugLocation(155, 5);
						set64=(CommonToken)input.LT(1);
						if (input.LA(1)==IDENT||input.LA(1)==STAR)
						{
							input.Consume();
							if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set64));
							state.errorRecovery=false;state.failed=false;
						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							MismatchedSetException mse = new MismatchedSetException(null,input);
							DebugRecognitionException(mse);
							throw mse;
						}


					}

					retval.Stop = (CommonToken)input.LT(-1);

					if (state.backtracking == 0) {
						retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
						adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
					}
				}
				catch (RecognitionException re)
				{
					ReportError(re);
					Recover(input,re);
					retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

				}
				finally
				{
					TraceOut("elementName", 20);
					LeaveRule("elementName", 20);
					LeaveRule_elementName();
				}
				DebugLocation(157, 4);
			} finally { DebugExitRule(GrammarFileName, "elementName"); }
			return retval;

		}
		// $ANTLR end "elementName"

		private sealed partial class attrib_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
		{
			private CommonTree _tree;
			public CommonTree Tree { get { return _tree; } set { _tree = value; } }
			object IAstRuleReturnScope.Tree { get { return Tree; } }
			public attrib_return(CSS3Parser grammar) {OnCreated(grammar);}
			partial void OnCreated(CSS3Parser grammar);
		}

		partial void EnterRule_attrib();
		partial void LeaveRule_attrib();

		// $ANTLR start "attrib"
		// CSS3.g3:159:1: attrib : LBRACKET IDENT ( ( OPEQ | INCLUDES | DASHMATCH ) ( IDENT | STRING ) )? RBRACKET ;
		[GrammarRule("attrib")]
		private CSS3Parser.attrib_return attrib()
		{
			EnterRule_attrib();
			EnterRule("attrib", 21);
			TraceIn("attrib", 21);
			CSS3Parser.attrib_return retval = new CSS3Parser.attrib_return(this);
			retval.Start = (CommonToken)input.LT(1);

			CommonTree root_0 = default(CommonTree);

			CommonToken LBRACKET65 = default(CommonToken);
			CommonToken IDENT66 = default(CommonToken);
			CommonToken set67 = default(CommonToken);
			CommonToken set68 = default(CommonToken);
			CommonToken RBRACKET69 = default(CommonToken);

			CommonTree LBRACKET65_tree = default(CommonTree);
			CommonTree IDENT66_tree = default(CommonTree);
			CommonTree set67_tree = default(CommonTree);
			CommonTree set68_tree = default(CommonTree);
			CommonTree RBRACKET69_tree = default(CommonTree);

			try { DebugEnterRule(GrammarFileName, "attrib");
				DebugLocation(159, 0);
				try
				{
					// CSS3.g3:160:5: ( LBRACKET IDENT ( ( OPEQ | INCLUDES | DASHMATCH ) ( IDENT | STRING ) )? RBRACKET )
					DebugEnterAlt(1);
					// CSS3.g3:160:7: LBRACKET IDENT ( ( OPEQ | INCLUDES | DASHMATCH ) ( IDENT | STRING ) )? RBRACKET
					{
						root_0 = (CommonTree)adaptor.Nil();

						DebugLocation(160, 7);
						LBRACKET65=(CommonToken)Match(input,LBRACKET,Follow._LBRACKET_in_attrib874); if (state.failed) return retval;
						if (state.backtracking == 0) {
							LBRACKET65_tree = (CommonTree)adaptor.Create(LBRACKET65);
							adaptor.AddChild(root_0, LBRACKET65_tree);
						}
						DebugLocation(162, 9);
						IDENT66=(CommonToken)Match(input,IDENT,Follow._IDENT_in_attrib889); if (state.failed) return retval;
						if (state.backtracking == 0) {
							IDENT66_tree = (CommonTree)adaptor.Create(IDENT66);
							adaptor.AddChild(root_0, IDENT66_tree);
						}
						DebugLocation(164, 13);
						// CSS3.g3:164:13: ( ( OPEQ | INCLUDES | DASHMATCH ) ( IDENT | STRING ) )?
						int alt19=2;
						try { DebugEnterSubRule(19);
							try { DebugEnterDecision(19, false);
								int LA19_0 = input.LA(1);

								if ((LA19_0==DASHMATCH||LA19_0==INCLUDES||LA19_0==OPEQ))
								{
									alt19 = 1;
								}
							} finally { DebugExitDecision(19); }
							switch (alt19)
							{
								case 1:
								DebugEnterAlt(1);
								// CSS3.g3:165:17: ( OPEQ | INCLUDES | DASHMATCH ) ( IDENT | STRING )
								{
									DebugLocation(165, 17);
									set67=(CommonToken)input.LT(1);
									if (input.LA(1)==DASHMATCH||input.LA(1)==INCLUDES||input.LA(1)==OPEQ)
									{
										input.Consume();
										if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set67));
										state.errorRecovery=false;state.failed=false;
									}
									else
									{
										if (state.backtracking>0) {state.failed=true; return retval;}
										MismatchedSetException mse = new MismatchedSetException(null,input);
										DebugRecognitionException(mse);
										throw mse;
									}

									DebugLocation(170, 17);
									set68=(CommonToken)input.LT(1);
									if (input.LA(1)==IDENT||input.LA(1)==STRING)
									{
										input.Consume();
										if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set68));
										state.errorRecovery=false;state.failed=false;
									}
									else
									{
										if (state.backtracking>0) {state.failed=true; return retval;}
										MismatchedSetException mse = new MismatchedSetException(null,input);
										DebugRecognitionException(mse);
										throw mse;
									}


								}
								break;

							}
						} finally { DebugExitSubRule(19); }

						DebugLocation(176, 7);
						RBRACKET69=(CommonToken)Match(input,RBRACKET,Follow._RBRACKET_in_attrib1139); if (state.failed) return retval;
						if (state.backtracking == 0) {
							RBRACKET69_tree = (CommonTree)adaptor.Create(RBRACKET69);
							adaptor.AddChild(root_0, RBRACKET69_tree);
						}

					}

					retval.Stop = (CommonToken)input.LT(-1);

					if (state.backtracking == 0) {
						retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
						adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
					}
				}
				catch (RecognitionException re)
				{
					ReportError(re);
					Recover(input,re);
					retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

				}
				finally
				{
					TraceOut("attrib", 21);
					LeaveRule("attrib", 21);
					LeaveRule_attrib();
				}
				DebugLocation(177, 0);
			} finally { DebugExitRule(GrammarFileName, "attrib"); }
			return retval;

		}
		// $ANTLR end "attrib"

		private sealed partial class pseudo_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
		{
			private CommonTree _tree;
			public CommonTree Tree { get { return _tree; } set { _tree = value; } }
			object IAstRuleReturnScope.Tree { get { return Tree; } }
			public pseudo_return(CSS3Parser grammar) {OnCreated(grammar);}
			partial void OnCreated(CSS3Parser grammar);
		}

		partial void EnterRule_pseudo();
		partial void LeaveRule_pseudo();

		// $ANTLR start "pseudo"
		// CSS3.g3:179:1: pseudo : COLON IDENT ( LPAREN ( IDENT )? RPAREN )? ;
		[GrammarRule("pseudo")]
		private CSS3Parser.pseudo_return pseudo()
		{
			EnterRule_pseudo();
			EnterRule("pseudo", 22);
			TraceIn("pseudo", 22);
			CSS3Parser.pseudo_return retval = new CSS3Parser.pseudo_return(this);
			retval.Start = (CommonToken)input.LT(1);

			CommonTree root_0 = default(CommonTree);

			CommonToken COLON70 = default(CommonToken);
			CommonToken IDENT71 = default(CommonToken);
			CommonToken LPAREN72 = default(CommonToken);
			CommonToken IDENT73 = default(CommonToken);
			CommonToken RPAREN74 = default(CommonToken);

			CommonTree COLON70_tree = default(CommonTree);
			CommonTree IDENT71_tree = default(CommonTree);
			CommonTree LPAREN72_tree = default(CommonTree);
			CommonTree IDENT73_tree = default(CommonTree);
			CommonTree RPAREN74_tree = default(CommonTree);

			try { DebugEnterRule(GrammarFileName, "pseudo");
				DebugLocation(179, 4);
				try
				{
					// CSS3.g3:180:5: ( COLON IDENT ( LPAREN ( IDENT )? RPAREN )? )
					DebugEnterAlt(1);
					// CSS3.g3:180:7: COLON IDENT ( LPAREN ( IDENT )? RPAREN )?
					{
						root_0 = (CommonTree)adaptor.Nil();

						DebugLocation(180, 7);
						COLON70=(CommonToken)Match(input,COLON,Follow._COLON_in_pseudo1152); if (state.failed) return retval;
						if (state.backtracking == 0) {
							COLON70_tree = (CommonTree)adaptor.Create(COLON70);
							adaptor.AddChild(root_0, COLON70_tree);
						}
						DebugLocation(181, 13);
						IDENT71=(CommonToken)Match(input,IDENT,Follow._IDENT_in_pseudo1167); if (state.failed) return retval;
						if (state.backtracking == 0) {
							IDENT71_tree = (CommonTree)adaptor.Create(IDENT71);
							adaptor.AddChild(root_0, IDENT71_tree);
						}
						DebugLocation(182, 17);
						// CSS3.g3:182:17: ( LPAREN ( IDENT )? RPAREN )?
						int alt21=2;
						try { DebugEnterSubRule(21);
							try { DebugEnterDecision(21, false);
								int LA21_0 = input.LA(1);

								if ((LA21_0==LPAREN))
								{
									alt21 = 1;
								}
							} finally { DebugExitDecision(21); }
							switch (alt21)
							{
								case 1:
								DebugEnterAlt(1);
								// CSS3.g3:184:21: LPAREN ( IDENT )? RPAREN
								{
									DebugLocation(184, 21);
									LPAREN72=(CommonToken)Match(input,LPAREN,Follow._LPAREN_in_pseudo1225); if (state.failed) return retval;
									if (state.backtracking == 0) {
										LPAREN72_tree = (CommonTree)adaptor.Create(LPAREN72);
										adaptor.AddChild(root_0, LPAREN72_tree);
									}
									DebugLocation(184, 28);
									// CSS3.g3:184:28: ( IDENT )?
									int alt20=2;
									try { DebugEnterSubRule(20);
										try { DebugEnterDecision(20, false);
											int LA20_0 = input.LA(1);

											if ((LA20_0==IDENT))
											{
												alt20 = 1;
											}
										} finally { DebugExitDecision(20); }
										switch (alt20)
										{
											case 1:
											DebugEnterAlt(1);
											// CSS3.g3:184:28: IDENT
											{
												DebugLocation(184, 28);
												IDENT73=(CommonToken)Match(input,IDENT,Follow._IDENT_in_pseudo1227); if (state.failed) return retval;
												if (state.backtracking == 0) {
													IDENT73_tree = (CommonTree)adaptor.Create(IDENT73);
													adaptor.AddChild(root_0, IDENT73_tree);
												}

											}
											break;

										}
									} finally { DebugExitSubRule(20); }

									DebugLocation(184, 35);
									RPAREN74=(CommonToken)Match(input,RPAREN,Follow._RPAREN_in_pseudo1230); if (state.failed) return retval;
									if (state.backtracking == 0) {
										RPAREN74_tree = (CommonTree)adaptor.Create(RPAREN74);
										adaptor.AddChild(root_0, RPAREN74_tree);
									}

								}
								break;

							}
						} finally { DebugExitSubRule(21); }


					}

					retval.Stop = (CommonToken)input.LT(-1);

					if (state.backtracking == 0) {
						retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
						adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
					}
				}
				catch (RecognitionException re)
				{
					ReportError(re);
					Recover(input,re);
					retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

				}
				finally
				{
					TraceOut("pseudo", 22);
					LeaveRule("pseudo", 22);
					LeaveRule_pseudo();
				}
				DebugLocation(186, 4);
			} finally { DebugExitRule(GrammarFileName, "pseudo"); }
			return retval;

		}
		// $ANTLR end "pseudo"

		private sealed partial class declaration_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
		{
			private CommonTree _tree;
			public CommonTree Tree { get { return _tree; } set { _tree = value; } }
			object IAstRuleReturnScope.Tree { get { return Tree; } }
			public declaration_return(CSS3Parser grammar) {OnCreated(grammar);}
			partial void OnCreated(CSS3Parser grammar);
		}

		partial void EnterRule_declaration();
		partial void LeaveRule_declaration();

		// $ANTLR start "declaration"
		// CSS3.g3:188:1: declaration : property COLON expr ( prio )? ;
		[GrammarRule("declaration")]
		private CSS3Parser.declaration_return declaration()
		{
			EnterRule_declaration();
			EnterRule("declaration", 23);
			TraceIn("declaration", 23);
			CSS3Parser.declaration_return retval = new CSS3Parser.declaration_return(this);
			retval.Start = (CommonToken)input.LT(1);

			CommonTree root_0 = default(CommonTree);

			CommonToken COLON76 = default(CommonToken);
			CSS3Parser.property_return property75 = default(CSS3Parser.property_return);
			CSS3Parser.expr_return expr77 = default(CSS3Parser.expr_return);
			CSS3Parser.prio_return prio78 = default(CSS3Parser.prio_return);

			CommonTree COLON76_tree = default(CommonTree);

			try { DebugEnterRule(GrammarFileName, "declaration");
				DebugLocation(188, 4);
				try
				{
					// CSS3.g3:189:5: ( property COLON expr ( prio )? )
					DebugEnterAlt(1);
					// CSS3.g3:189:7: property COLON expr ( prio )?
					{
						root_0 = (CommonTree)adaptor.Nil();

						DebugLocation(189, 7);
						PushFollow(Follow._property_in_declaration1266);
						property75=property();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, property75.Tree);
						DebugLocation(189, 16);
						COLON76=(CommonToken)Match(input,COLON,Follow._COLON_in_declaration1268); if (state.failed) return retval;
						if (state.backtracking == 0) {
							COLON76_tree = (CommonTree)adaptor.Create(COLON76);
							adaptor.AddChild(root_0, COLON76_tree);
						}
						DebugLocation(189, 22);
						PushFollow(Follow._expr_in_declaration1270);
						expr77=expr();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, expr77.Tree);
						DebugLocation(189, 27);
						// CSS3.g3:189:27: ( prio )?
						int alt22=2;
						try { DebugEnterSubRule(22);
							try { DebugEnterDecision(22, false);
								int LA22_0 = input.LA(1);

								if ((LA22_0==IMPORTANT_SYM))
								{
									alt22 = 1;
								}
							} finally { DebugExitDecision(22); }
							switch (alt22)
							{
								case 1:
								DebugEnterAlt(1);
								// CSS3.g3:189:27: prio
								{
									DebugLocation(189, 27);
									PushFollow(Follow._prio_in_declaration1272);
									prio78=prio();
									PopFollow();
									if (state.failed) return retval;
									if (state.backtracking == 0) adaptor.AddChild(root_0, prio78.Tree);

								}
								break;

							}
						} finally { DebugExitSubRule(22); }


					}

					retval.Stop = (CommonToken)input.LT(-1);

					if (state.backtracking == 0) {
						retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
						adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
					}
				}
				catch (RecognitionException re)
				{
					ReportError(re);
					Recover(input,re);
					retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

				}
				finally
				{
					TraceOut("declaration", 23);
					LeaveRule("declaration", 23);
					LeaveRule_declaration();
				}
				DebugLocation(190, 4);
			} finally { DebugExitRule(GrammarFileName, "declaration"); }
			return retval;

		}
		// $ANTLR end "declaration"

		private sealed partial class prio_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
		{
			private CommonTree _tree;
			public CommonTree Tree { get { return _tree; } set { _tree = value; } }
			object IAstRuleReturnScope.Tree { get { return Tree; } }
			public prio_return(CSS3Parser grammar) {OnCreated(grammar);}
			partial void OnCreated(CSS3Parser grammar);
		}

		partial void EnterRule_prio();
		partial void LeaveRule_prio();

		// $ANTLR start "prio"
		// CSS3.g3:192:1: prio : IMPORTANT_SYM ;
		[GrammarRule("prio")]
		private CSS3Parser.prio_return prio()
		{
			EnterRule_prio();
			EnterRule("prio", 24);
			TraceIn("prio", 24);
			CSS3Parser.prio_return retval = new CSS3Parser.prio_return(this);
			retval.Start = (CommonToken)input.LT(1);

			CommonTree root_0 = default(CommonTree);

			CommonToken IMPORTANT_SYM79 = default(CommonToken);

			CommonTree IMPORTANT_SYM79_tree = default(CommonTree);

			try { DebugEnterRule(GrammarFileName, "prio");
				DebugLocation(192, 4);
				try
				{
					// CSS3.g3:193:5: ( IMPORTANT_SYM )
					DebugEnterAlt(1);
					// CSS3.g3:193:7: IMPORTANT_SYM
					{
						root_0 = (CommonTree)adaptor.Nil();

						DebugLocation(193, 7);
						IMPORTANT_SYM79=(CommonToken)Match(input,IMPORTANT_SYM,Follow._IMPORTANT_SYM_in_prio1294); if (state.failed) return retval;
						if (state.backtracking == 0) {
							IMPORTANT_SYM79_tree = (CommonTree)adaptor.Create(IMPORTANT_SYM79);
							adaptor.AddChild(root_0, IMPORTANT_SYM79_tree);
						}

					}

					retval.Stop = (CommonToken)input.LT(-1);

					if (state.backtracking == 0) {
						retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
						adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
					}
				}
				catch (RecognitionException re)
				{
					ReportError(re);
					Recover(input,re);
					retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

				}
				finally
				{
					TraceOut("prio", 24);
					LeaveRule("prio", 24);
					LeaveRule_prio();
				}
				DebugLocation(194, 4);
			} finally { DebugExitRule(GrammarFileName, "prio"); }
			return retval;

		}
		// $ANTLR end "prio"

		private sealed partial class expr_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
		{
			private CommonTree _tree;
			public CommonTree Tree { get { return _tree; } set { _tree = value; } }
			object IAstRuleReturnScope.Tree { get { return Tree; } }
			public expr_return(CSS3Parser grammar) {OnCreated(grammar);}
			partial void OnCreated(CSS3Parser grammar);
		}

		partial void EnterRule_expr();
		partial void LeaveRule_expr();

		// $ANTLR start "expr"
		// CSS3.g3:196:1: expr : term ( operator term )* ;
		[GrammarRule("expr")]
		private CSS3Parser.expr_return expr()
		{
			EnterRule_expr();
			EnterRule("expr", 25);
			TraceIn("expr", 25);
			CSS3Parser.expr_return retval = new CSS3Parser.expr_return(this);
			retval.Start = (CommonToken)input.LT(1);

			CommonTree root_0 = default(CommonTree);

			CSS3Parser.term_return term80 = default(CSS3Parser.term_return);
			CSS3Parser.operator_return operator81 = default(CSS3Parser.operator_return);
			CSS3Parser.term_return term82 = default(CSS3Parser.term_return);


			try { DebugEnterRule(GrammarFileName, "expr");
				DebugLocation(196, 4);
				try
				{
					// CSS3.g3:197:5: ( term ( operator term )* )
					DebugEnterAlt(1);
					// CSS3.g3:197:7: term ( operator term )*
					{
						root_0 = (CommonTree)adaptor.Nil();

						DebugLocation(197, 7);
						PushFollow(Follow._term_in_expr1315);
						term80=term();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, term80.Tree);
						DebugLocation(197, 12);
						// CSS3.g3:197:12: ( operator term )*
						try { DebugEnterSubRule(23);
							while (true)
							{
								int alt23=2;
								try { DebugEnterDecision(23, false);
									int LA23_0 = input.LA(1);

									if ((LA23_0==ANGLE||LA23_0==COMMA||LA23_0==EMS||LA23_0==EXS||LA23_0==FREQ||LA23_0==HASH||LA23_0==IDENT||LA23_0==LENGTH||LA23_0==MINUS||LA23_0==NUMBER||(LA23_0>=PERCENTAGE && LA23_0<=PLUS)||LA23_0==SOLIDUS||LA23_0==STRING||LA23_0==TIME||LA23_0==URI))
									{
										alt23 = 1;
									}


								} finally { DebugExitDecision(23); }
								switch ( alt23 )
								{
									case 1:
									DebugEnterAlt(1);
									// CSS3.g3:197:13: operator term
									{
										DebugLocation(197, 13);
										PushFollow(Follow._operator_in_expr1318);
										operator81=@operator();
										PopFollow();
										if (state.failed) return retval;
										if (state.backtracking == 0) adaptor.AddChild(root_0, operator81.Tree);
										DebugLocation(197, 22);
										PushFollow(Follow._term_in_expr1320);
										term82=term();
										PopFollow();
										if (state.failed) return retval;
										if (state.backtracking == 0) adaptor.AddChild(root_0, term82.Tree);

									}
									break;

									default:
									goto loop23;
								}
							}

							loop23:
								;

						} finally { DebugExitSubRule(23); }


					}

					retval.Stop = (CommonToken)input.LT(-1);

					if (state.backtracking == 0) {
						retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
						adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
					}
				}
				catch (RecognitionException re)
				{
					ReportError(re);
					Recover(input,re);
					retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

				}
				finally
				{
					TraceOut("expr", 25);
					LeaveRule("expr", 25);
					LeaveRule_expr();
				}
				DebugLocation(198, 4);
			} finally { DebugExitRule(GrammarFileName, "expr"); }
			return retval;

		}
		// $ANTLR end "expr"

		private sealed partial class term_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
		{
			private CommonTree _tree;
			public CommonTree Tree { get { return _tree; } set { _tree = value; } }
			object IAstRuleReturnScope.Tree { get { return Tree; } }
			public term_return(CSS3Parser grammar) {OnCreated(grammar);}
			partial void OnCreated(CSS3Parser grammar);
		}

		partial void EnterRule_term();
		partial void LeaveRule_term();

		// $ANTLR start "term"
		// CSS3.g3:200:1: term : ( ( unaryOperator )? ( NUMBER | PERCENTAGE | LENGTH | EMS | EXS | ANGLE | TIME | FREQ ) | STRING | IDENT ( LPAREN expr RPAREN )? | URI | hexColor );
		[GrammarRule("term")]
		private CSS3Parser.term_return term()
		{
			EnterRule_term();
			EnterRule("term", 26);
			TraceIn("term", 26);
			CSS3Parser.term_return retval = new CSS3Parser.term_return(this);
			retval.Start = (CommonToken)input.LT(1);

			CommonTree root_0 = default(CommonTree);

			CommonToken set84 = default(CommonToken);
			CommonToken STRING85 = default(CommonToken);
			CommonToken IDENT86 = default(CommonToken);
			CommonToken LPAREN87 = default(CommonToken);
			CommonToken RPAREN89 = default(CommonToken);
			CommonToken URI90 = default(CommonToken);
			CSS3Parser.unaryOperator_return unaryOperator83 = default(CSS3Parser.unaryOperator_return);
			CSS3Parser.expr_return expr88 = default(CSS3Parser.expr_return);
			CSS3Parser.hexColor_return hexColor91 = default(CSS3Parser.hexColor_return);

			CommonTree set84_tree = default(CommonTree);
			CommonTree STRING85_tree = default(CommonTree);
			CommonTree IDENT86_tree = default(CommonTree);
			CommonTree LPAREN87_tree = default(CommonTree);
			CommonTree RPAREN89_tree = default(CommonTree);
			CommonTree URI90_tree = default(CommonTree);

			try { DebugEnterRule(GrammarFileName, "term");
				DebugLocation(200, 4);
				try
				{
					// CSS3.g3:201:5: ( ( unaryOperator )? ( NUMBER | PERCENTAGE | LENGTH | EMS | EXS | ANGLE | TIME | FREQ ) | STRING | IDENT ( LPAREN expr RPAREN )? | URI | hexColor )
					int alt26=5;
					try { DebugEnterDecision(26, false);
						switch (input.LA(1))
						{
							case ANGLE:
							case EMS:
							case EXS:
							case FREQ:
							case LENGTH:
							case MINUS:
							case NUMBER:
							case PERCENTAGE:
							case PLUS:
							case TIME:
						{
							alt26 = 1;
						}
							break;
							case STRING:
						{
							alt26 = 2;
						}
							break;
							case IDENT:
						{
							alt26 = 3;
						}
							break;
							case URI:
						{
							alt26 = 4;
						}
							break;
							case HASH:
						{
							alt26 = 5;
						}
							break;
							default:
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 26, 0, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						}

					} finally { DebugExitDecision(26); }
					switch (alt26)
					{
						case 1:
						DebugEnterAlt(1);
						// CSS3.g3:201:7: ( unaryOperator )? ( NUMBER | PERCENTAGE | LENGTH | EMS | EXS | ANGLE | TIME | FREQ )
						{
							root_0 = (CommonTree)adaptor.Nil();

							DebugLocation(201, 7);
							// CSS3.g3:201:7: ( unaryOperator )?
							int alt24=2;
							try { DebugEnterSubRule(24);
								try { DebugEnterDecision(24, false);
									int LA24_0 = input.LA(1);

									if ((LA24_0==MINUS||LA24_0==PLUS))
									{
										alt24 = 1;
									}
								} finally { DebugExitDecision(24); }
								switch (alt24)
								{
									case 1:
									DebugEnterAlt(1);
									// CSS3.g3:201:7: unaryOperator
									{
										DebugLocation(201, 7);
										PushFollow(Follow._unaryOperator_in_term1343);
										unaryOperator83=unaryOperator();
										PopFollow();
										if (state.failed) return retval;
										if (state.backtracking == 0) adaptor.AddChild(root_0, unaryOperator83.Tree);

									}
									break;

								}
							} finally { DebugExitSubRule(24); }

							DebugLocation(202, 9);
							set84=(CommonToken)input.LT(1);
							if (input.LA(1)==ANGLE||input.LA(1)==EMS||input.LA(1)==EXS||input.LA(1)==FREQ||input.LA(1)==LENGTH||input.LA(1)==NUMBER||input.LA(1)==PERCENTAGE||input.LA(1)==TIME)
							{
								input.Consume();
								if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set84));
								state.errorRecovery=false;state.failed=false;
							}
							else
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								MismatchedSetException mse = new MismatchedSetException(null,input);
								DebugRecognitionException(mse);
								throw mse;
							}


						}
						break;
						case 2:
						DebugEnterAlt(2);
						// CSS3.g3:212:7: STRING
						{
							root_0 = (CommonTree)adaptor.Nil();

							DebugLocation(212, 7);
							STRING85=(CommonToken)Match(input,STRING,Follow._STRING_in_term1500); if (state.failed) return retval;
							if (state.backtracking == 0) {
								STRING85_tree = (CommonTree)adaptor.Create(STRING85);
								adaptor.AddChild(root_0, STRING85_tree);
							}

						}
						break;
						case 3:
						DebugEnterAlt(3);
						// CSS3.g3:213:7: IDENT ( LPAREN expr RPAREN )?
						{
							root_0 = (CommonTree)adaptor.Nil();

							DebugLocation(213, 7);
							IDENT86=(CommonToken)Match(input,IDENT,Follow._IDENT_in_term1508); if (state.failed) return retval;
							if (state.backtracking == 0) {
								IDENT86_tree = (CommonTree)adaptor.Create(IDENT86);
								adaptor.AddChild(root_0, IDENT86_tree);
							}
							DebugLocation(213, 13);
							// CSS3.g3:213:13: ( LPAREN expr RPAREN )?
							int alt25=2;
							try { DebugEnterSubRule(25);
								try { DebugEnterDecision(25, false);
									int LA25_0 = input.LA(1);

									if ((LA25_0==LPAREN))
									{
										alt25 = 1;
									}
								} finally { DebugExitDecision(25); }
								switch (alt25)
								{
									case 1:
									DebugEnterAlt(1);
									// CSS3.g3:214:17: LPAREN expr RPAREN
									{
										DebugLocation(214, 17);
										LPAREN87=(CommonToken)Match(input,LPAREN,Follow._LPAREN_in_term1531); if (state.failed) return retval;
										if (state.backtracking == 0) {
											LPAREN87_tree = (CommonTree)adaptor.Create(LPAREN87);
											adaptor.AddChild(root_0, LPAREN87_tree);
										}
										DebugLocation(214, 24);
										PushFollow(Follow._expr_in_term1533);
										expr88=expr();
										PopFollow();
										if (state.failed) return retval;
										if (state.backtracking == 0) adaptor.AddChild(root_0, expr88.Tree);
										DebugLocation(214, 29);
										RPAREN89=(CommonToken)Match(input,RPAREN,Follow._RPAREN_in_term1535); if (state.failed) return retval;
										if (state.backtracking == 0) {
											RPAREN89_tree = (CommonTree)adaptor.Create(RPAREN89);
											adaptor.AddChild(root_0, RPAREN89_tree);
										}

									}
									break;

								}
							} finally { DebugExitSubRule(25); }


						}
						break;
						case 4:
						DebugEnterAlt(4);
						// CSS3.g3:216:7: URI
						{
							root_0 = (CommonTree)adaptor.Nil();

							DebugLocation(216, 7);
							URI90=(CommonToken)Match(input,URI,Follow._URI_in_term1558); if (state.failed) return retval;
							if (state.backtracking == 0) {
								URI90_tree = (CommonTree)adaptor.Create(URI90);
								adaptor.AddChild(root_0, URI90_tree);
							}

						}
						break;
						case 5:
						DebugEnterAlt(5);
						// CSS3.g3:217:7: hexColor
						{
							root_0 = (CommonTree)adaptor.Nil();

							DebugLocation(217, 7);
							PushFollow(Follow._hexColor_in_term1566);
							hexColor91=hexColor();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) adaptor.AddChild(root_0, hexColor91.Tree);

						}
						break;

					}
					retval.Stop = (CommonToken)input.LT(-1);

					if (state.backtracking == 0) {
						retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
						adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
					}
				}
				catch (RecognitionException re)
				{
					ReportError(re);
					Recover(input,re);
					retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

				}
				finally
				{
					TraceOut("term", 26);
					LeaveRule("term", 26);
					LeaveRule_term();
				}
				DebugLocation(218, 4);
			} finally { DebugExitRule(GrammarFileName, "term"); }
			return retval;

		}
		// $ANTLR end "term"

		private sealed partial class hexColor_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
		{
			private CommonTree _tree;
			public CommonTree Tree { get { return _tree; } set { _tree = value; } }
			object IAstRuleReturnScope.Tree { get { return Tree; } }
			public hexColor_return(CSS3Parser grammar) {OnCreated(grammar);}
			partial void OnCreated(CSS3Parser grammar);
		}

		partial void EnterRule_hexColor();
		partial void LeaveRule_hexColor();

		// $ANTLR start "hexColor"
		// CSS3.g3:220:1: hexColor : HASH ;
		[GrammarRule("hexColor")]
		private CSS3Parser.hexColor_return hexColor()
		{
			EnterRule_hexColor();
			EnterRule("hexColor", 27);
			TraceIn("hexColor", 27);
			CSS3Parser.hexColor_return retval = new CSS3Parser.hexColor_return(this);
			retval.Start = (CommonToken)input.LT(1);

			CommonTree root_0 = default(CommonTree);

			CommonToken HASH92 = default(CommonToken);

			CommonTree HASH92_tree = default(CommonTree);

			try { DebugEnterRule(GrammarFileName, "hexColor");
				DebugLocation(220, 4);
				try
				{
					// CSS3.g3:221:5: ( HASH )
					DebugEnterAlt(1);
					// CSS3.g3:221:7: HASH
					{
						root_0 = (CommonTree)adaptor.Nil();

						DebugLocation(221, 7);
						HASH92=(CommonToken)Match(input,HASH,Follow._HASH_in_hexColor1587); if (state.failed) return retval;
						if (state.backtracking == 0) {
							HASH92_tree = (CommonTree)adaptor.Create(HASH92);
							adaptor.AddChild(root_0, HASH92_tree);
						}

					}

					retval.Stop = (CommonToken)input.LT(-1);

					if (state.backtracking == 0) {
						retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
						adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
					}
				}
				catch (RecognitionException re)
				{
					ReportError(re);
					Recover(input,re);
					retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

				}
				finally
				{
					TraceOut("hexColor", 27);
					LeaveRule("hexColor", 27);
					LeaveRule_hexColor();
				}
				DebugLocation(222, 4);
			} finally { DebugExitRule(GrammarFileName, "hexColor"); }
			return retval;

		}
		// $ANTLR end "hexColor"

		partial void EnterRule_synpred1_CSS3_fragment();
		partial void LeaveRule_synpred1_CSS3_fragment();

		// $ANTLR start synpred1_CSS3
		public void synpred1_CSS3_fragment()
		{
			EnterRule_synpred1_CSS3_fragment();
			EnterRule("synpred1_CSS3_fragment", 28);
			TraceIn("synpred1_CSS3_fragment", 28);
			try
			{
				// CSS3.g3:134:10: ( esPred )
				DebugEnterAlt(1);
				// CSS3.g3:134:11: esPred
				{
					DebugLocation(134, 11);
					PushFollow(Follow._esPred_in_synpred1_CSS3694);
					esPred();
					PopFollow();
					if (state.failed) return;

				}

			}
			finally
			{
				TraceOut("synpred1_CSS3_fragment", 28);
				LeaveRule("synpred1_CSS3_fragment", 28);
				LeaveRule_synpred1_CSS3_fragment();
			}
		}
		// $ANTLR end synpred1_CSS3

		partial void EnterRule_synpred2_CSS3_fragment();
		partial void LeaveRule_synpred2_CSS3_fragment();

		// $ANTLR start synpred2_CSS3
		public void synpred2_CSS3_fragment()
		{
			EnterRule_synpred2_CSS3_fragment();
			EnterRule("synpred2_CSS3_fragment", 29);
			TraceIn("synpred2_CSS3_fragment", 29);
			try
			{
				// CSS3.g3:136:8: ( esPred )
				DebugEnterAlt(1);
				// CSS3.g3:136:9: esPred
				{
					DebugLocation(136, 9);
					PushFollow(Follow._esPred_in_synpred2_CSS3718);
					esPred();
					PopFollow();
					if (state.failed) return;

				}

			}
			finally
			{
				TraceOut("synpred2_CSS3_fragment", 29);
				LeaveRule("synpred2_CSS3_fragment", 29);
				LeaveRule_synpred2_CSS3_fragment();
			}
		}
		// $ANTLR end synpred2_CSS3
		#endregion Rules

		#region Synpreds
		private bool EvaluatePredicate(System.Action fragment)
		{
			bool success = false;
			state.backtracking++;
			try { DebugBeginBacktrack(state.backtracking);
				int start = input.Mark();
				try
				{
					fragment();
				}
				catch ( RecognitionException re )
				{
					System.Console.Error.WriteLine("impossible: "+re);
				}
				success = !state.failed;
				input.Rewind(start);
			} finally { DebugEndBacktrack(state.backtracking, success); }
			state.backtracking--;
			state.failed=false;
			return success;
		}
		#endregion Synpreds


		#region DFA
		private DFA15 dfa15;

		protected override void InitDFAs()
		{
			base.InitDFAs();
			dfa15 = new DFA15( this, SpecialStateTransition15 );
		}

		private class DFA15 : DFA
		{
			private const string DFA15_eotS =
				"\xD\xFFFF";
			private const string DFA15_eofS =
				"\xD\xFFFF";
			private const string DFA15_minS =
				"\x1\xC\x1\xFFFF\x1\x0\x3\x1F\x1\xFFFF\x1\x0\x1\x10\x1\x0\x1\x1F\x1\x0"+
					"\x1\x3E";
			private const string DFA15_maxS =
				"\x1\x43\x1\xFFFF\x1\x0\x3\x1F\x1\xFFFF\x1\x0\x1\x3E\x1\x0\x1\x44\x1\x0"+
					"\x1\x3E";
			private const string DFA15_acceptS =
				"\x1\xFFFF\x1\x2\x4\xFFFF\x1\x1\x6\xFFFF";
			private const string DFA15_specialS =
				"\x2\xFFFF\x1\x0\x4\xFFFF\x1\x1\x1\xFFFF\x1\x2\x1\xFFFF\x1\x3\x1\xFFFF}>";
			private static readonly string[] DFA15_transitionS =
			{
				"\x1\x5\x1\x1\x4\xFFFF\x1\x3\x7\xFFFF\x1\x1\x1\xFFFF\x1\x2\x2\xFFFF\x1"+
				"\x1\x7\xFFFF\x1\x1\x1\x4\x11\xFFFF\x1\x1\x8\xFFFF\x1\x1",
				"",
				"\x1\xFFFF",
				"\x1\x7",
				"\x1\x8",
				"\x1\x9",
				"",
				"\x1\xFFFF",
				"\x1\xA\x11\xFFFF\x1\xA\x13\xFFFF\x1\xA\x7\xFFFF\x1\xB",
				"\x1\xFFFF",
				"\x1\xC\x24\xFFFF\x1\xC",
				"\x1\xFFFF",
				"\x1\xB"
			};

			private static readonly short[] DFA15_eot = DFA.UnpackEncodedString(DFA15_eotS);
			private static readonly short[] DFA15_eof = DFA.UnpackEncodedString(DFA15_eofS);
			private static readonly char[] DFA15_min = DFA.UnpackEncodedStringToUnsignedChars(DFA15_minS);
			private static readonly char[] DFA15_max = DFA.UnpackEncodedStringToUnsignedChars(DFA15_maxS);
			private static readonly short[] DFA15_accept = DFA.UnpackEncodedString(DFA15_acceptS);
			private static readonly short[] DFA15_special = DFA.UnpackEncodedString(DFA15_specialS);
			private static readonly short[][] DFA15_transition;

			static DFA15()
			{
				int numStates = DFA15_transitionS.Length;
				DFA15_transition = new short[numStates][];
				for ( int i=0; i < numStates; i++ )
				{
					DFA15_transition[i] = DFA.UnpackEncodedString(DFA15_transitionS[i]);
				}
			}

			public DFA15( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
				: base(specialStateTransition)
			{
				this.recognizer = recognizer;
				this.decisionNumber = 15;
				this.eot = DFA15_eot;
				this.eof = DFA15_eof;
				this.min = DFA15_min;
				this.max = DFA15_max;
				this.accept = DFA15_accept;
				this.special = DFA15_special;
				this.transition = DFA15_transition;
			}

			public override string Description { get { return "()* loopback of 134:9: ( ( esPred )=> elementSubsequent )*"; } }

			public override void Error(NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
			}
		}

		private int SpecialStateTransition15(DFA dfa, int s, IIntStream _input)
		{
			ITokenStream input = (ITokenStream)_input;
			int _s = s;
			switch (s)
			{
				case 0:
				int LA15_2 = input.LA(1);


				int index15_2 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred1_CSS3_fragment))) {s = 6;}

				else if ((true)) {s = 1;}


				input.Seek(index15_2);
				if (s >= 0) return s;
				break;
				case 1:
				int LA15_7 = input.LA(1);


				int index15_7 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred1_CSS3_fragment))) {s = 6;}

				else if ((true)) {s = 1;}


				input.Seek(index15_7);
				if (s >= 0) return s;
				break;
				case 2:
				int LA15_9 = input.LA(1);


				int index15_9 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred1_CSS3_fragment))) {s = 6;}

				else if ((true)) {s = 1;}


				input.Seek(index15_9);
				if (s >= 0) return s;
				break;
				case 3:
				int LA15_11 = input.LA(1);


				int index15_11 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred1_CSS3_fragment))) {s = 6;}

				else if ((true)) {s = 1;}


				input.Seek(index15_11);
				if (s >= 0) return s;
				break;
			}
			if (state.backtracking > 0) {state.failed=true; return -1;}
			NoViableAltException nvae = new NoViableAltException(dfa.Description, 15, _s, input);
			dfa.Error(nvae);
			throw nvae;
		}

		#endregion DFA

		#region Follow sets
		private static class Follow
		{
			public static readonly BitSet _charSet_in_styleSheet99 = new BitSet(new ulong[]{0x100110290041000UL,0x8UL});
			public static readonly BitSet _imports_in_styleSheet109 = new BitSet(new ulong[]{0x100110290041000UL,0x8UL});
			public static readonly BitSet _bodylist_in_styleSheet120 = new BitSet(new ulong[]{0x0UL});
			public static readonly BitSet _EOF_in_styleSheet127 = new BitSet(new ulong[]{0x2UL});
			public static readonly BitSet _CHARSET_SYM_in_charSet153 = new BitSet(new ulong[]{0x0UL,0x10UL});
			public static readonly BitSet _STRING_in_charSet155 = new BitSet(new ulong[]{0x0UL,0x2UL});
			public static readonly BitSet _SEMI_in_charSet157 = new BitSet(new ulong[]{0x2UL});
			public static readonly BitSet _IMPORT_SYM_in_imports185 = new BitSet(new ulong[]{0x0UL,0x210UL});
			public static readonly BitSet _set_in_imports187 = new BitSet(new ulong[]{0x80000000UL,0x2UL});
			public static readonly BitSet _medium_in_imports194 = new BitSet(new ulong[]{0x2000UL,0x2UL});
			public static readonly BitSet _COMMA_in_imports197 = new BitSet(new ulong[]{0x80000000UL});
			public static readonly BitSet _medium_in_imports199 = new BitSet(new ulong[]{0x2000UL,0x2UL});
			public static readonly BitSet _SEMI_in_imports205 = new BitSet(new ulong[]{0x2UL});
			public static readonly BitSet _MEDIA_SYM_in_media226 = new BitSet(new ulong[]{0x80000000UL});
			public static readonly BitSet _medium_in_media228 = new BitSet(new ulong[]{0x8000002000UL});
			public static readonly BitSet _COMMA_in_media231 = new BitSet(new ulong[]{0x80000000UL});
			public static readonly BitSet _medium_in_media233 = new BitSet(new ulong[]{0x8000002000UL});
			public static readonly BitSet _LBRACE_in_media245 = new BitSet(new ulong[]{0x10090041000UL,0x8UL});
			public static readonly BitSet _ruleSet_in_media259 = new BitSet(new ulong[]{0x2000000000000000UL});
			public static readonly BitSet _RBRACE_in_media269 = new BitSet(new ulong[]{0x2UL});
			public static readonly BitSet _IDENT_in_medium289 = new BitSet(new ulong[]{0x2UL});
			public static readonly BitSet _bodyset_in_bodylist312 = new BitSet(new ulong[]{0x100110090041002UL,0x8UL});
			public static readonly BitSet _ruleSet_in_bodyset334 = new BitSet(new ulong[]{0x2UL});
			public static readonly BitSet _media_in_bodyset342 = new BitSet(new ulong[]{0x2UL});
			public static readonly BitSet _page_in_bodyset350 = new BitSet(new ulong[]{0x2UL});
			public static readonly BitSet _PAGE_SYM_in_page374 = new BitSet(new ulong[]{0x8000001000UL});
			public static readonly BitSet _pseudoPage_in_page376 = new BitSet(new ulong[]{0x8000000000UL});
			public static readonly BitSet _LBRACE_in_page387 = new BitSet(new ulong[]{0x80000000UL});
			public static readonly BitSet _declaration_in_page401 = new BitSet(new ulong[]{0x0UL,0x2UL});
			public static readonly BitSet _SEMI_in_page403 = new BitSet(new ulong[]{0x2000000080000000UL});
			public static readonly BitSet _declaration_in_page406 = new BitSet(new ulong[]{0x0UL,0x2UL});
			public static readonly BitSet _SEMI_in_page408 = new BitSet(new ulong[]{0x2000000080000000UL});
			public static readonly BitSet _RBRACE_in_page420 = new BitSet(new ulong[]{0x2UL});
			public static readonly BitSet _COLON_in_pseudoPage441 = new BitSet(new ulong[]{0x80000000UL});
			public static readonly BitSet _IDENT_in_pseudoPage443 = new BitSet(new ulong[]{0x2UL});
			public static readonly BitSet _SOLIDUS_in_operator464 = new BitSet(new ulong[]{0x2UL});
			public static readonly BitSet _COMMA_in_operator472 = new BitSet(new ulong[]{0x2UL});
			public static readonly BitSet _PLUS_in_combinator499 = new BitSet(new ulong[]{0x2UL});
			public static readonly BitSet _GREATER_in_combinator507 = new BitSet(new ulong[]{0x2UL});
			public static readonly BitSet _set_in_unaryOperator532 = new BitSet(new ulong[]{0x2UL});
			public static readonly BitSet _IDENT_in_property565 = new BitSet(new ulong[]{0x2UL});
			public static readonly BitSet _selector_in_ruleSet586 = new BitSet(new ulong[]{0x8000002000UL});
			public static readonly BitSet _COMMA_in_ruleSet589 = new BitSet(new ulong[]{0x10090041000UL,0x8UL});
			public static readonly BitSet _selector_in_ruleSet591 = new BitSet(new ulong[]{0x8000002000UL});
			public static readonly BitSet _LBRACE_in_ruleSet603 = new BitSet(new ulong[]{0x80000000UL});
			public static readonly BitSet _declaration_in_ruleSet617 = new BitSet(new ulong[]{0x0UL,0x2UL});
			public static readonly BitSet _SEMI_in_ruleSet619 = new BitSet(new ulong[]{0x2000000080000000UL});
			public static readonly BitSet _declaration_in_ruleSet622 = new BitSet(new ulong[]{0x0UL,0x2UL});
			public static readonly BitSet _SEMI_in_ruleSet624 = new BitSet(new ulong[]{0x2000000080000000UL});
			public static readonly BitSet _RBRACE_in_ruleSet636 = new BitSet(new ulong[]{0x2UL});
			public static readonly BitSet _simpleSelector_in_selector657 = new BitSet(new ulong[]{0x400010094041002UL,0x8UL});
			public static readonly BitSet _combinator_in_selector660 = new BitSet(new ulong[]{0x10090041000UL,0x8UL});
			public static readonly BitSet _simpleSelector_in_selector662 = new BitSet(new ulong[]{0x400010094041002UL,0x8UL});
			public static readonly BitSet _elementName_in_simpleSelector681 = new BitSet(new ulong[]{0x10090041002UL,0x8UL});
			public static readonly BitSet _elementSubsequent_in_simpleSelector697 = new BitSet(new ulong[]{0x10090041002UL,0x8UL});
			public static readonly BitSet _elementSubsequent_in_simpleSelector721 = new BitSet(new ulong[]{0x10090041002UL,0x8UL});
			public static readonly BitSet _set_in_esPred742 = new BitSet(new ulong[]{0x2UL});
			public static readonly BitSet _HASH_in_elementSubsequent777 = new BitSet(new ulong[]{0x2UL});
			public static readonly BitSet _cssClass_in_elementSubsequent785 = new BitSet(new ulong[]{0x2UL});
			public static readonly BitSet _attrib_in_elementSubsequent793 = new BitSet(new ulong[]{0x2UL});
			public static readonly BitSet _pseudo_in_elementSubsequent801 = new BitSet(new ulong[]{0x2UL});
			public static readonly BitSet _DOT_in_cssClass822 = new BitSet(new ulong[]{0x80000000UL});
			public static readonly BitSet _IDENT_in_cssClass824 = new BitSet(new ulong[]{0x2UL});
			public static readonly BitSet _set_in_elementName843 = new BitSet(new ulong[]{0x2UL});
			public static readonly BitSet _LBRACKET_in_attrib874 = new BitSet(new ulong[]{0x80000000UL});
			public static readonly BitSet _IDENT_in_attrib889 = new BitSet(new ulong[]{0x4040000400010000UL});
			public static readonly BitSet _set_in_attrib930 = new BitSet(new ulong[]{0x80000000UL,0x10UL});
			public static readonly BitSet _set_in_attrib1038 = new BitSet(new ulong[]{0x4000000000000000UL});
			public static readonly BitSet _RBRACKET_in_attrib1139 = new BitSet(new ulong[]{0x2UL});
			public static readonly BitSet _COLON_in_pseudo1152 = new BitSet(new ulong[]{0x80000000UL});
			public static readonly BitSet _IDENT_in_pseudo1167 = new BitSet(new ulong[]{0x40000000002UL});
			public static readonly BitSet _LPAREN_in_pseudo1225 = new BitSet(new ulong[]{0x8000000080000000UL});
			public static readonly BitSet _IDENT_in_pseudo1227 = new BitSet(new ulong[]{0x8000000000000000UL});
			public static readonly BitSet _RPAREN_in_pseudo1230 = new BitSet(new ulong[]{0x2UL});
			public static readonly BitSet _property_in_declaration1266 = new BitSet(new ulong[]{0x1000UL});
			public static readonly BitSet _COLON_in_declaration1268 = new BitSet(new ulong[]{0x610220091500020UL,0x250UL});
			public static readonly BitSet _expr_in_declaration1270 = new BitSet(new ulong[]{0x100000002UL});
			public static readonly BitSet _prio_in_declaration1272 = new BitSet(new ulong[]{0x2UL});
			public static readonly BitSet _IMPORTANT_SYM_in_prio1294 = new BitSet(new ulong[]{0x2UL});
			public static readonly BitSet _term_in_expr1315 = new BitSet(new ulong[]{0x610220091502022UL,0x254UL});
			public static readonly BitSet _operator_in_expr1318 = new BitSet(new ulong[]{0x610220091500020UL,0x250UL});
			public static readonly BitSet _term_in_expr1320 = new BitSet(new ulong[]{0x610220091502022UL,0x254UL});
			public static readonly BitSet _unaryOperator_in_term1343 = new BitSet(new ulong[]{0x210020001500020UL,0x40UL});
			public static readonly BitSet _set_in_term1354 = new BitSet(new ulong[]{0x2UL});
			public static readonly BitSet _STRING_in_term1500 = new BitSet(new ulong[]{0x2UL});
			public static readonly BitSet _IDENT_in_term1508 = new BitSet(new ulong[]{0x40000000002UL});
			public static readonly BitSet _LPAREN_in_term1531 = new BitSet(new ulong[]{0x610220091500020UL,0x250UL});
			public static readonly BitSet _expr_in_term1533 = new BitSet(new ulong[]{0x8000000000000000UL});
			public static readonly BitSet _RPAREN_in_term1535 = new BitSet(new ulong[]{0x2UL});
			public static readonly BitSet _URI_in_term1558 = new BitSet(new ulong[]{0x2UL});
			public static readonly BitSet _hexColor_in_term1566 = new BitSet(new ulong[]{0x2UL});
			public static readonly BitSet _HASH_in_hexColor1587 = new BitSet(new ulong[]{0x2UL});
			public static readonly BitSet _esPred_in_synpred1_CSS3694 = new BitSet(new ulong[]{0x2UL});
			public static readonly BitSet _esPred_in_synpred2_CSS3718 = new BitSet(new ulong[]{0x2UL});

		}
		#endregion Follow sets
	}

} // namespace CssParser
010094041002UL,0x8UL});
		public static readonly BitSet _elementName_in_simpleSelector681 = new BitSet(new ulong[]{0x10090041002UL,0x8UL});
		public static readonly BitSet _elementSubsequent_in_simpleSelector697 = new BitSet(new ulong[]{0x10090041002UL,0x8UL});
		public static readonly BitSet _elementSubsequent_in_simpleSelector721 = new BitSet(new ulong[]{0x10090041002UL,0x8UL});
		public static readonly BitSet _set_in_esPred742 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _HASH_in_elementSubsequent777 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _cssClass_in_elementSubsequent785 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attrib_in_elementSubsequent793 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _pseudo_in_elementSubsequent801 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOT_in_cssClass822 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _IDENT_in_cssClass824 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_elementName843 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LBRACKET_in_attrib874 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _IDENT_in_attrib889 = new BitSet(new ulong[]{0x4040000400010000UL});
		public static readonly BitSet _set_in_attrib930 = new BitSet(new ulong[]{0x80000000UL,0x10UL});
		public static readonly BitSet _set_in_attrib1038 = new BitSet(new ulong[]{0x4000000000000000UL});
		public static readonly BitSet _RBRACKET_in_attrib1139 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _COLON_in_pseudo1152 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _IDENT_in_pseudo1167 = new BitSet(new ulong[]{0x40000000002UL});
		public static readonly BitSet _LPAREN_in_pseudo1225 = new BitSet(new ulong[]{0x8000000080000000UL});
		public static readonly BitSet _IDENT_in_pseudo1227 = new BitSet(new ulong[]{0x8000000000000000UL});
		public static readonly BitSet _RPAREN_in_pseudo1230 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _property_in_declaration1266 = new BitSet(new ulong[]{0x1000UL});
		public static readonly BitSet _COLON_in_declaration1268 = new BitSet(new ulong[]{0x610220091500020UL,0x250UL});
		public static readonly BitSet _expr_in_declaration1270 = new BitSet(new ulong[]{0x100000002UL});
		public static readonly BitSet _prio_in_declaration1272 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IMPORTANT_SYM_in_prio1294 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _term_in_expr1315 = new BitSet(new ulong[]{0x610220091502022UL,0x254UL});
		public static readonly BitSet _operator_in_expr1318 = new BitSet(new ulong[]{0x610220091500020UL,0x250UL});
		public static readonly BitSet _term_in_expr1320 = new BitSet(new ulong[]{0x610220091502022UL,0x254UL});
		public static readonly BitSet _unaryOperator_in_term1343 = new BitSet(new ulong[]{0x210020001500020UL,0x40UL});
		public static readonly BitSet _set_in_term1354 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_term1500 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_term1508 = new BitSet(new ulong[]{0x40000000002UL});
		public static readonly BitSet _LPAREN_in_term1531 = new BitSet(new ulong[]{0x610220091500020UL,0x250UL});
		public static readonly BitSet _expr_in_term1533 = new BitSet(new ulong[]{0x8000000000000000UL});
		public static readonly BitSet _RPAREN_in_term1535 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _URI_in_term1558 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _hexColor_in_term1566 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _HASH_in_hexColor1587 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _esPred_in_synpred1_CSS3694 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _esPred_in_synpred2_CSS3718 = new BitSet(new ulong[]{0x2UL});

	}
	#endregion Follow sets
}

} // namespace CssParser


