//
// CSSParser.cs
//
// Author:
//       Diyoda Sajjana <>
//
// Copyright (c) 2013 Diyoda Sajjana
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.3.1.7705
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.3.1.7705 CSS3.g3 2013-07-14 23:24:49

// The variable 'variable' is assigned but its value is never used.
//#pragma warning disable 219
// Unreachable code detected.
//#pragma warning disable 162


using System.Collections.Generic;
using Antlr.Runtime;

namespace Parser
{
	[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.3.1.7705")]
	[System.CLSCompliant(false)]
	public partial class CSS3Parser : Antlr.Runtime.Parser
	{
		internal static readonly string[] tokenNames = new string[] {
			"<invalid>", "<EOR>", "<DOWN>", "<UP>", "A", "ANGLE", "B", "C", "CDC", "CDO", "CHARSET_SYM", "COLON", "COMMA", "COMMENT", "D", "DASHMATCH", "DIMENSION", "DOT", "E", "EMS", "ESCAPE", "EXS", "F", "FREQ", "G", "GREATER", "H", "HASH", "HEXCHAR", "I", "IDENT", "IMPORTANT_SYM", "IMPORT_SYM", "INCLUDES", "INVALID", "J", "K", "L", "LBRACE", "LBRACKET", "LENGTH", "LPAREN", "M", "MEDIA_SYM", "MINUS", "N", "NAME", "NL", "NMCHAR", "NMSTART", "NONASCII", "NUMBER", "O", "OPEQ", "P", "PAGE_SYM", "PERCENTAGE", "PLUS", "Q", "R", "RBRACE", "RBRACKET", "RPAREN", "S", "SEMI", "SOLIDUS", "STAR", "STRING", "T", "TIME", "U", "UNICODE", "URI", "URL", "V", "W", "WS", "X", "Y", "Z"
		};
		public const int EOF=-1;
		public const int A=4;
		public const int ANGLE=5;
		public const int B=6;
		public const int C=7;
		public const int CDC=8;
		public const int CDO=9;
		public const int CHARSET_SYM=10;
		public const int COLON=11;
		public const int COMMA=12;
		public const int COMMENT=13;
		public const int D=14;
		public const int DASHMATCH=15;
		public const int DIMENSION=16;
		public const int DOT=17;
		public const int E=18;
		public const int EMS=19;
		public const int ESCAPE=20;
		public const int EXS=21;
		public const int F=22;
		public const int FREQ=23;
		public const int G=24;
		public const int GREATER=25;
		public const int H=26;
		public const int HASH=27;
		public const int HEXCHAR=28;
		public const int I=29;
		public const int IDENT=30;
		public const int IMPORTANT_SYM=31;
		public const int IMPORT_SYM=32;
		public const int INCLUDES=33;
		public const int INVALID=34;
		public const int J=35;
		public const int K=36;
		public const int L=37;
		public const int LBRACE=38;
		public const int LBRACKET=39;
		public const int LENGTH=40;
		public const int LPAREN=41;
		public const int M=42;
		public const int MEDIA_SYM=43;
		public const int MINUS=44;
		public const int N=45;
		public const int NAME=46;
		public const int NL=47;
		public const int NMCHAR=48;
		public const int NMSTART=49;
		public const int NONASCII=50;
		public const int NUMBER=51;
		public const int O=52;
		public const int OPEQ=53;
		public const int P=54;
		public const int PAGE_SYM=55;
		public const int PERCENTAGE=56;
		public const int PLUS=57;
		public const int Q=58;
		public const int R=59;
		public const int RBRACE=60;
		public const int RBRACKET=61;
		public const int RPAREN=62;
		public const int S=63;
		public const int SEMI=64;
		public const int SOLIDUS=65;
		public const int STAR=66;
		public const int STRING=67;
		public const int T=68;
		public const int TIME=69;
		public const int U=70;
		public const int UNICODE=71;
		public const int URI=72;
		public const int URL=73;
		public const int V=74;
		public const int W=75;
		public const int WS=76;
		public const int X=77;
		public const int Y=78;
		public const int Z=79;

		// delegates
		// delegators

		public CSS3Parser( ITokenStream input )
			: this( input, new RecognizerSharedState() )
		{
		}
		public CSS3Parser(ITokenStream input, RecognizerSharedState state)
			: base(input, state)
		{

			OnCreated();
		}


		public override string[] TokenNames { get { return CSS3Parser.tokenNames; } }
		public override string GrammarFileName { get { return "CSS3.g3"; } }


		partial void OnCreated();
		partial void EnterRule(string ruleName, int ruleIndex);
		partial void LeaveRule(string ruleName, int ruleIndex);

		#region Rules

		partial void EnterRule_styleSheet();
		partial void LeaveRule_styleSheet();

		// $ANTLR start "styleSheet"
		// CSS3.g3:38:1: styleSheet : charSet ( imports )* bodylist EOF ;
		[GrammarRule("styleSheet")]
		private void styleSheet()
		{
			EnterRule_styleSheet();
			EnterRule("styleSheet", 1);
			TraceIn("styleSheet", 1);
			try { DebugEnterRule(GrammarFileName, "styleSheet");
				DebugLocation(38, 4);
				try
				{
					// CSS3.g3:39:5: ( charSet ( imports )* bodylist EOF )
					DebugEnterAlt(1);
					// CSS3.g3:39:9: charSet ( imports )* bodylist EOF
					{
						DebugLocation(39, 9);
						PushFollow(Follow._charSet_in_styleSheet87);
						charSet();
						PopFollow();
						if (state.failed) return;
						DebugLocation(40, 9);
						// CSS3.g3:40:9: ( imports )*
						try { DebugEnterSubRule(1);
							while (true)
							{
								int alt1=2;
								try { DebugEnterDecision(1, false);
									int LA1_0 = input.LA(1);

									if ((LA1_0==IMPORT_SYM))
									{
										alt1 = 1;
									}


								} finally { DebugExitDecision(1); }
								switch ( alt1 )
								{
									case 1:
									DebugEnterAlt(1);
									// CSS3.g3:40:9: imports
									{
										DebugLocation(40, 9);
										PushFollow(Follow._imports_in_styleSheet97);
										imports();
										PopFollow();
										if (state.failed) return;

									}
									break;

									default:
									goto loop1;
								}
							}

							loop1:
								;

						} finally { DebugExitSubRule(1); }

						DebugLocation(41, 9);
						PushFollow(Follow._bodylist_in_styleSheet108);
						bodylist();
						PopFollow();
						if (state.failed) return;
						DebugLocation(42, 6);
						Match(input,EOF,Follow._EOF_in_styleSheet115); if (state.failed) return;

					}

				}
				catch (RecognitionException re)
				{
					ReportError(re);
					Recover(input,re);
				}
				finally
				{
					TraceOut("styleSheet", 1);
					LeaveRule("styleSheet", 1);
					LeaveRule_styleSheet();
				}
				DebugLocation(43, 4);
			} finally { DebugExitRule(GrammarFileName, "styleSheet"); }
			return;

		}
		// $ANTLR end "styleSheet"


		partial void EnterRule_charSet();
		partial void LeaveRule_charSet();

		// $ANTLR start "charSet"
		// CSS3.g3:48:1: charSet : ( CHARSET_SYM STRING SEMI |);
		[GrammarRule("charSet")]
		private void charSet()
		{
			EnterRule_charSet();
			EnterRule("charSet", 2);
			TraceIn("charSet", 2);
			try { DebugEnterRule(GrammarFileName, "charSet");
				DebugLocation(48, 4);
				try
				{
					// CSS3.g3:49:5: ( CHARSET_SYM STRING SEMI |)
					int alt2=2;
					try { DebugEnterDecision(2, false);
						int LA2_0 = input.LA(1);

						if ((LA2_0==CHARSET_SYM))
						{
							alt2 = 1;
						}
						else if ((LA2_0==EOF||LA2_0==COLON||LA2_0==DOT||LA2_0==HASH||LA2_0==IDENT||LA2_0==IMPORT_SYM||LA2_0==LBRACKET||LA2_0==MEDIA_SYM||LA2_0==PAGE_SYM||LA2_0==STAR))
						{
							alt2 = 2;
						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return;}
							NoViableAltException nvae = new NoViableAltException("", 2, 0, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					} finally { DebugExitDecision(2); }
					switch (alt2)
					{
						case 1:
						DebugEnterAlt(1);
						// CSS3.g3:49:9: CHARSET_SYM STRING SEMI
						{
							DebugLocation(49, 9);
							Match(input,CHARSET_SYM,Follow._CHARSET_SYM_in_charSet141); if (state.failed) return;
							DebugLocation(49, 21);
							Match(input,STRING,Follow._STRING_in_charSet143); if (state.failed) return;
							DebugLocation(49, 28);
							Match(input,SEMI,Follow._SEMI_in_charSet145); if (state.failed) return;

						}
						break;
						case 2:
						DebugEnterAlt(2);
						// CSS3.g3:51:5: 
						{
						}
						break;

					}
				}
				catch (RecognitionException re)
				{
					ReportError(re);
					Recover(input,re);
				}
				finally
				{
					TraceOut("charSet", 2);
					LeaveRule("charSet", 2);
					LeaveRule_charSet();
				}
				DebugLocation(51, 4);
			} finally { DebugExitRule(GrammarFileName, "charSet"); }
			return;

		}
		// $ANTLR end "charSet"


		partial void EnterRule_imports();
		partial void LeaveRule_imports();

		// $ANTLR start "imports"
		// CSS3.g3:56:1: imports : IMPORT_SYM ( STRING | URI ) ( medium ( COMMA medium )* )? SEMI ;
		[GrammarRule("imports")]
		private void imports()
		{
			EnterRule_imports();
			EnterRule("imports", 3);
			TraceIn("imports", 3);
			try { DebugEnterRule(GrammarFileName, "imports");
				DebugLocation(56, 4);
				try
				{
					// CSS3.g3:57:5: ( IMPORT_SYM ( STRING | URI ) ( medium ( COMMA medium )* )? SEMI )
					DebugEnterAlt(1);
					// CSS3.g3:57:9: IMPORT_SYM ( STRING | URI ) ( medium ( COMMA medium )* )? SEMI
					{
						DebugLocation(57, 9);
						Match(input,IMPORT_SYM,Follow._IMPORT_SYM_in_imports173); if (state.failed) return;
						DebugLocation(57, 20);
						if (input.LA(1)==STRING||input.LA(1)==URI)
						{
							input.Consume();
							state.errorRecovery=false;state.failed=false;
						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return;}
							MismatchedSetException mse = new MismatchedSetException(null,input);
							DebugRecognitionException(mse);
							throw mse;
						}

						DebugLocation(57, 33);
						// CSS3.g3:57:33: ( medium ( COMMA medium )* )?
						int alt4=2;
						try { DebugEnterSubRule(4);
							try { DebugEnterDecision(4, false);
								int LA4_0 = input.LA(1);

								if ((LA4_0==IDENT))
								{
									alt4 = 1;
								}
							} finally { DebugExitDecision(4); }
							switch (alt4)
							{
								case 1:
								DebugEnterAlt(1);
								// CSS3.g3:57:34: medium ( COMMA medium )*
								{
									DebugLocation(57, 34);
									PushFollow(Follow._medium_in_imports182);
									medium();
									PopFollow();
									if (state.failed) return;
									DebugLocation(57, 41);
									// CSS3.g3:57:41: ( COMMA medium )*
									try { DebugEnterSubRule(3);
										while (true)
										{
											int alt3=2;
											try { DebugEnterDecision(3, false);
												int LA3_0 = input.LA(1);

												if ((LA3_0==COMMA))
												{
													alt3 = 1;
												}


											} finally { DebugExitDecision(3); }
											switch ( alt3 )
											{
												case 1:
												DebugEnterAlt(1);
												// CSS3.g3:57:42: COMMA medium
												{
													DebugLocation(57, 42);
													Match(input,COMMA,Follow._COMMA_in_imports185); if (state.failed) return;
													DebugLocation(57, 48);
													PushFollow(Follow._medium_in_imports187);
													medium();
													PopFollow();
													if (state.failed) return;

												}
												break;

												default:
												goto loop3;
											}
										}

										loop3:
											;

									} finally { DebugExitSubRule(3); }


								}
								break;

							}
						} finally { DebugExitSubRule(4); }

						DebugLocation(57, 59);
						Match(input,SEMI,Follow._SEMI_in_imports193); if (state.failed) return;

					}

				}
				catch (RecognitionException re)
				{
					ReportError(re);
					Recover(input,re);
				}
				finally
				{
					TraceOut("imports", 3);
					LeaveRule("imports", 3);
					LeaveRule_imports();
				}
				DebugLocation(58, 4);
			} finally { DebugExitRule(GrammarFileName, "imports"); }
			return;

		}
		// $ANTLR end "imports"


		partial void EnterRule_media();
		partial void LeaveRule_media();

		// $ANTLR start "media"
		// CSS3.g3:64:1: media : MEDIA_SYM medium ( COMMA medium )* LBRACE ruleSet RBRACE ;
		[GrammarRule("media")]
		private void media()
		{
			EnterRule_media();
			EnterRule("media", 4);
			TraceIn("media", 4);
			try { DebugEnterRule(GrammarFileName, "media");
				DebugLocation(64, 4);
				try
				{
					// CSS3.g3:65:5: ( MEDIA_SYM medium ( COMMA medium )* LBRACE ruleSet RBRACE )
					DebugEnterAlt(1);
					// CSS3.g3:65:7: MEDIA_SYM medium ( COMMA medium )* LBRACE ruleSet RBRACE
					{
						DebugLocation(65, 7);
						Match(input,MEDIA_SYM,Follow._MEDIA_SYM_in_media214); if (state.failed) return;
						DebugLocation(65, 17);
						PushFollow(Follow._medium_in_media216);
						medium();
						PopFollow();
						if (state.failed) return;
						DebugLocation(65, 24);
						// CSS3.g3:65:24: ( COMMA medium )*
						try { DebugEnterSubRule(5);
							while (true)
							{
								int alt5=2;
								try { DebugEnterDecision(5, false);
									int LA5_0 = input.LA(1);

									if ((LA5_0==COMMA))
									{
										alt5 = 1;
									}


								} finally { DebugExitDecision(5); }
								switch ( alt5 )
								{
									case 1:
									DebugEnterAlt(1);
									// CSS3.g3:65:25: COMMA medium
									{
										DebugLocation(65, 25);
										Match(input,COMMA,Follow._COMMA_in_media219); if (state.failed) return;
										DebugLocation(65, 31);
										PushFollow(Follow._medium_in_media221);
										medium();
										PopFollow();
										if (state.failed) return;

									}
									break;

									default:
									goto loop5;
								}
							}

							loop5:
								;

						} finally { DebugExitSubRule(5); }

						DebugLocation(66, 9);
						Match(input,LBRACE,Follow._LBRACE_in_media233); if (state.failed) return;
						DebugLocation(67, 13);
						PushFollow(Follow._ruleSet_in_media247);
						ruleSet();
						PopFollow();
						if (state.failed) return;
						DebugLocation(68, 9);
						Match(input,RBRACE,Follow._RBRACE_in_media257); if (state.failed) return;

					}

				}
				catch (RecognitionException re)
				{
					ReportError(re);
					Recover(input,re);
				}
				finally
				{
					TraceOut("media", 4);
					LeaveRule("media", 4);
					LeaveRule_media();
				}
				DebugLocation(69, 4);
			} finally { DebugExitRule(GrammarFileName, "media"); }
			return;

		}
		// $ANTLR end "media"


		partial void EnterRule_medium();
		partial void LeaveRule_medium();

		// $ANTLR start "medium"
		// CSS3.g3:74:1: medium : IDENT ;
		[GrammarRule("medium")]
		private void medium()
		{
			EnterRule_medium();
			EnterRule("medium", 5);
			TraceIn("medium", 5);
			try { DebugEnterRule(GrammarFileName, "medium");
				DebugLocation(74, 4);
				try
				{
					// CSS3.g3:75:5: ( IDENT )
					DebugEnterAlt(1);
					// CSS3.g3:75:7: IDENT
					{
						DebugLocation(75, 7);
						Match(input,IDENT,Follow._IDENT_in_medium277); if (state.failed) return;

					}

				}
				catch (RecognitionException re)
				{
					ReportError(re);
					Recover(input,re);
				}
				finally
				{
					TraceOut("medium", 5);
					LeaveRule("medium", 5);
					LeaveRule_medium();
				}
				DebugLocation(76, 4);
			} finally { DebugExitRule(GrammarFileName, "medium"); }
			return;

		}
		// $ANTLR end "medium"


		partial void EnterRule_bodylist();
		partial void LeaveRule_bodylist();

		// $ANTLR start "bodylist"
		// CSS3.g3:79:1: bodylist : ( bodyset )* ;
		[GrammarRule("bodylist")]
		private void bodylist()
		{
			EnterRule_bodylist();
			EnterRule("bodylist", 6);
			TraceIn("bodylist", 6);
			try { DebugEnterRule(GrammarFileName, "bodylist");
				DebugLocation(79, 4);
				try
				{
					// CSS3.g3:80:5: ( ( bodyset )* )
					DebugEnterAlt(1);
					// CSS3.g3:80:7: ( bodyset )*
					{
						DebugLocation(80, 7);
						// CSS3.g3:80:7: ( bodyset )*
						try { DebugEnterSubRule(6);
							while (true)
							{
								int alt6=2;
								try { DebugEnterDecision(6, false);
									int LA6_0 = input.LA(1);

									if ((LA6_0==COLON||LA6_0==DOT||LA6_0==HASH||LA6_0==IDENT||LA6_0==LBRACKET||LA6_0==MEDIA_SYM||LA6_0==PAGE_SYM||LA6_0==STAR))
									{
										alt6 = 1;
									}


								} finally { DebugExitDecision(6); }
								switch ( alt6 )
								{
									case 1:
									DebugEnterAlt(1);
									// CSS3.g3:80:7: bodyset
									{
										DebugLocation(80, 7);
										PushFollow(Follow._bodyset_in_bodylist300);
										bodyset();
										PopFollow();
										if (state.failed) return;

									}
									break;

									default:
									goto loop6;
								}
							}

							loop6:
								;

						} finally { DebugExitSubRule(6); }


					}

				}
				catch (RecognitionException re)
				{
					ReportError(re);
					Recover(input,re);
				}
				finally
				{
					TraceOut("bodylist", 6);
					LeaveRule("bodylist", 6);
					LeaveRule_bodylist();
				}
				DebugLocation(81, 4);
			} finally { DebugExitRule(GrammarFileName, "bodylist"); }
			return;

		}
		// $ANTLR end "bodylist"


		partial void EnterRule_bodyset();
		partial void LeaveRule_bodyset();

		// $ANTLR start "bodyset"
		// CSS3.g3:83:1: bodyset : ( ruleSet | media | page );
		[GrammarRule("bodyset")]
		private void bodyset()
		{
			EnterRule_bodyset();
			EnterRule("bodyset", 7);
			TraceIn("bodyset", 7);
			try { DebugEnterRule(GrammarFileName, "bodyset");
				DebugLocation(83, 4);
				try
				{
					// CSS3.g3:84:5: ( ruleSet | media | page )
					int alt7=3;
					try { DebugEnterDecision(7, false);
						switch (input.LA(1))
						{
							case COLON:
							case DOT:
							case HASH:
							case IDENT:
							case LBRACKET:
							case STAR:
						{
							alt7 = 1;
						}
							break;
							case MEDIA_SYM:
						{
							alt7 = 2;
						}
							break;
							case PAGE_SYM:
						{
							alt7 = 3;
						}
							break;
							default:
						{
							if (state.backtracking>0) {state.failed=true; return;}
							NoViableAltException nvae = new NoViableAltException("", 7, 0, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						}

					} finally { DebugExitDecision(7); }
					switch (alt7)
					{
						case 1:
						DebugEnterAlt(1);
						// CSS3.g3:84:7: ruleSet
						{
							DebugLocation(84, 7);
							PushFollow(Follow._ruleSet_in_bodyset322);
							ruleSet();
							PopFollow();
							if (state.failed) return;

						}
						break;
						case 2:
						DebugEnterAlt(2);
						// CSS3.g3:85:7: media
						{
							DebugLocation(85, 7);
							PushFollow(Follow._media_in_bodyset330);
							media();
							PopFollow();
							if (state.failed) return;

						}
						break;
						case 3:
						DebugEnterAlt(3);
						// CSS3.g3:86:7: page
						{
							DebugLocation(86, 7);
							PushFollow(Follow._page_in_bodyset338);
							page();
							PopFollow();
							if (state.failed) return;

						}
						break;

					}
				}
				catch (RecognitionException re)
				{
					ReportError(re);
					Recover(input,re);
				}
				finally
				{
					TraceOut("bodyset", 7);
					LeaveRule("bodyset", 7);
					LeaveRule_bodyset();
				}
				DebugLocation(87, 4);
			} finally { DebugExitRule(GrammarFileName, "bodyset"); }
			return;

		}
		// $ANTLR end "bodyset"


		partial void EnterRule_page();
		partial void LeaveRule_page();

		// $ANTLR start "page"
		// CSS3.g3:89:1: page : PAGE_SYM ( pseudoPage )? LBRACE declaration SEMI ( declaration SEMI )* RBRACE ;
		[GrammarRule("page")]
		private void page()
		{
			EnterRule_page();
			EnterRule("page", 8);
			TraceIn("page", 8);
			try { DebugEnterRule(GrammarFileName, "page");
				DebugLocation(89, 4);
				try
				{
					// CSS3.g3:90:5: ( PAGE_SYM ( pseudoPage )? LBRACE declaration SEMI ( declaration SEMI )* RBRACE )
					DebugEnterAlt(1);
					// CSS3.g3:90:7: PAGE_SYM ( pseudoPage )? LBRACE declaration SEMI ( declaration SEMI )* RBRACE
					{
						DebugLocation(90, 7);
						Match(input,PAGE_SYM,Follow._PAGE_SYM_in_page362); if (state.failed) return;
						DebugLocation(90, 16);
						// CSS3.g3:90:16: ( pseudoPage )?
						int alt8=2;
						try { DebugEnterSubRule(8);
							try { DebugEnterDecision(8, false);
								int LA8_0 = input.LA(1);

								if ((LA8_0==COLON))
								{
									alt8 = 1;
								}
							} finally { DebugExitDecision(8); }
							switch (alt8)
							{
								case 1:
								DebugEnterAlt(1);
								// CSS3.g3:90:16: pseudoPage
								{
									DebugLocation(90, 16);
									PushFollow(Follow._pseudoPage_in_page364);
									pseudoPage();
									PopFollow();
									if (state.failed) return;

								}
								break;

							}
						} finally { DebugExitSubRule(8); }

						DebugLocation(91, 9);
						Match(input,LBRACE,Follow._LBRACE_in_page375); if (state.failed) return;
						DebugLocation(92, 13);
						PushFollow(Follow._declaration_in_page389);
						declaration();
						PopFollow();
						if (state.failed) return;
						DebugLocation(92, 25);
						Match(input,SEMI,Follow._SEMI_in_page391); if (state.failed) return;
						DebugLocation(92, 30);
						// CSS3.g3:92:30: ( declaration SEMI )*
						try { DebugEnterSubRule(9);
							while (true)
							{
								int alt9=2;
								try { DebugEnterDecision(9, false);
									int LA9_0 = input.LA(1);

									if ((LA9_0==IDENT))
									{
										alt9 = 1;
									}


								} finally { DebugExitDecision(9); }
								switch ( alt9 )
								{
									case 1:
									DebugEnterAlt(1);
									// CSS3.g3:92:31: declaration SEMI
									{
										DebugLocation(92, 31);
										PushFollow(Follow._declaration_in_page394);
										declaration();
										PopFollow();
										if (state.failed) return;
										DebugLocation(92, 43);
										Match(input,SEMI,Follow._SEMI_in_page396); if (state.failed) return;

									}
									break;

									default:
									goto loop9;
								}
							}

							loop9:
								;

						} finally { DebugExitSubRule(9); }

						DebugLocation(93, 9);
						Match(input,RBRACE,Follow._RBRACE_in_page408); if (state.failed) return;

					}

				}
				catch (RecognitionException re)
				{
					ReportError(re);
					Recover(input,re);
				}
				finally
				{
					TraceOut("page", 8);
					LeaveRule("page", 8);
					LeaveRule_page();
				}
				DebugLocation(94, 4);
			} finally { DebugExitRule(GrammarFileName, "page"); }
			return;

		}
		// $ANTLR end "page"


		partial void EnterRule_pseudoPage();
		partial void LeaveRule_pseudoPage();

		// $ANTLR start "pseudoPage"
		// CSS3.g3:96:1: pseudoPage : COLON IDENT ;
		[GrammarRule("pseudoPage")]
		private void pseudoPage()
		{
			EnterRule_pseudoPage();
			EnterRule("pseudoPage", 9);
			TraceIn("pseudoPage", 9);
			try { DebugEnterRule(GrammarFileName, "pseudoPage");
				DebugLocation(96, 4);
				try
				{
					// CSS3.g3:97:5: ( COLON IDENT )
					DebugEnterAlt(1);
					// CSS3.g3:97:7: COLON IDENT
					{
						DebugLocation(97, 7);
						Match(input,COLON,Follow._COLON_in_pseudoPage429); if (state.failed) return;
						DebugLocation(97, 13);
						Match(input,IDENT,Follow._IDENT_in_pseudoPage431); if (state.failed) return;

					}

				}
				catch (RecognitionException re)
				{
					ReportError(re);
					Recover(input,re);
				}
				finally
				{
					TraceOut("pseudoPage", 9);
					LeaveRule("pseudoPage", 9);
					LeaveRule_pseudoPage();
				}
				DebugLocation(98, 4);
			} finally { DebugExitRule(GrammarFileName, "pseudoPage"); }
			return;

		}
		// $ANTLR end "pseudoPage"


		partial void EnterRule_operator();
		partial void LeaveRule_operator();

		// $ANTLR start "operator"
		// CSS3.g3:100:1: operator : ( SOLIDUS | COMMA |);
		[GrammarRule("operator")]
		private void @operator()
		{
			EnterRule_operator();
			EnterRule("operator", 10);
			TraceIn("operator", 10);
			try { DebugEnterRule(GrammarFileName, "operator");
				DebugLocation(100, 4);
				try
				{
					// CSS3.g3:101:5: ( SOLIDUS | COMMA |)
					int alt10=3;
					try { DebugEnterDecision(10, false);
						switch (input.LA(1))
						{
							case SOLIDUS:
						{
							alt10 = 1;
						}
							break;
							case COMMA:
						{
							alt10 = 2;
						}
							break;
							case ANGLE:
							case EMS:
							case EXS:
							case FREQ:
							case HASH:
							case IDENT:
							case LENGTH:
							case MINUS:
							case NUMBER:
							case PERCENTAGE:
							case PLUS:
							case STRING:
							case TIME:
							case URI:
						{
							alt10 = 3;
						}
							break;
							default:
						{
							if (state.backtracking>0) {state.failed=true; return;}
							NoViableAltException nvae = new NoViableAltException("", 10, 0, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						}

					} finally { DebugExitDecision(10); }
					switch (alt10)
					{
						case 1:
						DebugEnterAlt(1);
						// CSS3.g3:101:7: SOLIDUS
						{
							DebugLocation(101, 7);
							Match(input,SOLIDUS,Follow._SOLIDUS_in_operator452); if (state.failed) return;

						}
						break;
						case 2:
						DebugEnterAlt(2);
						// CSS3.g3:102:7: COMMA
						{
							DebugLocation(102, 7);
							Match(input,COMMA,Follow._COMMA_in_operator460); if (state.failed) return;

						}
						break;
						case 3:
						DebugEnterAlt(3);
						// CSS3.g3:104:5: 
						{
						}
						break;

					}
				}
				catch (RecognitionException re)
				{
					ReportError(re);
					Recover(input,re);
				}
				finally
				{
					TraceOut("operator", 10);
					LeaveRule("operator", 10);
					LeaveRule_operator();
				}
				DebugLocation(104, 4);
			} finally { DebugExitRule(GrammarFileName, "operator"); }
			return;

		}
		// $ANTLR end "operator"


		partial void EnterRule_combinator();
		partial void LeaveRule_combinator();

		// $ANTLR start "combinator"
		// CSS3.g3:106:1: combinator : ( PLUS | GREATER |);
		[GrammarRule("combinator")]
		private void combinator()
		{
			EnterRule_combinator();
			EnterRule("combinator", 11);
			TraceIn("combinator", 11);
			try { DebugEnterRule(GrammarFileName, "combinator");
				DebugLocation(106, 4);
				try
				{
					// CSS3.g3:107:5: ( PLUS | GREATER |)
					int alt11=3;
					try { DebugEnterDecision(11, false);
						switch (input.LA(1))
						{
							case PLUS:
						{
							alt11 = 1;
						}
							break;
							case GREATER:
						{
							alt11 = 2;
						}
							break;
							case COLON:
							case DOT:
							case HASH:
							case IDENT:
							case LBRACKET:
							case STAR:
						{
							alt11 = 3;
						}
							break;
							default:
						{
							if (state.backtracking>0) {state.failed=true; return;}
							NoViableAltException nvae = new NoViableAltException("", 11, 0, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						}

					} finally { DebugExitDecision(11); }
					switch (alt11)
					{
						case 1:
						DebugEnterAlt(1);
						// CSS3.g3:107:7: PLUS
						{
							DebugLocation(107, 7);
							Match(input,PLUS,Follow._PLUS_in_combinator487); if (state.failed) return;

						}
						break;
						case 2:
						DebugEnterAlt(2);
						// CSS3.g3:108:7: GREATER
						{
							DebugLocation(108, 7);
							Match(input,GREATER,Follow._GREATER_in_combinator495); if (state.failed) return;

						}
						break;
						case 3:
						DebugEnterAlt(3);
						// CSS3.g3:110:5: 
						{
						}
						break;

					}
				}
				catch (RecognitionException re)
				{
					ReportError(re);
					Recover(input,re);
				}
				finally
				{
					TraceOut("combinator", 11);
					LeaveRule("combinator", 11);
					LeaveRule_combinator();
				}
				DebugLocation(110, 4);
			} finally { DebugExitRule(GrammarFileName, "combinator"); }
			return;

		}
		// $ANTLR end "combinator"


		partial void EnterRule_unaryOperator();
		partial void LeaveRule_unaryOperator();

		// $ANTLR start "unaryOperator"
		// CSS3.g3:112:1: unaryOperator : ( MINUS | PLUS );
		[GrammarRule("unaryOperator")]
		private void unaryOperator()
		{
			EnterRule_unaryOperator();
			EnterRule("unaryOperator", 12);
			TraceIn("unaryOperator", 12);
			try { DebugEnterRule(GrammarFileName, "unaryOperator");
				DebugLocation(112, 4);
				try
				{
					// CSS3.g3:113:5: ( MINUS | PLUS )
					DebugEnterAlt(1);
					// CSS3.g3:
					{
						DebugLocation(113, 5);
						if (input.LA(1)==MINUS||input.LA(1)==PLUS)
						{
							input.Consume();
							state.errorRecovery=false;state.failed=false;
						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return;}
							MismatchedSetException mse = new MismatchedSetException(null,input);
							DebugRecognitionException(mse);
							throw mse;
						}


					}

				}
				catch (RecognitionException re)
				{
					ReportError(re);
					Recover(input,re);
				}
				finally
				{
					TraceOut("unaryOperator", 12);
					LeaveRule("unaryOperator", 12);
					LeaveRule_unaryOperator();
				}
				DebugLocation(115, 4);
			} finally { DebugExitRule(GrammarFileName, "unaryOperator"); }
			return;

		}
		// $ANTLR end "unaryOperator"


		partial void EnterRule_property();
		partial void LeaveRule_property();

		// $ANTLR start "property"
		// CSS3.g3:117:1: property : IDENT ;
		[GrammarRule("property")]
		private void property()
		{
			EnterRule_property();
			EnterRule("property", 13);
			TraceIn("property", 13);
			try { DebugEnterRule(GrammarFileName, "property");
				DebugLocation(117, 4);
				try
				{
					// CSS3.g3:118:5: ( IDENT )
					DebugEnterAlt(1);
					// CSS3.g3:118:7: IDENT
					{
						DebugLocation(118, 7);
						Match(input,IDENT,Follow._IDENT_in_property553); if (state.failed) return;

					}

				}
				catch (RecognitionException re)
				{
					ReportError(re);
					Recover(input,re);
				}
				finally
				{
					TraceOut("property", 13);
					LeaveRule("property", 13);
					LeaveRule_property();
				}
				DebugLocation(119, 4);
			} finally { DebugExitRule(GrammarFileName, "property"); }
			return;

		}
		// $ANTLR end "property"


		partial void EnterRule_ruleSet();
		partial void LeaveRule_ruleSet();

		// $ANTLR start "ruleSet"
		// CSS3.g3:121:1: ruleSet : selector ( COMMA selector )* LBRACE declaration SEMI ( declaration SEMI )* RBRACE ;
		[GrammarRule("ruleSet")]
		private void ruleSet()
		{
			EnterRule_ruleSet();
			EnterRule("ruleSet", 14);
			TraceIn("ruleSet", 14);
			try { DebugEnterRule(GrammarFileName, "ruleSet");
				DebugLocation(121, 4);
				try
				{
					// CSS3.g3:122:5: ( selector ( COMMA selector )* LBRACE declaration SEMI ( declaration SEMI )* RBRACE )
					DebugEnterAlt(1);
					// CSS3.g3:122:7: selector ( COMMA selector )* LBRACE declaration SEMI ( declaration SEMI )* RBRACE
					{
						DebugLocation(122, 7);
						PushFollow(Follow._selector_in_ruleSet574);
						selector();
						PopFollow();
						if (state.failed) return;
						DebugLocation(122, 16);
						// CSS3.g3:122:16: ( COMMA selector )*
						try { DebugEnterSubRule(12);
							while (true)
							{
								int alt12=2;
								try { DebugEnterDecision(12, false);
									int LA12_0 = input.LA(1);

									if ((LA12_0==COMMA))
									{
										alt12 = 1;
									}


								} finally { DebugExitDecision(12); }
								switch ( alt12 )
								{
									case 1:
									DebugEnterAlt(1);
									// CSS3.g3:122:17: COMMA selector
									{
										DebugLocation(122, 17);
										Match(input,COMMA,Follow._COMMA_in_ruleSet577); if (state.failed) return;
										DebugLocation(122, 23);
										PushFollow(Follow._selector_in_ruleSet579);
										selector();
										PopFollow();
										if (state.failed) return;

									}
									break;

									default:
									goto loop12;
								}
							}

							loop12:
								;

						} finally { DebugExitSubRule(12); }

						DebugLocation(123, 9);
						Match(input,LBRACE,Follow._LBRACE_in_ruleSet591); if (state.failed) return;
						DebugLocation(124, 13);
						PushFollow(Follow._declaration_in_ruleSet605);
						declaration();
						PopFollow();
						if (state.failed) return;
						DebugLocation(124, 25);
						Match(input,SEMI,Follow._SEMI_in_ruleSet607); if (state.failed) return;
						DebugLocation(124, 30);
						// CSS3.g3:124:30: ( declaration SEMI )*
						try { DebugEnterSubRule(13);
							while (true)
							{
								int alt13=2;
								try { DebugEnterDecision(13, false);
									int LA13_0 = input.LA(1);

									if ((LA13_0==IDENT))
									{
										alt13 = 1;
									}


								} finally { DebugExitDecision(13); }
								switch ( alt13 )
								{
									case 1:
									DebugEnterAlt(1);
									// CSS3.g3:124:31: declaration SEMI
									{
										DebugLocation(124, 31);
										PushFollow(Follow._declaration_in_ruleSet610);
										declaration();
										PopFollow();
										if (state.failed) return;
										DebugLocation(124, 43);
										Match(input,SEMI,Follow._SEMI_in_ruleSet612); if (state.failed) return;

									}
									break;

									default:
									goto loop13;
								}
							}

							loop13:
								;

						} finally { DebugExitSubRule(13); }

						DebugLocation(125, 9);
						Match(input,RBRACE,Follow._RBRACE_in_ruleSet624); if (state.failed) return;

					}

				}
				catch (RecognitionException re)
				{
					ReportError(re);
					Recover(input,re);
				}
				finally
				{
					TraceOut("ruleSet", 14);
					LeaveRule("ruleSet", 14);
					LeaveRule_ruleSet();
				}
				DebugLocation(126, 4);
			} finally { DebugExitRule(GrammarFileName, "ruleSet"); }
			return;

		}
		// $ANTLR end "ruleSet"


		partial void EnterRule_selector();
		partial void LeaveRule_selector();

		// $ANTLR start "selector"
		// CSS3.g3:128:1: selector : simpleSelector ( combinator simpleSelector )* ;
		[GrammarRule("selector")]
		private void selector()
		{
			EnterRule_selector();
			EnterRule("selector", 15);
			TraceIn("selector", 15);
			try { DebugEnterRule(GrammarFileName, "selector");
				DebugLocation(128, 4);
				try
				{
					// CSS3.g3:129:5: ( simpleSelector ( combinator simpleSelector )* )
					DebugEnterAlt(1);
					// CSS3.g3:129:7: simpleSelector ( combinator simpleSelector )*
					{
						DebugLocation(129, 7);
						PushFollow(Follow._simpleSelector_in_selector645);
						simpleSelector();
						PopFollow();
						if (state.failed) return;
						DebugLocation(129, 22);
						// CSS3.g3:129:22: ( combinator simpleSelector )*
						try { DebugEnterSubRule(14);
							while (true)
							{
								int alt14=2;
								try { DebugEnterDecision(14, false);
									int LA14_0 = input.LA(1);

									if ((LA14_0==COLON||LA14_0==DOT||LA14_0==GREATER||LA14_0==HASH||LA14_0==IDENT||LA14_0==LBRACKET||LA14_0==PLUS||LA14_0==STAR))
									{
										alt14 = 1;
									}


								} finally { DebugExitDecision(14); }
								switch ( alt14 )
								{
									case 1:
									DebugEnterAlt(1);
									// CSS3.g3:129:23: combinator simpleSelector
									{
										DebugLocation(129, 23);
										PushFollow(Follow._combinator_in_selector648);
										combinator();
										PopFollow();
										if (state.failed) return;
										DebugLocation(129, 34);
										PushFollow(Follow._simpleSelector_in_selector650);
										simpleSelector();
										PopFollow();
										if (state.failed) return;

									}
									break;

									default:
									goto loop14;
								}
							}

							loop14:
								;

						} finally { DebugExitSubRule(14); }


					}

				}
				catch (RecognitionException re)
				{
					ReportError(re);
					Recover(input,re);
				}
				finally
				{
					TraceOut("selector", 15);
					LeaveRule("selector", 15);
					LeaveRule_selector();
				}
				DebugLocation(130, 4);
			} finally { DebugExitRule(GrammarFileName, "selector"); }
			return;

		}
		// $ANTLR end "selector"


		partial void EnterRule_simpleSelector();
		partial void LeaveRule_simpleSelector();

		// $ANTLR start "simpleSelector"
		// CSS3.g3:132:1: simpleSelector : ( elementName ( ( esPred )=> elementSubsequent )* | ( ( esPred )=> elementSubsequent )+ );
		[GrammarRule("simpleSelector")]
		private void simpleSelector()
		{
			EnterRule_simpleSelector();
			EnterRule("simpleSelector", 16);
			TraceIn("simpleSelector", 16);
			try { DebugEnterRule(GrammarFileName, "simpleSelector");
				DebugLocation(132, 4);
				try
				{
					// CSS3.g3:133:5: ( elementName ( ( esPred )=> elementSubsequent )* | ( ( esPred )=> elementSubsequent )+ )
					int alt17=2;
					try { DebugEnterDecision(17, false);
						int LA17_0 = input.LA(1);

						if ((LA17_0==IDENT||LA17_0==STAR))
						{
							alt17 = 1;
						}
						else if ((LA17_0==COLON||LA17_0==DOT||LA17_0==HASH||LA17_0==LBRACKET))
						{
							alt17 = 2;
						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return;}
							NoViableAltException nvae = new NoViableAltException("", 17, 0, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					} finally { DebugExitDecision(17); }
					switch (alt17)
					{
						case 1:
						DebugEnterAlt(1);
						// CSS3.g3:133:7: elementName ( ( esPred )=> elementSubsequent )*
						{
							DebugLocation(133, 7);
							PushFollow(Follow._elementName_in_simpleSelector669);
							elementName();
							PopFollow();
							if (state.failed) return;
							DebugLocation(134, 9);
							// CSS3.g3:134:9: ( ( esPred )=> elementSubsequent )*
							try { DebugEnterSubRule(15);
								while (true)
								{
									int alt15=2;
									try { DebugEnterDecision(15, false);
										try
										{
											alt15 = dfa15.Predict(input);
										}
										catch (NoViableAltException nvae)
										{
											DebugRecognitionException(nvae);
											throw;
										}
									} finally { DebugExitDecision(15); }
									switch ( alt15 )
									{
										case 1:
										DebugEnterAlt(1);
										// CSS3.g3:134:10: ( esPred )=> elementSubsequent
										{
											DebugLocation(134, 20);
											PushFollow(Follow._elementSubsequent_in_simpleSelector685);
											elementSubsequent();
											PopFollow();
											if (state.failed) return;

										}
										break;

										default:
										goto loop15;
									}
								}

								loop15:
									;

							} finally { DebugExitSubRule(15); }


						}
						break;
						case 2:
						DebugEnterAlt(2);
						// CSS3.g3:136:7: ( ( esPred )=> elementSubsequent )+
						{
							DebugLocation(136, 7);
							// CSS3.g3:136:7: ( ( esPred )=> elementSubsequent )+
							int cnt16=0;
							try { DebugEnterSubRule(16);
								while (true)
								{
									int alt16=2;
									try { DebugEnterDecision(16, false);
										switch (input.LA(1))
										{
											case HASH:
										{
											int LA16_2 = input.LA(2);

											if ((EvaluatePredicate(synpred2_CSS3_fragment)))
											{
												alt16 = 1;
											}


										}
											break;
											case DOT:
										{
											int LA16_3 = input.LA(2);

											if ((EvaluatePredicate(synpred2_CSS3_fragment)))
											{
												alt16 = 1;
											}


										}
											break;
											case LBRACKET:
										{
											int LA16_4 = input.LA(2);

											if ((EvaluatePredicate(synpred2_CSS3_fragment)))
											{
												alt16 = 1;
											}


										}
											break;
											case COLON:
										{
											int LA16_5 = input.LA(2);

											if ((EvaluatePredicate(synpred2_CSS3_fragment)))
											{
												alt16 = 1;
											}


										}
											break;

										}

									} finally { DebugExitDecision(16); }
									switch (alt16)
									{
										case 1:
										DebugEnterAlt(1);
										// CSS3.g3:136:8: ( esPred )=> elementSubsequent
										{
											DebugLocation(136, 18);
											PushFollow(Follow._elementSubsequent_in_simpleSelector709);
											elementSubsequent();
											PopFollow();
											if (state.failed) return;

										}
										break;

										default:
										if (cnt16 >= 1)
											goto loop16;

										if (state.backtracking>0) {state.failed=true; return;}
										EarlyExitException eee16 = new EarlyExitException( 16, input );
										DebugRecognitionException(eee16);
										throw eee16;
									}
									cnt16++;
								}
								loop16:
									;

							} finally { DebugExitSubRule(16); }


						}
						break;

					}
				}
				catch (RecognitionException re)
				{
					ReportError(re);
					Recover(input,re);
				}
				finally
				{
					TraceOut("simpleSelector", 16);
					LeaveRule("simpleSelector", 16);
					LeaveRule_simpleSelector();
				}
				DebugLocation(137, 4);
			} finally { DebugExitRule(GrammarFileName, "simpleSelector"); }
			return;

		}
		// $ANTLR end "simpleSelector"


		partial void EnterRule_esPred();
		partial void LeaveRule_esPred();

		// $ANTLR start "esPred"
		// CSS3.g3:139:1: esPred : ( HASH | DOT | LBRACKET | COLON );
		[GrammarRule("esPred")]
		private void esPred()
		{
			EnterRule_esPred();
			EnterRule("esPred", 17);
			TraceIn("esPred", 17);
			try { DebugEnterRule(GrammarFileName, "esPred");
				DebugLocation(139, 4);
				try
				{
					// CSS3.g3:140:5: ( HASH | DOT | LBRACKET | COLON )
					DebugEnterAlt(1);
					// CSS3.g3:
					{
						DebugLocation(140, 5);
						if (input.LA(1)==COLON||input.LA(1)==DOT||input.LA(1)==HASH||input.LA(1)==LBRACKET)
						{
							input.Consume();
							state.errorRecovery=false;state.failed=false;
						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return;}
							MismatchedSetException mse = new MismatchedSetException(null,input);
							DebugRecognitionException(mse);
							throw mse;
						}


					}

				}
				catch (RecognitionException re)
				{
					ReportError(re);
					Recover(input,re);
				}
				finally
				{
					TraceOut("esPred", 17);
					LeaveRule("esPred", 17);
					LeaveRule_esPred();
				}
				DebugLocation(141, 4);
			} finally { DebugExitRule(GrammarFileName, "esPred"); }
			return;

		}
		// $ANTLR end "esPred"


		partial void EnterRule_elementSubsequent();
		partial void LeaveRule_elementSubsequent();

		// $ANTLR start "elementSubsequent"
		// CSS3.g3:143:1: elementSubsequent : ( HASH | cssClass | attrib | pseudo );
		[GrammarRule("elementSubsequent")]
		private void elementSubsequent()
		{
			EnterRule_elementSubsequent();
			EnterRule("elementSubsequent", 18);
			TraceIn("elementSubsequent", 18);
			try { DebugEnterRule(GrammarFileName, "elementSubsequent");
				DebugLocation(143, 4);
				try
				{
					// CSS3.g3:144:5: ( HASH | cssClass | attrib | pseudo )
					int alt18=4;
					try { DebugEnterDecision(18, false);
						switch (input.LA(1))
						{
							case HASH:
						{
							alt18 = 1;
						}
							break;
							case DOT:
						{
							alt18 = 2;
						}
							break;
							case LBRACKET:
						{
							alt18 = 3;
						}
							break;
							case COLON:
						{
							alt18 = 4;
						}
							break;
							default:
						{
							if (state.backtracking>0) {state.failed=true; return;}
							NoViableAltException nvae = new NoViableAltException("", 18, 0, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						}

					} finally { DebugExitDecision(18); }
					switch (alt18)
					{
						case 1:
						DebugEnterAlt(1);
						// CSS3.g3:144:7: HASH
						{
							DebugLocation(144, 7);
							Match(input,HASH,Follow._HASH_in_elementSubsequent765); if (state.failed) return;

						}
						break;
						case 2:
						DebugEnterAlt(2);
						// CSS3.g3:145:7: cssClass
						{
							DebugLocation(145, 7);
							PushFollow(Follow._cssClass_in_elementSubsequent773);
							cssClass();
							PopFollow();
							if (state.failed) return;

						}
						break;
						case 3:
						DebugEnterAlt(3);
						// CSS3.g3:146:7: attrib
						{
							DebugLocation(146, 7);
							PushFollow(Follow._attrib_in_elementSubsequent781);
							attrib();
							PopFollow();
							if (state.failed) return;

						}
						break;
						case 4:
						DebugEnterAlt(4);
						// CSS3.g3:147:7: pseudo
						{
							DebugLocation(147, 7);
							PushFollow(Follow._pseudo_in_elementSubsequent789);
							pseudo();
							PopFollow();
							if (state.failed) return;

						}
						break;

					}
				}
				catch (RecognitionException re)
				{
					ReportError(re);
					Recover(input,re);
				}
				finally
				{
					TraceOut("elementSubsequent", 18);
					LeaveRule("elementSubsequent", 18);
					LeaveRule_elementSubsequent();
				}
				DebugLocation(148, 4);
			} finally { DebugExitRule(GrammarFileName, "elementSubsequent"); }
			return;

		}
		// $ANTLR end "elementSubsequent"


		partial void EnterRule_cssClass();
		partial void LeaveRule_cssClass();

		// $ANTLR start "cssClass"
		// CSS3.g3:150:1: cssClass : DOT IDENT ;
		[GrammarRule("cssClass")]
		private void cssClass()
		{
			EnterRule_cssClass();
			EnterRule("cssClass", 19);
			TraceIn("cssClass", 19);
			try { DebugEnterRule(GrammarFileName, "cssClass");
				DebugLocation(150, 4);
				try
				{
					// CSS3.g3:151:5: ( DOT IDENT )
					DebugEnterAlt(1);
					// CSS3.g3:151:7: DOT IDENT
					{
						DebugLocation(151, 7);
						Match(input,DOT,Follow._DOT_in_cssClass810); if (state.failed) return;
						DebugLocation(151, 11);
						Match(input,IDENT,Follow._IDENT_in_cssClass812); if (state.failed) return;

					}

				}
				catch (RecognitionException re)
				{
					ReportError(re);
					Recover(input,re);
				}
				finally
				{
					TraceOut("cssClass", 19);
					LeaveRule("cssClass", 19);
					LeaveRule_cssClass();
				}
				DebugLocation(152, 4);
			} finally { DebugExitRule(GrammarFileName, "cssClass"); }
			return;

		}
		// $ANTLR end "cssClass"


		partial void EnterRule_elementName();
		partial void LeaveRule_elementName();

		// $ANTLR start "elementName"
		// CSS3.g3:154:1: elementName : ( IDENT | STAR );
		[GrammarRule("elementName")]
		private void elementName()
		{
			EnterRule_elementName();
			EnterRule("elementName", 20);
			TraceIn("elementName", 20);
			try { DebugEnterRule(GrammarFileName, "elementName");
				DebugLocation(154, 4);
				try
				{
					// CSS3.g3:155:5: ( IDENT | STAR )
					DebugEnterAlt(1);
					// CSS3.g3:
					{
						DebugLocation(155, 5);
						if (input.LA(1)==IDENT||input.LA(1)==STAR)
						{
							input.Consume();
							state.errorRecovery=false;state.failed=false;
						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return;}
							MismatchedSetException mse = new MismatchedSetException(null,input);
							DebugRecognitionException(mse);
							throw mse;
						}


					}

				}
				catch (RecognitionException re)
				{
					ReportError(re);
					Recover(input,re);
				}
				finally
				{
					TraceOut("elementName", 20);
					LeaveRule("elementName", 20);
					LeaveRule_elementName();
				}
				DebugLocation(157, 4);
			} finally { DebugExitRule(GrammarFileName, "elementName"); }
			return;

		}
		// $ANTLR end "elementName"


		partial void EnterRule_attrib();
		partial void LeaveRule_attrib();

		// $ANTLR start "attrib"
		// CSS3.g3:159:1: attrib : LBRACKET IDENT ( ( OPEQ | INCLUDES | DASHMATCH ) ( IDENT | STRING ) )? RBRACKET ;
		[GrammarRule("attrib")]
		private void attrib()
		{
			EnterRule_attrib();
			EnterRule("attrib", 21);
			TraceIn("attrib", 21);
			try { DebugEnterRule(GrammarFileName, "attrib");
				DebugLocation(159, 0);
				try
				{
					// CSS3.g3:160:5: ( LBRACKET IDENT ( ( OPEQ | INCLUDES | DASHMATCH ) ( IDENT | STRING ) )? RBRACKET )
					DebugEnterAlt(1);
					// CSS3.g3:160:7: LBRACKET IDENT ( ( OPEQ | INCLUDES | DASHMATCH ) ( IDENT | STRING ) )? RBRACKET
					{
						DebugLocation(160, 7);
						Match(input,LBRACKET,Follow._LBRACKET_in_attrib862); if (state.failed) return;
						DebugLocation(162, 9);
						Match(input,IDENT,Follow._IDENT_in_attrib877); if (state.failed) return;
						DebugLocation(164, 13);
						// CSS3.g3:164:13: ( ( OPEQ | INCLUDES | DASHMATCH ) ( IDENT | STRING ) )?
						int alt19=2;
						try { DebugEnterSubRule(19);
							try { DebugEnterDecision(19, false);
								int LA19_0 = input.LA(1);

								if ((LA19_0==DASHMATCH||LA19_0==INCLUDES||LA19_0==OPEQ))
								{
									alt19 = 1;
								}
							} finally { DebugExitDecision(19); }
							switch (alt19)
							{
								case 1:
								DebugEnterAlt(1);
								// CSS3.g3:165:17: ( OPEQ | INCLUDES | DASHMATCH ) ( IDENT | STRING )
								{
									DebugLocation(165, 17);
									if (input.LA(1)==DASHMATCH||input.LA(1)==INCLUDES||input.LA(1)==OPEQ)
									{
										input.Consume();
										state.errorRecovery=false;state.failed=false;
									}
									else
									{
										if (state.backtracking>0) {state.failed=true; return;}
										MismatchedSetException mse = new MismatchedSetException(null,input);
										DebugRecognitionException(mse);
										throw mse;
									}

									DebugLocation(170, 17);
									if (input.LA(1)==IDENT||input.LA(1)==STRING)
									{
										input.Consume();
										state.errorRecovery=false;state.failed=false;
									}
									else
									{
										if (state.backtracking>0) {state.failed=true; return;}
										MismatchedSetException mse = new MismatchedSetException(null,input);
										DebugRecognitionException(mse);
										throw mse;
									}


								}
								break;

							}
						} finally { DebugExitSubRule(19); }

						DebugLocation(176, 7);
						Match(input,RBRACKET,Follow._RBRACKET_in_attrib1127); if (state.failed) return;

					}

				}
				catch (RecognitionException re)
				{
					ReportError(re);
					Recover(input,re);
				}
				finally
				{
					TraceOut("attrib", 21);
					LeaveRule("attrib", 21);
					LeaveRule_attrib();
				}
				DebugLocation(177, 0);
			} finally { DebugExitRule(GrammarFileName, "attrib"); }
			return;

		}
		// $ANTLR end "attrib"


		partial void EnterRule_pseudo();
		partial void LeaveRule_pseudo();

		// $ANTLR start "pseudo"
		// CSS3.g3:179:1: pseudo : COLON IDENT ( LPAREN ( IDENT )? RPAREN )? ;
		[GrammarRule("pseudo")]
		private void pseudo()
		{
			EnterRule_pseudo();
			EnterRule("pseudo", 22);
			TraceIn("pseudo", 22);
			try { DebugEnterRule(GrammarFileName, "pseudo");
				DebugLocation(179, 4);
				try
				{
					// CSS3.g3:180:5: ( COLON IDENT ( LPAREN ( IDENT )? RPAREN )? )
					DebugEnterAlt(1);
					// CSS3.g3:180:7: COLON IDENT ( LPAREN ( IDENT )? RPAREN )?
					{
						DebugLocation(180, 7);
						Match(input,COLON,Follow._COLON_in_pseudo1140); if (state.failed) return;
						DebugLocation(181, 13);
						Match(input,IDENT,Follow._IDENT_in_pseudo1155); if (state.failed) return;
						DebugLocation(182, 17);
						// CSS3.g3:182:17: ( LPAREN ( IDENT )? RPAREN )?
						int alt21=2;
						try { DebugEnterSubRule(21);
							try { DebugEnterDecision(21, false);
								int LA21_0 = input.LA(1);

								if ((LA21_0==LPAREN))
								{
									alt21 = 1;
								}
							} finally { DebugExitDecision(21); }
							switch (alt21)
							{
								case 1:
								DebugEnterAlt(1);
								// CSS3.g3:184:21: LPAREN ( IDENT )? RPAREN
								{
									DebugLocation(184, 21);
									Match(input,LPAREN,Follow._LPAREN_in_pseudo1213); if (state.failed) return;
									DebugLocation(184, 28);
									// CSS3.g3:184:28: ( IDENT )?
									int alt20=2;
									try { DebugEnterSubRule(20);
										try { DebugEnterDecision(20, false);
											int LA20_0 = input.LA(1);

											if ((LA20_0==IDENT))
											{
												alt20 = 1;
											}
										} finally { DebugExitDecision(20); }
										switch (alt20)
										{
											case 1:
											DebugEnterAlt(1);
											// CSS3.g3:184:28: IDENT
											{
												DebugLocation(184, 28);
												Match(input,IDENT,Follow._IDENT_in_pseudo1215); if (state.failed) return;

											}
											break;

										}
									} finally { DebugExitSubRule(20); }

									DebugLocation(184, 35);
									Match(input,RPAREN,Follow._RPAREN_in_pseudo1218); if (state.failed) return;

								}
								break;

							}
						} finally { DebugExitSubRule(21); }


					}

				}
				catch (RecognitionException re)
				{
					ReportError(re);
					Recover(input,re);
				}
				finally
				{
					TraceOut("pseudo", 22);
					LeaveRule("pseudo", 22);
					LeaveRule_pseudo();
				}
				DebugLocation(186, 4);
			} finally { DebugExitRule(GrammarFileName, "pseudo"); }
			return;

		}
		// $ANTLR end "pseudo"


		partial void EnterRule_declaration();
		partial void LeaveRule_declaration();

		// $ANTLR start "declaration"
		// CSS3.g3:188:1: declaration : property COLON expr ( prio )? ;
		[GrammarRule("declaration")]
		private void declaration()
		{
			EnterRule_declaration();
			EnterRule("declaration", 23);
			TraceIn("declaration", 23);
			try { DebugEnterRule(GrammarFileName, "declaration");
				DebugLocation(188, 4);
				try
				{
					// CSS3.g3:189:5: ( property COLON expr ( prio )? )
					DebugEnterAlt(1);
					// CSS3.g3:189:7: property COLON expr ( prio )?
					{
						DebugLocation(189, 7);
						PushFollow(Follow._property_in_declaration1254);
						property();
						PopFollow();
						if (state.failed) return;
						DebugLocation(189, 16);
						Match(input,COLON,Follow._COLON_in_declaration1256); if (state.failed) return;
						DebugLocation(189, 22);
						PushFollow(Follow._expr_in_declaration1258);
						expr();
						PopFollow();
						if (state.failed) return;
						DebugLocation(189, 27);
						// CSS3.g3:189:27: ( prio )?
						int alt22=2;
						try { DebugEnterSubRule(22);
							try { DebugEnterDecision(22, false);
								int LA22_0 = input.LA(1);

								if ((LA22_0==IMPORTANT_SYM))
								{
									alt22 = 1;
								}
							} finally { DebugExitDecision(22); }
							switch (alt22)
							{
								case 1:
								DebugEnterAlt(1);
								// CSS3.g3:189:27: prio
								{
									DebugLocation(189, 27);
									PushFollow(Follow._prio_in_declaration1260);
									prio();
									PopFollow();
									if (state.failed) return;

								}
								break;

							}
						} finally { DebugExitSubRule(22); }


					}

				}
				catch (RecognitionException re)
				{
					ReportError(re);
					Recover(input,re);
				}
				finally
				{
					TraceOut("declaration", 23);
					LeaveRule("declaration", 23);
					LeaveRule_declaration();
				}
				DebugLocation(190, 4);
			} finally { DebugExitRule(GrammarFileName, "declaration"); }
			return;

		}
		// $ANTLR end "declaration"


		partial void EnterRule_prio();
		partial void LeaveRule_prio();

		// $ANTLR start "prio"
		// CSS3.g3:192:1: prio : IMPORTANT_SYM ;
		[GrammarRule("prio")]
		private void prio()
		{
			EnterRule_prio();
			EnterRule("prio", 24);
			TraceIn("prio", 24);
			try { DebugEnterRule(GrammarFileName, "prio");
				DebugLocation(192, 4);
				try
				{
					// CSS3.g3:193:5: ( IMPORTANT_SYM )
					DebugEnterAlt(1);
					// CSS3.g3:193:7: IMPORTANT_SYM
					{
						DebugLocation(193, 7);
						Match(input,IMPORTANT_SYM,Follow._IMPORTANT_SYM_in_prio1282); if (state.failed) return;

					}

				}
				catch (RecognitionException re)
				{
					ReportError(re);
					Recover(input,re);
				}
				finally
				{
					TraceOut("prio", 24);
					LeaveRule("prio", 24);
					LeaveRule_prio();
				}
				DebugLocation(194, 4);
			} finally { DebugExitRule(GrammarFileName, "prio"); }
			return;

		}
		// $ANTLR end "prio"


		partial void EnterRule_expr();
		partial void LeaveRule_expr();

		// $ANTLR start "expr"
		// CSS3.g3:196:1: expr : term ( operator term )* ;
		[GrammarRule("expr")]
		private void expr()
		{
			EnterRule_expr();
			EnterRule("expr", 25);
			TraceIn("expr", 25);
			try { DebugEnterRule(GrammarFileName, "expr");
				DebugLocation(196, 4);
				try
				{
					// CSS3.g3:197:5: ( term ( operator term )* )
					DebugEnterAlt(1);
					// CSS3.g3:197:7: term ( operator term )*
					{
						DebugLocation(197, 7);
						PushFollow(Follow._term_in_expr1303);
						term();
						PopFollow();
						if (state.failed) return;
						DebugLocation(197, 12);
						// CSS3.g3:197:12: ( operator term )*
						try { DebugEnterSubRule(23);
							while (true)
							{
								int alt23=2;
								try { DebugEnterDecision(23, false);
									int LA23_0 = input.LA(1);

									if ((LA23_0==ANGLE||LA23_0==COMMA||LA23_0==EMS||LA23_0==EXS||LA23_0==FREQ||LA23_0==HASH||LA23_0==IDENT||LA23_0==LENGTH||LA23_0==MINUS||LA23_0==NUMBER||(LA23_0>=PERCENTAGE && LA23_0<=PLUS)||LA23_0==SOLIDUS||LA23_0==STRING||LA23_0==TIME||LA23_0==URI))
									{
										alt23 = 1;
									}


								} finally { DebugExitDecision(23); }
								switch ( alt23 )
								{
									case 1:
									DebugEnterAlt(1);
									// CSS3.g3:197:13: operator term
									{
										DebugLocation(197, 13);
										PushFollow(Follow._operator_in_expr1306);
										@operator();
										PopFollow();
										if (state.failed) return;
										DebugLocation(197, 22);
										PushFollow(Follow._term_in_expr1308);
										term();
										PopFollow();
										if (state.failed) return;

									}
									break;

									default:
									goto loop23;
								}
							}

							loop23:
								;

						} finally { DebugExitSubRule(23); }


					}

				}
				catch (RecognitionException re)
				{
					ReportError(re);
					Recover(input,re);
				}
				finally
				{
					TraceOut("expr", 25);
					LeaveRule("expr", 25);
					LeaveRule_expr();
				}
				DebugLocation(198, 4);
			} finally { DebugExitRule(GrammarFileName, "expr"); }
			return;

		}
		// $ANTLR end "expr"


		partial void EnterRule_term();
		partial void LeaveRule_term();

		// $ANTLR start "term"
		// CSS3.g3:200:1: term : ( ( unaryOperator )? ( NUMBER | PERCENTAGE | LENGTH | EMS | EXS | ANGLE | TIME | FREQ ) | STRING | IDENT ( LPAREN expr RPAREN )? | URI | hexColor );
		[GrammarRule("term")]
		private void term()
		{
			EnterRule_term();
			EnterRule("term", 26);
			TraceIn("term", 26);
			try { DebugEnterRule(GrammarFileName, "term");
				DebugLocation(200, 4);
				try
				{
					// CSS3.g3:201:5: ( ( unaryOperator )? ( NUMBER | PERCENTAGE | LENGTH | EMS | EXS | ANGLE | TIME | FREQ ) | STRING | IDENT ( LPAREN expr RPAREN )? | URI | hexColor )
					int alt26=5;
					try { DebugEnterDecision(26, false);
						switch (input.LA(1))
						{
							case ANGLE:
							case EMS:
							case EXS:
							case FREQ:
							case LENGTH:
							case MINUS:
							case NUMBER:
							case PERCENTAGE:
							case PLUS:
							case TIME:
						{
							alt26 = 1;
						}
							break;
							case STRING:
						{
							alt26 = 2;
						}
							break;
							case IDENT:
						{
							alt26 = 3;
						}
							break;
							case URI:
						{
							alt26 = 4;
						}
							break;
							case HASH:
						{
							alt26 = 5;
						}
							break;
							default:
						{
							if (state.backtracking>0) {state.failed=true; return;}
							NoViableAltException nvae = new NoViableAltException("", 26, 0, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						}

					} finally { DebugExitDecision(26); }
					switch (alt26)
					{
						case 1:
						DebugEnterAlt(1);
						// CSS3.g3:201:7: ( unaryOperator )? ( NUMBER | PERCENTAGE | LENGTH | EMS | EXS | ANGLE | TIME | FREQ )
						{
							DebugLocation(201, 7);
							// CSS3.g3:201:7: ( unaryOperator )?
							int alt24=2;
							try { DebugEnterSubRule(24);
								try { DebugEnterDecision(24, false);
									int LA24_0 = input.LA(1);

									if ((LA24_0==MINUS||LA24_0==PLUS))
									{
										alt24 = 1;
									}
								} finally { DebugExitDecision(24); }
								switch (alt24)
								{
									case 1:
									DebugEnterAlt(1);
									// CSS3.g3:201:7: unaryOperator
									{
										DebugLocation(201, 7);
										PushFollow(Follow._unaryOperator_in_term1331);
										unaryOperator();
										PopFollow();
										if (state.failed) return;

									}
									break;

								}
							} finally { DebugExitSubRule(24); }

							DebugLocation(202, 9);
							if (input.LA(1)==ANGLE||input.LA(1)==EMS||input.LA(1)==EXS||input.LA(1)==FREQ||input.LA(1)==LENGTH||input.LA(1)==NUMBER||input.LA(1)==PERCENTAGE||input.LA(1)==TIME)
							{
								input.Consume();
								state.errorRecovery=false;state.failed=false;
							}
							else
							{
								if (state.backtracking>0) {state.failed=true; return;}
								MismatchedSetException mse = new MismatchedSetException(null,input);
								DebugRecognitionException(mse);
								throw mse;
							}


						}
						break;
						case 2:
						DebugEnterAlt(2);
						// CSS3.g3:212:7: STRING
						{
							DebugLocation(212, 7);
							Match(input,STRING,Follow._STRING_in_term1488); if (state.failed) return;

						}
						break;
						case 3:
						DebugEnterAlt(3);
						// CSS3.g3:213:7: IDENT ( LPAREN expr RPAREN )?
						{
							DebugLocation(213, 7);
							Match(input,IDENT,Follow._IDENT_in_term1496); if (state.failed) return;
							DebugLocation(213, 13);
							// CSS3.g3:213:13: ( LPAREN expr RPAREN )?
							int alt25=2;
							try { DebugEnterSubRule(25);
								try { DebugEnterDecision(25, false);
									int LA25_0 = input.LA(1);

									if ((LA25_0==LPAREN))
									{
										alt25 = 1;
									}
								} finally { DebugExitDecision(25); }
								switch (alt25)
								{
									case 1:
									DebugEnterAlt(1);
									// CSS3.g3:214:17: LPAREN expr RPAREN
									{
										DebugLocation(214, 17);
										Match(input,LPAREN,Follow._LPAREN_in_term1519); if (state.failed) return;
										DebugLocation(214, 24);
										PushFollow(Follow._expr_in_term1521);
										expr();
										PopFollow();
										if (state.failed) return;
										DebugLocation(214, 29);
										Match(input,RPAREN,Follow._RPAREN_in_term1523); if (state.failed) return;

									}
									break;

								}
							} finally { DebugExitSubRule(25); }


						}
						break;
						case 4:
						DebugEnterAlt(4);
						// CSS3.g3:216:7: URI
						{
							DebugLocation(216, 7);
							Match(input,URI,Follow._URI_in_term1546); if (state.failed) return;

						}
						break;
						case 5:
						DebugEnterAlt(5);
						// CSS3.g3:217:7: hexColor
						{
							DebugLocation(217, 7);
							PushFollow(Follow._hexColor_in_term1554);
							hexColor();
							PopFollow();
							if (state.failed) return;

						}
						break;

					}
				}
				catch (RecognitionException re)
				{
					ReportError(re);
					Recover(input,re);
				}
				finally
				{
					TraceOut("term", 26);
					LeaveRule("term", 26);
					LeaveRule_term();
				}
				DebugLocation(218, 4);
			} finally { DebugExitRule(GrammarFileName, "term"); }
			return;

		}
		// $ANTLR end "term"


		partial void EnterRule_hexColor();
		partial void LeaveRule_hexColor();

		// $ANTLR start "hexColor"
		// CSS3.g3:220:1: hexColor : HASH ;
		[GrammarRule("hexColor")]
		private void hexColor()
		{
			EnterRule_hexColor();
			EnterRule("hexColor", 27);
			TraceIn("hexColor", 27);
			try { DebugEnterRule(GrammarFileName, "hexColor");
				DebugLocation(220, 4);
				try
				{
					// CSS3.g3:221:5: ( HASH )
					DebugEnterAlt(1);
					// CSS3.g3:221:7: HASH
					{
						DebugLocation(221, 7);
						Match(input,HASH,Follow._HASH_in_hexColor1575); if (state.failed) return;

					}

				}
				catch (RecognitionException re)
				{
					ReportError(re);
					Recover(input,re);
				}
				finally
				{
					TraceOut("hexColor", 27);
					LeaveRule("hexColor", 27);
					LeaveRule_hexColor();
				}
				DebugLocation(222, 4);
			} finally { DebugExitRule(GrammarFileName, "hexColor"); }
			return;

		}
		// $ANTLR end "hexColor"

		partial void EnterRule_synpred1_CSS3_fragment();
		partial void LeaveRule_synpred1_CSS3_fragment();

		// $ANTLR start synpred1_CSS3
		public void synpred1_CSS3_fragment()
		{
			EnterRule_synpred1_CSS3_fragment();
			EnterRule("synpred1_CSS3_fragment", 28);
			TraceIn("synpred1_CSS3_fragment", 28);
			try
			{
				// CSS3.g3:134:10: ( esPred )
				DebugEnterAlt(1);
				// CSS3.g3:134:11: esPred
				{
					DebugLocation(134, 11);
					PushFollow(Follow._esPred_in_synpred1_CSS3682);
					esPred();
					PopFollow();
					if (state.failed) return;

				}

			}
			finally
			{
				TraceOut("synpred1_CSS3_fragment", 28);
				LeaveRule("synpred1_CSS3_fragment", 28);
				LeaveRule_synpred1_CSS3_fragment();
			}
		}
		// $ANTLR end synpred1_CSS3

		partial void EnterRule_synpred2_CSS3_fragment();
		partial void LeaveRule_synpred2_CSS3_fragment();

		// $ANTLR start synpred2_CSS3
		public void synpred2_CSS3_fragment()
		{
			EnterRule_synpred2_CSS3_fragment();
			EnterRule("synpred2_CSS3_fragment", 29);
			TraceIn("synpred2_CSS3_fragment", 29);
			try
			{
				// CSS3.g3:136:8: ( esPred )
				DebugEnterAlt(1);
				// CSS3.g3:136:9: esPred
				{
					DebugLocation(136, 9);
					PushFollow(Follow._esPred_in_synpred2_CSS3706);
					esPred();
					PopFollow();
					if (state.failed) return;

				}

			}
			finally
			{
				TraceOut("synpred2_CSS3_fragment", 29);
				LeaveRule("synpred2_CSS3_fragment", 29);
				LeaveRule_synpred2_CSS3_fragment();
			}
		}
		// $ANTLR end synpred2_CSS3
		#endregion Rules

		#region Synpreds
		private bool EvaluatePredicate(System.Action fragment)
		{
			bool success = false;
			state.backtracking++;
			try { DebugBeginBacktrack(state.backtracking);
				int start = input.Mark();
				try
				{
					fragment();
				}
				catch ( RecognitionException re )
				{
					System.Console.Error.WriteLine("impossible: "+re);
				}
				success = !state.failed;
				input.Rewind(start);
			} finally { DebugEndBacktrack(state.backtracking, success); }
			state.backtracking--;
			state.failed=false;
			return success;
		}
		#endregion Synpreds


		#region DFA
		private DFA15 dfa15;

		protected override void InitDFAs()
		{
			base.InitDFAs();
			dfa15 = new DFA15( this, SpecialStateTransition15 );
		}

		private class DFA15 : DFA
		{
			private const string DFA15_eotS =
				"\xD\xFFFF";
			private const string DFA15_eofS =
				"\xD\xFFFF";
			private const string DFA15_minS =
				"\x1\xB\x1\xFFFF\x1\x0\x3\x1E\x1\xFFFF\x1\x0\x1\xF\x1\x0\x1\x1E\x1\x0"+
					"\x1\x3D";
			private const string DFA15_maxS =
				"\x1\x42\x1\xFFFF\x1\x0\x3\x1E\x1\xFFFF\x1\x0\x1\x3D\x1\x0\x1\x43\x1\x0"+
					"\x1\x3D";
			private const string DFA15_acceptS =
				"\x1\xFFFF\x1\x2\x4\xFFFF\x1\x1\x6\xFFFF";
			private const string DFA15_specialS =
				"\x2\xFFFF\x1\x0\x4\xFFFF\x1\x1\x1\xFFFF\x1\x2\x1\xFFFF\x1\x3\x1\xFFFF}>";
			private static readonly string[] DFA15_transitionS =
			{
				"\x1\x5\x1\x1\x4\xFFFF\x1\x3\x7\xFFFF\x1\x1\x1\xFFFF\x1\x2\x2\xFFFF\x1"+
				"\x1\x7\xFFFF\x1\x1\x1\x4\x11\xFFFF\x1\x1\x8\xFFFF\x1\x1",
				"",
				"\x1\xFFFF",
				"\x1\x7",
				"\x1\x8",
				"\x1\x9",
				"",
				"\x1\xFFFF",
				"\x1\xA\x11\xFFFF\x1\xA\x13\xFFFF\x1\xA\x7\xFFFF\x1\xB",
				"\x1\xFFFF",
				"\x1\xC\x24\xFFFF\x1\xC",
				"\x1\xFFFF",
				"\x1\xB"
			};

			private static readonly short[] DFA15_eot = DFA.UnpackEncodedString(DFA15_eotS);
			private static readonly short[] DFA15_eof = DFA.UnpackEncodedString(DFA15_eofS);
			private static readonly char[] DFA15_min = DFA.UnpackEncodedStringToUnsignedChars(DFA15_minS);
			private static readonly char[] DFA15_max = DFA.UnpackEncodedStringToUnsignedChars(DFA15_maxS);
			private static readonly short[] DFA15_accept = DFA.UnpackEncodedString(DFA15_acceptS);
			private static readonly short[] DFA15_special = DFA.UnpackEncodedString(DFA15_specialS);
			private static readonly short[][] DFA15_transition;

			static DFA15()
			{
				int numStates = DFA15_transitionS.Length;
				DFA15_transition = new short[numStates][];
				for ( int i=0; i < numStates; i++ )
				{
					DFA15_transition[i] = DFA.UnpackEncodedString(DFA15_transitionS[i]);
				}
			}

			public DFA15( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
				: base(specialStateTransition)
			{
				this.recognizer = recognizer;
				this.decisionNumber = 15;
				this.eot = DFA15_eot;
				this.eof = DFA15_eof;
				this.min = DFA15_min;
				this.max = DFA15_max;
				this.accept = DFA15_accept;
				this.special = DFA15_special;
				this.transition = DFA15_transition;
			}

			public override string Description { get { return "()* loopback of 134:9: ( ( esPred )=> elementSubsequent )*"; } }

			public override void Error(NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
			}
		}

		private int SpecialStateTransition15(DFA dfa, int s, IIntStream _input)
		{
			ITokenStream input = (ITokenStream)_input;
			int _s = s;
			switch (s)
			{
				case 0:
				int LA15_2 = input.LA(1);


				int index15_2 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred1_CSS3_fragment))) {s = 6;}

				else if ((true)) {s = 1;}


				input.Seek(index15_2);
				if (s >= 0) return s;
				break;
				case 1:
				int LA15_7 = input.LA(1);


				int index15_7 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred1_CSS3_fragment))) {s = 6;}

				else if ((true)) {s = 1;}


				input.Seek(index15_7);
				if (s >= 0) return s;
				break;
				case 2:
				int LA15_9 = input.LA(1);


				int index15_9 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred1_CSS3_fragment))) {s = 6;}

				else if ((true)) {s = 1;}


				input.Seek(index15_9);
				if (s >= 0) return s;
				break;
				case 3:
				int LA15_11 = input.LA(1);


				int index15_11 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred1_CSS3_fragment))) {s = 6;}

				else if ((true)) {s = 1;}


				input.Seek(index15_11);
				if (s >= 0) return s;
				break;
			}
			if (state.backtracking > 0) {state.failed=true; return -1;}
			NoViableAltException nvae = new NoViableAltException(dfa.Description, 15, _s, input);
			dfa.Error(nvae);
			throw nvae;
		}

		#endregion DFA

		#region Follow sets
		private static class Follow
		{
			public static readonly BitSet _charSet_in_styleSheet87 = new BitSet(new ulong[]{0x80088148020800UL,0x4UL});
			public static readonly BitSet _imports_in_styleSheet97 = new BitSet(new ulong[]{0x80088148020800UL,0x4UL});
			public static readonly BitSet _bodylist_in_styleSheet108 = new BitSet(new ulong[]{0x0UL});
			public static readonly BitSet _EOF_in_styleSheet115 = new BitSet(new ulong[]{0x2UL});
			public static readonly BitSet _CHARSET_SYM_in_charSet141 = new BitSet(new ulong[]{0x0UL,0x8UL});
			public static readonly BitSet _STRING_in_charSet143 = new BitSet(new ulong[]{0x0UL,0x1UL});
			public static readonly BitSet _SEMI_in_charSet145 = new BitSet(new ulong[]{0x2UL});
			public static readonly BitSet _IMPORT_SYM_in_imports173 = new BitSet(new ulong[]{0x0UL,0x108UL});
			public static readonly BitSet _set_in_imports175 = new BitSet(new ulong[]{0x40000000UL,0x1UL});
			public static readonly BitSet _medium_in_imports182 = new BitSet(new ulong[]{0x1000UL,0x1UL});
			public static readonly BitSet _COMMA_in_imports185 = new BitSet(new ulong[]{0x40000000UL});
			public static readonly BitSet _medium_in_imports187 = new BitSet(new ulong[]{0x1000UL,0x1UL});
			public static readonly BitSet _SEMI_in_imports193 = new BitSet(new ulong[]{0x2UL});
			public static readonly BitSet _MEDIA_SYM_in_media214 = new BitSet(new ulong[]{0x40000000UL});
			public static readonly BitSet _medium_in_media216 = new BitSet(new ulong[]{0x4000001000UL});
			public static readonly BitSet _COMMA_in_media219 = new BitSet(new ulong[]{0x40000000UL});
			public static readonly BitSet _medium_in_media221 = new BitSet(new ulong[]{0x4000001000UL});
			public static readonly BitSet _LBRACE_in_media233 = new BitSet(new ulong[]{0x8048020800UL,0x4UL});
			public static readonly BitSet _ruleSet_in_media247 = new BitSet(new ulong[]{0x1000000000000000UL});
			public static readonly BitSet _RBRACE_in_media257 = new BitSet(new ulong[]{0x2UL});
			public static readonly BitSet _IDENT_in_medium277 = new BitSet(new ulong[]{0x2UL});
			public static readonly BitSet _bodyset_in_bodylist300 = new BitSet(new ulong[]{0x80088048020802UL,0x4UL});
			public static readonly BitSet _ruleSet_in_bodyset322 = new BitSet(new ulong[]{0x2UL});
			public static readonly BitSet _media_in_bodyset330 = new BitSet(new ulong[]{0x2UL});
			public static readonly BitSet _page_in_bodyset338 = new BitSet(new ulong[]{0x2UL});
			public static readonly BitSet _PAGE_SYM_in_page362 = new BitSet(new ulong[]{0x4000000800UL});
			public static readonly BitSet _pseudoPage_in_page364 = new BitSet(new ulong[]{0x4000000000UL});
			public static readonly BitSet _LBRACE_in_page375 = new BitSet(new ulong[]{0x40000000UL});
			public static readonly BitSet _declaration_in_page389 = new BitSet(new ulong[]{0x0UL,0x1UL});
			public static readonly BitSet _SEMI_in_page391 = new BitSet(new ulong[]{0x1000000040000000UL});
			public static readonly BitSet _declaration_in_page394 = new BitSet(new ulong[]{0x0UL,0x1UL});
			public static readonly BitSet _SEMI_in_page396 = new BitSet(new ulong[]{0x1000000040000000UL});
			public static readonly BitSet _RBRACE_in_page408 = new BitSet(new ulong[]{0x2UL});
			public static readonly BitSet _COLON_in_pseudoPage429 = new BitSet(new ulong[]{0x40000000UL});
			public static readonly BitSet _IDENT_in_pseudoPage431 = new BitSet(new ulong[]{0x2UL});
			public static readonly BitSet _SOLIDUS_in_operator452 = new BitSet(new ulong[]{0x2UL});
			public static readonly BitSet _COMMA_in_operator460 = new BitSet(new ulong[]{0x2UL});
			public static readonly BitSet _PLUS_in_combinator487 = new BitSet(new ulong[]{0x2UL});
			public static readonly BitSet _GREATER_in_combinator495 = new BitSet(new ulong[]{0x2UL});
			public static readonly BitSet _set_in_unaryOperator520 = new BitSet(new ulong[]{0x2UL});
			public static readonly BitSet _IDENT_in_property553 = new BitSet(new ulong[]{0x2UL});
			public static readonly BitSet _selector_in_ruleSet574 = new BitSet(new ulong[]{0x4000001000UL});
			public static readonly BitSet _COMMA_in_ruleSet577 = new BitSet(new ulong[]{0x8048020800UL,0x4UL});
			public static readonly BitSet _selector_in_ruleSet579 = new BitSet(new ulong[]{0x4000001000UL});
			public static readonly BitSet _LBRACE_in_ruleSet591 = new BitSet(new ulong[]{0x40000000UL});
			public static readonly BitSet _declaration_in_ruleSet605 = new BitSet(new ulong[]{0x0UL,0x1UL});
			public static readonly BitSet _SEMI_in_ruleSet607 = new BitSet(new ulong[]{0x1000000040000000UL});
			public static readonly BitSet _declaration_in_ruleSet610 = new BitSet(new ulong[]{0x0UL,0x1UL});
			public static readonly BitSet _SEMI_in_ruleSet612 = new BitSet(new ulong[]{0x1000000040000000UL});
			public static readonly BitSet _RBRACE_in_ruleSet624 = new BitSet(new ulong[]{0x2UL});
			public static readonly BitSet _simpleSelector_in_selector645 = new BitSet(new ulong[]{0x20000804A020802UL,0x4UL});
			public static readonly BitSet _combinator_in_selector648 = new BitSet(new ulong[]{0x8048020800UL,0x4UL});
			public static readonly BitSet _simpleSelector_in_selector650 = new BitSet(new ulong[]{0x20000804A020802UL,0x4UL});
			public static readonly BitSet _elementName_in_simpleSelector669 = new BitSet(new ulong[]{0x8048020802UL,0x4UL});
			public static readonly BitSet _elementSubsequent_in_simpleSelector685 = new BitSet(new ulong[]{0x8048020802UL,0x4UL});
			public static readonly BitSet _elementSubsequent_in_simpleSelector709 = new BitSet(new ulong[]{0x8048020802UL,0x4UL});
			public static readonly BitSet _set_in_esPred730 = new BitSet(new ulong[]{0x2UL});
			public static readonly BitSet _HASH_in_elementSubsequent765 = new BitSet(new ulong[]{0x2UL});
			public static readonly BitSet _cssClass_in_elementSubsequent773 = new BitSet(new ulong[]{0x2UL});
			public static readonly BitSet _attrib_in_elementSubsequent781 = new BitSet(new ulong[]{0x2UL});
			public static readonly BitSet _pseudo_in_elementSubsequent789 = new BitSet(new ulong[]{0x2UL});
			public static readonly BitSet _DOT_in_cssClass810 = new BitSet(new ulong[]{0x40000000UL});
			public static readonly BitSet _IDENT_in_cssClass812 = new BitSet(new ulong[]{0x2UL});
			public static readonly BitSet _set_in_elementName831 = new BitSet(new ulong[]{0x2UL});
			public static readonly BitSet _LBRACKET_in_attrib862 = new BitSet(new ulong[]{0x40000000UL});
			public static readonly BitSet _IDENT_in_attrib877 = new BitSet(new ulong[]{0x2020000200008000UL});
			public static readonly BitSet _set_in_attrib918 = new BitSet(new ulong[]{0x40000000UL,0x8UL});
			public static readonly BitSet _set_in_attrib1026 = new BitSet(new ulong[]{0x2000000000000000UL});
			public static readonly BitSet _RBRACKET_in_attrib1127 = new BitSet(new ulong[]{0x2UL});
			public static readonly BitSet _COLON_in_pseudo1140 = new BitSet(new ulong[]{0x40000000UL});
			public static readonly BitSet _IDENT_in_pseudo1155 = new BitSet(new ulong[]{0x20000000002UL});
			public static readonly BitSet _LPAREN_in_pseudo1213 = new BitSet(new ulong[]{0x4000000040000000UL});
			public static readonly BitSet _IDENT_in_pseudo1215 = new BitSet(new ulong[]{0x4000000000000000UL});
			public static readonly BitSet _RPAREN_in_pseudo1218 = new BitSet(new ulong[]{0x2UL});
			public static readonly BitSet _property_in_declaration1254 = new BitSet(new ulong[]{0x800UL});
			public static readonly BitSet _COLON_in_declaration1256 = new BitSet(new ulong[]{0x308110048A80020UL,0x128UL});
			public static readonly BitSet _expr_in_declaration1258 = new BitSet(new ulong[]{0x80000002UL});
			public static readonly BitSet _prio_in_declaration1260 = new BitSet(new ulong[]{0x2UL});
			public static readonly BitSet _IMPORTANT_SYM_in_prio1282 = new BitSet(new ulong[]{0x2UL});
			public static readonly BitSet _term_in_expr1303 = new BitSet(new ulong[]{0x308110048A81022UL,0x12AUL});
			public static readonly BitSet _operator_in_expr1306 = new BitSet(new ulong[]{0x308110048A80020UL,0x128UL});
			public static readonly BitSet _term_in_expr1308 = new BitSet(new ulong[]{0x308110048A81022UL,0x12AUL});
			public static readonly BitSet _unaryOperator_in_term1331 = new BitSet(new ulong[]{0x108010000A80020UL,0x20UL});
			public static readonly BitSet _set_in_term1342 = new BitSet(new ulong[]{0x2UL});
			public static readonly BitSet _STRING_in_term1488 = new BitSet(new ulong[]{0x2UL});
			public static readonly BitSet _IDENT_in_term1496 = new BitSet(new ulong[]{0x20000000002UL});
			public static readonly BitSet _LPAREN_in_term1519 = new BitSet(new ulong[]{0x308110048A80020UL,0x128UL});
			public static readonly BitSet _expr_in_term1521 = new BitSet(new ulong[]{0x4000000000000000UL});
			public static readonly BitSet _RPAREN_in_term1523 = new BitSet(new ulong[]{0x2UL});
			public static readonly BitSet _URI_in_term1546 = new BitSet(new ulong[]{0x2UL});
			public static readonly BitSet _hexColor_in_term1554 = new BitSet(new ulong[]{0x2UL});
			public static readonly BitSet _HASH_in_hexColor1575 = new BitSet(new ulong[]{0x2UL});
			public static readonly BitSet _esPred_in_synpred1_CSS3682 = new BitSet(new ulong[]{0x2UL});
			public static readonly BitSet _esPred_in_synpred2_CSS3706 = new BitSet(new ulong[]{0x2UL});

		}
		#endregion Follow sets
	}

} // namespace CssParser
(new ulong[]{0x2UL});
		public static readonly BitSet _LBRACKET_in_attrib862 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _IDENT_in_attrib877 = new BitSet(new ulong[]{0x2020000200008000UL});
		public static readonly BitSet _set_in_attrib918 = new BitSet(new ulong[]{0x40000000UL,0x8UL});
		public static readonly BitSet _set_in_attrib1026 = new BitSet(new ulong[]{0x2000000000000000UL});
		public static readonly BitSet _RBRACKET_in_attrib1127 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _COLON_in_pseudo1140 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _IDENT_in_pseudo1155 = new BitSet(new ulong[]{0x20000000002UL});
		public static readonly BitSet _LPAREN_in_pseudo1213 = new BitSet(new ulong[]{0x4000000040000000UL});
		public static readonly BitSet _IDENT_in_pseudo1215 = new BitSet(new ulong[]{0x4000000000000000UL});
		public static readonly BitSet _RPAREN_in_pseudo1218 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _property_in_declaration1254 = new BitSet(new ulong[]{0x800UL});
		public static readonly BitSet _COLON_in_declaration1256 = new BitSet(new ulong[]{0x308110048A80020UL,0x128UL});
		public static readonly BitSet _expr_in_declaration1258 = new BitSet(new ulong[]{0x80000002UL});
		public static readonly BitSet _prio_in_declaration1260 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IMPORTANT_SYM_in_prio1282 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _term_in_expr1303 = new BitSet(new ulong[]{0x308110048A81022UL,0x12AUL});
		public static readonly BitSet _operator_in_expr1306 = new BitSet(new ulong[]{0x308110048A80020UL,0x128UL});
		public static readonly BitSet _term_in_expr1308 = new BitSet(new ulong[]{0x308110048A81022UL,0x12AUL});
		public static readonly BitSet _unaryOperator_in_term1331 = new BitSet(new ulong[]{0x108010000A80020UL,0x20UL});
		public static readonly BitSet _set_in_term1342 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_term1488 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_term1496 = new BitSet(new ulong[]{0x20000000002UL});
		public static readonly BitSet _LPAREN_in_term1519 = new BitSet(new ulong[]{0x308110048A80020UL,0x128UL});
		public static readonly BitSet _expr_in_term1521 = new BitSet(new ulong[]{0x4000000000000000UL});
		public static readonly BitSet _RPAREN_in_term1523 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _URI_in_term1546 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _hexColor_in_term1554 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _HASH_in_hexColor1575 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _esPred_in_synpred1_CSS3682 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _esPred_in_synpred2_CSS3706 = new BitSet(new ulong[]{0x2UL});

	}
	#endregion Follow sets
}

} // namespace CssParser


