//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 ExCSS.g 2013-07-09 23:11:34

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class ExCSSParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "A", "ANGLE", "ATTRIBUTE", "ATTRIBUTEOPERATOR", "B", "C", "CDC", "CDO", "CHARSET", "CHARSET_SYM", "CLASS", "COLON", "COMMA", "COMMENT", "CONTAINSMATCH", "D", "DASHMATCH", "DECLARATION", "DIMENSION", "DOT", "E", "ELEMENTNAME", "EMS", "ENDSWITHMATCH", "ESCAPE", "EXPRESSION", "EXS", "F", "FONT_FACE_SYM", "FREQ", "FUNCTION", "G", "GREATER", "H", "HASH", "HEXCHAR", "I", "IDENT", "IMPORT", "IMPORTANT", "IMPORTANT_SYM", "IMPORT_SYM", "INCLUDES", "INVALID", "J", "K", "L", "LBRACE", "LBRACKET", "LENGTH", "LPAREN", "M", "MEDIA_SYM", "MINUS", "N", "NAME", "NL", "NMCHAR", "NMSTART", "NONASCII", "NUMBER", "O", "OPEQ", "P", "PAGE_SYM", "PERCENTAGE", "PLUS", "PROPERTY", "Q", "R", "RBRACE", "RBRACKET", "RPAREN", "RULESET", "S", "SELECTOR", "SEMI", "SIMPLESELECTOR", "SOLIDUS", "STAR", "STARTSWITHMATCH", "STRING", "STYLESHEET", "T", "TILDE", "TIME", "U", "UNICODE", "URI", "URI_PREFIX", "URL", "URL_ARGUMENTS", "V", "W", "WS", "X", "Y", "Z", "'!'", "'AND'", "'NOT'", "'ONLY'", "'_'", "'and'", "'not'", "'only'"
	};
	public const int EOF=-1;
	public const int T__102=102;
	public const int T__103=103;
	public const int T__104=104;
	public const int T__105=105;
	public const int T__106=106;
	public const int T__107=107;
	public const int T__108=108;
	public const int T__109=109;
	public const int A=4;
	public const int ANGLE=5;
	public const int ATTRIBUTE=6;
	public const int ATTRIBUTEOPERATOR=7;
	public const int B=8;
	public const int C=9;
	public const int CDC=10;
	public const int CDO=11;
	public const int CHARSET=12;
	public const int CHARSET_SYM=13;
	public const int CLASS=14;
	public const int COLON=15;
	public const int COMMA=16;
	public const int COMMENT=17;
	public const int CONTAINSMATCH=18;
	public const int D=19;
	public const int DASHMATCH=20;
	public const int DECLARATION=21;
	public const int DIMENSION=22;
	public const int DOT=23;
	public const int E=24;
	public const int ELEMENTNAME=25;
	public const int EMS=26;
	public const int ENDSWITHMATCH=27;
	public const int ESCAPE=28;
	public const int EXPRESSION=29;
	public const int EXS=30;
	public const int F=31;
	public const int FONT_FACE_SYM=32;
	public const int FREQ=33;
	public const int FUNCTION=34;
	public const int G=35;
	public const int GREATER=36;
	public const int H=37;
	public const int HASH=38;
	public const int HEXCHAR=39;
	public const int I=40;
	public const int IDENT=41;
	public const int IMPORT=42;
	public const int IMPORTANT=43;
	public const int IMPORTANT_SYM=44;
	public const int IMPORT_SYM=45;
	public const int INCLUDES=46;
	public const int INVALID=47;
	public const int J=48;
	public const int K=49;
	public const int L=50;
	public const int LBRACE=51;
	public const int LBRACKET=52;
	public const int LENGTH=53;
	public const int LPAREN=54;
	public const int M=55;
	public const int MEDIA_SYM=56;
	public const int MINUS=57;
	public const int N=58;
	public const int NAME=59;
	public const int NL=60;
	public const int NMCHAR=61;
	public const int NMSTART=62;
	public const int NONASCII=63;
	public const int NUMBER=64;
	public const int O=65;
	public const int OPEQ=66;
	public const int P=67;
	public const int PAGE_SYM=68;
	public const int PERCENTAGE=69;
	public const int PLUS=70;
	public const int PROPERTY=71;
	public const int Q=72;
	public const int R=73;
	public const int RBRACE=74;
	public const int RBRACKET=75;
	public const int RPAREN=76;
	public const int RULESET=77;
	public const int S=78;
	public const int SELECTOR=79;
	public const int SEMI=80;
	public const int SIMPLESELECTOR=81;
	public const int SOLIDUS=82;
	public const int STAR=83;
	public const int STARTSWITHMATCH=84;
	public const int STRING=85;
	public const int STYLESHEET=86;
	public const int T=87;
	public const int TILDE=88;
	public const int TIME=89;
	public const int U=90;
	public const int UNICODE=91;
	public const int URI=92;
	public const int URI_PREFIX=93;
	public const int URL=94;
	public const int URL_ARGUMENTS=95;
	public const int V=96;
	public const int W=97;
	public const int WS=98;
	public const int X=99;
	public const int Y=100;
	public const int Z=101;

	public ExCSSParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public ExCSSParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		ITreeAdaptor treeAdaptor = default(ITreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);
		TreeAdaptor = treeAdaptor ?? new CommonTreeAdaptor();
		OnCreated();
	}
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref ITreeAdaptor adaptor);

	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return ExCSSParser.tokenNames; } }
	public override string GrammarFileName { get { return "ExCSS.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_parse();
	partial void LeaveRule_parse();

	// $ANTLR start "parse"
	// ExCSS.g:28:8: public parse : stylesheet -> ^( STYLESHEET stylesheet ) EOF ;
	[GrammarRule("parse")]
	public AstParserRuleReturnScope<CommonTree, IToken> parse()
	{
		EnterRule_parse();
		EnterRule("parse", 1);
		TraceIn("parse", 1);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stylesheet1 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_stylesheet=new RewriteRuleSubtreeStream(adaptor,"rule stylesheet");
		try { DebugEnterRule(GrammarFileName, "parse");
		DebugLocation(28, 1);
		try
		{
			// ExCSS.g:29:2: ( stylesheet -> ^( STYLESHEET stylesheet ) EOF )
			DebugEnterAlt(1);
			// ExCSS.g:29:6: stylesheet
			{
			DebugLocation(29, 6);
			PushFollow(Follow._stylesheet_in_parse103);
			stylesheet1=stylesheet();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_stylesheet.Add(stylesheet1.Tree);


			{
			// AST REWRITE
			// elements: stylesheet
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 29:17: -> ^( STYLESHEET stylesheet ) EOF
			{
				DebugLocation(29, 20);
				// ExCSS.g:29:20: ^( STYLESHEET stylesheet )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(29, 22);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(STYLESHEET, "STYLESHEET"), root_1);

				DebugLocation(29, 33);
				adaptor.AddChild(root_1, stream_stylesheet.NextTree());

				adaptor.AddChild(root_0, root_1);
				}
				DebugLocation(30, 3);
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(EOF, "EOF"));

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("parse", 1);
			LeaveRule("parse", 1);
			LeaveRule_parse();
		}
		DebugLocation(31, 1);
		} finally { DebugExitRule(GrammarFileName, "parse"); }
		return retval;

	}
	// $ANTLR end "parse"

	partial void EnterRule_stylesheet();
	partial void LeaveRule_stylesheet();

	// $ANTLR start "stylesheet"
	// ExCSS.g:34:1: stylesheet : ( charset )? ( imports )* ( ruleset | media | page | font_face )* -> ^( CHARSET ( charset )? ) ^( IMPORT ( imports )* ) ^( RULESET ( ruleset )* ) ;
	[GrammarRule("stylesheet")]
	private AstParserRuleReturnScope<CommonTree, IToken> stylesheet()
	{
		EnterRule_stylesheet();
		EnterRule("stylesheet", 2);
		TraceIn("stylesheet", 2);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> charset2 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> imports3 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ruleset4 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> media5 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> page6 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> font_face7 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_ruleset=new RewriteRuleSubtreeStream(adaptor,"rule ruleset");
		RewriteRuleSubtreeStream stream_page=new RewriteRuleSubtreeStream(adaptor,"rule page");
		RewriteRuleSubtreeStream stream_charset=new RewriteRuleSubtreeStream(adaptor,"rule charset");
		RewriteRuleSubtreeStream stream_font_face=new RewriteRuleSubtreeStream(adaptor,"rule font_face");
		RewriteRuleSubtreeStream stream_media=new RewriteRuleSubtreeStream(adaptor,"rule media");
		RewriteRuleSubtreeStream stream_imports=new RewriteRuleSubtreeStream(adaptor,"rule imports");
		try { DebugEnterRule(GrammarFileName, "stylesheet");
		DebugLocation(34, 1);
		try
		{
			// ExCSS.g:35:2: ( ( charset )? ( imports )* ( ruleset | media | page | font_face )* -> ^( CHARSET ( charset )? ) ^( IMPORT ( imports )* ) ^( RULESET ( ruleset )* ) )
			DebugEnterAlt(1);
			// ExCSS.g:35:6: ( charset )? ( imports )* ( ruleset | media | page | font_face )*
			{
			DebugLocation(35, 6);
			// ExCSS.g:35:6: ( charset )?
			int alt1=2;
			try { DebugEnterSubRule(1);
			try { DebugEnterDecision(1, false);
			int LA1_0 = input.LA(1);

			if ((LA1_0==CHARSET_SYM))
			{
				alt1 = 1;
			}
			} finally { DebugExitDecision(1); }
			switch (alt1)
			{
			case 1:
				DebugEnterAlt(1);
				// ExCSS.g:35:6: charset
				{
				DebugLocation(35, 6);
				PushFollow(Follow._charset_in_stylesheet130);
				charset2=charset();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_charset.Add(charset2.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(1); }

			DebugLocation(36, 3);
			// ExCSS.g:36:3: ( imports )*
			try { DebugEnterSubRule(2);
			while (true)
			{
				int alt2=2;
				try { DebugEnterDecision(2, false);
				int LA2_0 = input.LA(1);

				if ((LA2_0==IMPORT_SYM))
				{
					alt2 = 1;
				}


				} finally { DebugExitDecision(2); }
				switch ( alt2 )
				{
				case 1:
					DebugEnterAlt(1);
					// ExCSS.g:36:3: imports
					{
					DebugLocation(36, 3);
					PushFollow(Follow._imports_in_stylesheet136);
					imports3=imports();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_imports.Add(imports3.Tree);

					}
					break;

				default:
					goto loop2;
				}
			}

			loop2:
				;

			} finally { DebugExitSubRule(2); }

			DebugLocation(38, 3);
			// ExCSS.g:38:3: ( ruleset | media | page | font_face )*
			try { DebugEnterSubRule(3);
			while (true)
			{
				int alt3=5;
				try { DebugEnterDecision(3, false);
				switch (input.LA(1))
				{
				case COLON:
				case DOT:
				case HASH:
				case IDENT:
				case LBRACKET:
				case STAR:
					{
					alt3 = 1;
					}
					break;
				case MEDIA_SYM:
					{
					alt3 = 2;
					}
					break;
				case PAGE_SYM:
					{
					alt3 = 3;
					}
					break;
				case FONT_FACE_SYM:
					{
					alt3 = 4;
					}
					break;
				}

				} finally { DebugExitDecision(3); }
				switch ( alt3 )
				{
				case 1:
					DebugEnterAlt(1);
					// ExCSS.g:39:6: ruleset
					{
					DebugLocation(39, 6);
					PushFollow(Follow._ruleset_in_stylesheet152);
					ruleset4=ruleset();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ruleset.Add(ruleset4.Tree);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// ExCSS.g:40:6: media
					{
					DebugLocation(40, 6);
					PushFollow(Follow._media_in_stylesheet159);
					media5=media();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_media.Add(media5.Tree);

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// ExCSS.g:41:6: page
					{
					DebugLocation(41, 6);
					PushFollow(Follow._page_in_stylesheet166);
					page6=page();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_page.Add(page6.Tree);

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// ExCSS.g:42:6: font_face
					{
					DebugLocation(42, 6);
					PushFollow(Follow._font_face_in_stylesheet173);
					font_face7=font_face();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_font_face.Add(font_face7.Tree);

					}
					break;

				default:
					goto loop3;
				}
			}

			loop3:
				;

			} finally { DebugExitSubRule(3); }



			{
			// AST REWRITE
			// elements: ruleset, imports, charset
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 45:3: -> ^( CHARSET ( charset )? ) ^( IMPORT ( imports )* ) ^( RULESET ( ruleset )* )
			{
				DebugLocation(45, 7);
				// ExCSS.g:45:7: ^( CHARSET ( charset )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(45, 9);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CHARSET, "CHARSET"), root_1);

				DebugLocation(45, 17);
				// ExCSS.g:45:17: ( charset )?
				if (stream_charset.HasNext)
				{
					DebugLocation(45, 17);
					adaptor.AddChild(root_1, stream_charset.NextTree());

				}
				stream_charset.Reset();

				adaptor.AddChild(root_0, root_1);
				}
				DebugLocation(46, 4);
				// ExCSS.g:46:4: ^( IMPORT ( imports )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(46, 6);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(IMPORT, "IMPORT"), root_1);

				DebugLocation(46, 13);
				// ExCSS.g:46:13: ( imports )*
				while ( stream_imports.HasNext )
				{
					DebugLocation(46, 13);
					adaptor.AddChild(root_1, stream_imports.NextTree());

				}
				stream_imports.Reset();

				adaptor.AddChild(root_0, root_1);
				}
				DebugLocation(47, 4);
				// ExCSS.g:47:4: ^( RULESET ( ruleset )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(47, 6);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(RULESET, "RULESET"), root_1);

				DebugLocation(47, 14);
				// ExCSS.g:47:14: ( ruleset )*
				while ( stream_ruleset.HasNext )
				{
					DebugLocation(47, 14);
					adaptor.AddChild(root_1, stream_ruleset.NextTree());

				}
				stream_ruleset.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stylesheet", 2);
			LeaveRule("stylesheet", 2);
			LeaveRule_stylesheet();
		}
		DebugLocation(48, 1);
		} finally { DebugExitRule(GrammarFileName, "stylesheet"); }
		return retval;

	}
	// $ANTLR end "stylesheet"

	partial void EnterRule_charset();
	partial void LeaveRule_charset();

	// $ANTLR start "charset"
	// ExCSS.g:50:1: charset : CHARSET_SYM STRING SEMI ;
	[GrammarRule("charset")]
	private AstParserRuleReturnScope<CommonTree, IToken> charset()
	{
		EnterRule_charset();
		EnterRule("charset", 3);
		TraceIn("charset", 3);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken CHARSET_SYM8 = default(IToken);
		IToken STRING9 = default(IToken);
		IToken SEMI10 = default(IToken);

		CommonTree CHARSET_SYM8_tree = default(CommonTree);
		CommonTree STRING9_tree = default(CommonTree);
		CommonTree SEMI10_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "charset");
		DebugLocation(50, 1);
		try
		{
			// ExCSS.g:51:2: ( CHARSET_SYM STRING SEMI )
			DebugEnterAlt(1);
			// ExCSS.g:51:5: CHARSET_SYM STRING SEMI
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(51, 5);
			CHARSET_SYM8=(IToken)Match(input,CHARSET_SYM,Follow._CHARSET_SYM_in_charset226); if (state.failed) return retval;
			if (state.backtracking == 0) {
			CHARSET_SYM8_tree = (CommonTree)adaptor.Create(CHARSET_SYM8);
			adaptor.AddChild(root_0, CHARSET_SYM8_tree);
			}
			DebugLocation(51, 17);
			STRING9=(IToken)Match(input,STRING,Follow._STRING_in_charset228); if (state.failed) return retval;
			if (state.backtracking == 0) {
			STRING9_tree = (CommonTree)adaptor.Create(STRING9);
			adaptor.AddChild(root_0, STRING9_tree);
			}
			DebugLocation(51, 24);
			SEMI10=(IToken)Match(input,SEMI,Follow._SEMI_in_charset230); if (state.failed) return retval;
			if (state.backtracking == 0) {
			SEMI10_tree = (CommonTree)adaptor.Create(SEMI10);
			adaptor.AddChild(root_0, SEMI10_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("charset", 3);
			LeaveRule("charset", 3);
			LeaveRule_charset();
		}
		DebugLocation(52, 1);
		} finally { DebugExitRule(GrammarFileName, "charset"); }
		return retval;

	}
	// $ANTLR end "charset"

	partial void EnterRule_imports();
	partial void LeaveRule_imports();

	// $ANTLR start "imports"
	// ExCSS.g:54:1: imports : IMPORT_SYM ( STRING | URI ) ( media_query_list )? SEMI ;
	[GrammarRule("imports")]
	private AstParserRuleReturnScope<CommonTree, IToken> imports()
	{
		EnterRule_imports();
		EnterRule("imports", 4);
		TraceIn("imports", 4);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken IMPORT_SYM11 = default(IToken);
		IToken set12 = default(IToken);
		IToken SEMI14 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> media_query_list13 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree IMPORT_SYM11_tree = default(CommonTree);
		CommonTree set12_tree = default(CommonTree);
		CommonTree SEMI14_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "imports");
		DebugLocation(54, 1);
		try
		{
			// ExCSS.g:55:2: ( IMPORT_SYM ( STRING | URI ) ( media_query_list )? SEMI )
			DebugEnterAlt(1);
			// ExCSS.g:55:5: IMPORT_SYM ( STRING | URI ) ( media_query_list )? SEMI
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(55, 5);
			IMPORT_SYM11=(IToken)Match(input,IMPORT_SYM,Follow._IMPORT_SYM_in_imports244); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IMPORT_SYM11_tree = (CommonTree)adaptor.Create(IMPORT_SYM11);
			adaptor.AddChild(root_0, IMPORT_SYM11_tree);
			}
			DebugLocation(55, 16);

			set12=(IToken)input.LT(1);
			if (input.LA(1)==STRING||input.LA(1)==URI)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set12));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}

			DebugLocation(55, 30);
			// ExCSS.g:55:30: ( media_query_list )?
			int alt4=2;
			try { DebugEnterSubRule(4);
			try { DebugEnterDecision(4, false);
			int LA4_0 = input.LA(1);

			if ((LA4_0==IDENT||LA4_0==LPAREN||(LA4_0>=104 && LA4_0<=105)||(LA4_0>=108 && LA4_0<=109)))
			{
				alt4 = 1;
			}
			} finally { DebugExitDecision(4); }
			switch (alt4)
			{
			case 1:
				DebugEnterAlt(1);
				// ExCSS.g:55:31: media_query_list
				{
				DebugLocation(55, 31);
				PushFollow(Follow._media_query_list_in_imports254);
				media_query_list13=media_query_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, media_query_list13.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(4); }

			DebugLocation(55, 50);
			SEMI14=(IToken)Match(input,SEMI,Follow._SEMI_in_imports258); if (state.failed) return retval;
			if (state.backtracking == 0) {
			SEMI14_tree = (CommonTree)adaptor.Create(SEMI14);
			adaptor.AddChild(root_0, SEMI14_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("imports", 4);
			LeaveRule("imports", 4);
			LeaveRule_imports();
		}
		DebugLocation(56, 1);
		} finally { DebugExitRule(GrammarFileName, "imports"); }
		return retval;

	}
	// $ANTLR end "imports"

	partial void EnterRule_media();
	partial void LeaveRule_media();

	// $ANTLR start "media"
	// ExCSS.g:58:1: media : MEDIA_SYM media_query_list LBRACE ( ruleset )* RBRACE ;
	[GrammarRule("media")]
	private AstParserRuleReturnScope<CommonTree, IToken> media()
	{
		EnterRule_media();
		EnterRule("media", 5);
		TraceIn("media", 5);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken MEDIA_SYM15 = default(IToken);
		IToken LBRACE17 = default(IToken);
		IToken RBRACE19 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> media_query_list16 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ruleset18 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree MEDIA_SYM15_tree = default(CommonTree);
		CommonTree LBRACE17_tree = default(CommonTree);
		CommonTree RBRACE19_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "media");
		DebugLocation(58, 8);
		try
		{
			// ExCSS.g:59:2: ( MEDIA_SYM media_query_list LBRACE ( ruleset )* RBRACE )
			DebugEnterAlt(1);
			// ExCSS.g:59:5: MEDIA_SYM media_query_list LBRACE ( ruleset )* RBRACE
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(59, 5);
			MEDIA_SYM15=(IToken)Match(input,MEDIA_SYM,Follow._MEDIA_SYM_in_media271); if (state.failed) return retval;
			if (state.backtracking == 0) {
			MEDIA_SYM15_tree = (CommonTree)adaptor.Create(MEDIA_SYM15);
			adaptor.AddChild(root_0, MEDIA_SYM15_tree);
			}
			DebugLocation(59, 15);
			PushFollow(Follow._media_query_list_in_media273);
			media_query_list16=media_query_list();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, media_query_list16.Tree);
			DebugLocation(60, 3);
			LBRACE17=(IToken)Match(input,LBRACE,Follow._LBRACE_in_media278); if (state.failed) return retval;
			if (state.backtracking == 0) {
			LBRACE17_tree = (CommonTree)adaptor.Create(LBRACE17);
			adaptor.AddChild(root_0, LBRACE17_tree);
			}
			DebugLocation(61, 4);
			// ExCSS.g:61:4: ( ruleset )*
			try { DebugEnterSubRule(5);
			while (true)
			{
				int alt5=2;
				try { DebugEnterDecision(5, false);
				int LA5_0 = input.LA(1);

				if ((LA5_0==COLON||LA5_0==DOT||LA5_0==HASH||LA5_0==IDENT||LA5_0==LBRACKET||LA5_0==STAR))
				{
					alt5 = 1;
				}


				} finally { DebugExitDecision(5); }
				switch ( alt5 )
				{
				case 1:
					DebugEnterAlt(1);
					// ExCSS.g:61:4: ruleset
					{
					DebugLocation(61, 4);
					PushFollow(Follow._ruleset_in_media284);
					ruleset18=ruleset();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, ruleset18.Tree);

					}
					break;

				default:
					goto loop5;
				}
			}

			loop5:
				;

			} finally { DebugExitSubRule(5); }

			DebugLocation(62, 3);
			RBRACE19=(IToken)Match(input,RBRACE,Follow._RBRACE_in_media290); if (state.failed) return retval;
			if (state.backtracking == 0) {
			RBRACE19_tree = (CommonTree)adaptor.Create(RBRACE19);
			adaptor.AddChild(root_0, RBRACE19_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("media", 5);
			LeaveRule("media", 5);
			LeaveRule_media();
		}
		DebugLocation(62, 8);
		} finally { DebugExitRule(GrammarFileName, "media"); }
		return retval;

	}
	// $ANTLR end "media"

	partial void EnterRule_media_query_list();
	partial void LeaveRule_media_query_list();

	// $ANTLR start "media_query_list"
	// ExCSS.g:64:1: media_query_list : media_query ( COMMA media_query )* ;
	[GrammarRule("media_query_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> media_query_list()
	{
		EnterRule_media_query_list();
		EnterRule("media_query_list", 6);
		TraceIn("media_query_list", 6);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken COMMA21 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> media_query20 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> media_query22 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree COMMA21_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "media_query_list");
		DebugLocation(64, 36);
		try
		{
			// ExCSS.g:65:2: ( media_query ( COMMA media_query )* )
			DebugEnterAlt(1);
			// ExCSS.g:65:5: media_query ( COMMA media_query )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(65, 5);
			PushFollow(Follow._media_query_in_media_query_list301);
			media_query20=media_query();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, media_query20.Tree);
			DebugLocation(65, 17);
			// ExCSS.g:65:17: ( COMMA media_query )*
			try { DebugEnterSubRule(6);
			while (true)
			{
				int alt6=2;
				try { DebugEnterDecision(6, false);
				int LA6_0 = input.LA(1);

				if ((LA6_0==COMMA))
				{
					alt6 = 1;
				}


				} finally { DebugExitDecision(6); }
				switch ( alt6 )
				{
				case 1:
					DebugEnterAlt(1);
					// ExCSS.g:65:18: COMMA media_query
					{
					DebugLocation(65, 18);
					COMMA21=(IToken)Match(input,COMMA,Follow._COMMA_in_media_query_list304); if (state.failed) return retval;
					if (state.backtracking == 0) {
					COMMA21_tree = (CommonTree)adaptor.Create(COMMA21);
					adaptor.AddChild(root_0, COMMA21_tree);
					}
					DebugLocation(65, 24);
					PushFollow(Follow._media_query_in_media_query_list306);
					media_query22=media_query();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, media_query22.Tree);

					}
					break;

				default:
					goto loop6;
				}
			}

			loop6:
				;

			} finally { DebugExitSubRule(6); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("media_query_list", 6);
			LeaveRule("media_query_list", 6);
			LeaveRule_media_query_list();
		}
		DebugLocation(65, 36);
		} finally { DebugExitRule(GrammarFileName, "media_query_list"); }
		return retval;

	}
	// $ANTLR end "media_query_list"

	partial void EnterRule_media_query();
	partial void LeaveRule_media_query();

	// $ANTLR start "media_query"
	// ExCSS.g:67:1: media_query : ( ( 'only' | 'ONLY' | 'not' | 'NOT' )? media_type ( ( 'and' | 'AND' ) expression )* | expression ( ( 'and' | 'AND' ) expression )* );
	[GrammarRule("media_query")]
	private AstParserRuleReturnScope<CommonTree, IToken> media_query()
	{
		EnterRule_media_query();
		EnterRule("media_query", 7);
		TraceIn("media_query", 7);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set23 = default(IToken);
		IToken set25 = default(IToken);
		IToken set28 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> media_type24 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression26 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression27 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression29 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree set23_tree = default(CommonTree);
		CommonTree set25_tree = default(CommonTree);
		CommonTree set28_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "media_query");
		DebugLocation(67, 4);
		try
		{
			// ExCSS.g:68:2: ( ( 'only' | 'ONLY' | 'not' | 'NOT' )? media_type ( ( 'and' | 'AND' ) expression )* | expression ( ( 'and' | 'AND' ) expression )* )
			int alt10=2;
			try { DebugEnterDecision(10, false);
			int LA10_0 = input.LA(1);

			if ((LA10_0==IDENT||(LA10_0>=104 && LA10_0<=105)||(LA10_0>=108 && LA10_0<=109)))
			{
				alt10 = 1;
			}
			else if ((LA10_0==LPAREN))
			{
				alt10 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 10, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(10); }
			switch (alt10)
			{
			case 1:
				DebugEnterAlt(1);
				// ExCSS.g:68:4: ( 'only' | 'ONLY' | 'not' | 'NOT' )? media_type ( ( 'and' | 'AND' ) expression )*
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(68, 4);
				// ExCSS.g:68:4: ( 'only' | 'ONLY' | 'not' | 'NOT' )?
				int alt7=2;
				try { DebugEnterSubRule(7);
				try { DebugEnterDecision(7, false);
				int LA7_0 = input.LA(1);

				if (((LA7_0>=104 && LA7_0<=105)||(LA7_0>=108 && LA7_0<=109)))
				{
					alt7 = 1;
				}
				} finally { DebugExitDecision(7); }
				switch (alt7)
				{
				case 1:
					DebugEnterAlt(1);
					// ExCSS.g:
					{
					DebugLocation(68, 4);

					set23=(IToken)input.LT(1);
					if ((input.LA(1)>=104 && input.LA(1)<=105)||(input.LA(1)>=108 && input.LA(1)<=109))
					{
						input.Consume();
						if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set23));
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}


					}
					break;

				}
				} finally { DebugExitSubRule(7); }

				DebugLocation(73, 5);
				PushFollow(Follow._media_type_in_media_query361);
				media_type24=media_type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, media_type24.Tree);
				DebugLocation(73, 16);
				// ExCSS.g:73:16: ( ( 'and' | 'AND' ) expression )*
				try { DebugEnterSubRule(8);
				while (true)
				{
					int alt8=2;
					try { DebugEnterDecision(8, false);
					int LA8_0 = input.LA(1);

					if ((LA8_0==103||LA8_0==107))
					{
						alt8 = 1;
					}


					} finally { DebugExitDecision(8); }
					switch ( alt8 )
					{
					case 1:
						DebugEnterAlt(1);
						// ExCSS.g:73:17: ( 'and' | 'AND' ) expression
						{
						DebugLocation(73, 17);

						set25=(IToken)input.LT(1);
						if (input.LA(1)==103||input.LA(1)==107)
						{
							input.Consume();
							if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set25));
							state.errorRecovery=false;state.failed=false;
						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							MismatchedSetException mse = new MismatchedSetException(null,input);
							DebugRecognitionException(mse);
							throw mse;
						}

						DebugLocation(73, 33);
						PushFollow(Follow._expression_in_media_query372);
						expression26=expression();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, expression26.Tree);

						}
						break;

					default:
						goto loop8;
					}
				}

				loop8:
					;

				} finally { DebugExitSubRule(8); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ExCSS.g:74:5: expression ( ( 'and' | 'AND' ) expression )*
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(74, 5);
				PushFollow(Follow._expression_in_media_query380);
				expression27=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression27.Tree);
				DebugLocation(74, 16);
				// ExCSS.g:74:16: ( ( 'and' | 'AND' ) expression )*
				try { DebugEnterSubRule(9);
				while (true)
				{
					int alt9=2;
					try { DebugEnterDecision(9, false);
					int LA9_0 = input.LA(1);

					if ((LA9_0==103||LA9_0==107))
					{
						alt9 = 1;
					}


					} finally { DebugExitDecision(9); }
					switch ( alt9 )
					{
					case 1:
						DebugEnterAlt(1);
						// ExCSS.g:74:17: ( 'and' | 'AND' ) expression
						{
						DebugLocation(74, 17);

						set28=(IToken)input.LT(1);
						if (input.LA(1)==103||input.LA(1)==107)
						{
							input.Consume();
							if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set28));
							state.errorRecovery=false;state.failed=false;
						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							MismatchedSetException mse = new MismatchedSetException(null,input);
							DebugRecognitionException(mse);
							throw mse;
						}

						DebugLocation(74, 33);
						PushFollow(Follow._expression_in_media_query391);
						expression29=expression();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, expression29.Tree);

						}
						break;

					default:
						goto loop9;
					}
				}

				loop9:
					;

				} finally { DebugExitSubRule(9); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("media_query", 7);
			LeaveRule("media_query", 7);
			LeaveRule_media_query();
		}
		DebugLocation(75, 4);
		} finally { DebugExitRule(GrammarFileName, "media_query"); }
		return retval;

	}
	// $ANTLR end "media_query"

	partial void EnterRule_media_type();
	partial void LeaveRule_media_type();

	// $ANTLR start "media_type"
	// ExCSS.g:77:1: media_type : IDENT ;
	[GrammarRule("media_type")]
	private AstParserRuleReturnScope<CommonTree, IToken> media_type()
	{
		EnterRule_media_type();
		EnterRule("media_type", 8);
		TraceIn("media_type", 8);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken IDENT30 = default(IToken);

		CommonTree IDENT30_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "media_type");
		DebugLocation(77, 1);
		try
		{
			// ExCSS.g:78:2: ( IDENT )
			DebugEnterAlt(1);
			// ExCSS.g:78:5: IDENT
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(78, 5);
			IDENT30=(IToken)Match(input,IDENT,Follow._IDENT_in_media_type408); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENT30_tree = (CommonTree)adaptor.Create(IDENT30);
			adaptor.AddChild(root_0, IDENT30_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("media_type", 8);
			LeaveRule("media_type", 8);
			LeaveRule_media_type();
		}
		DebugLocation(79, 1);
		} finally { DebugExitRule(GrammarFileName, "media_type"); }
		return retval;

	}
	// $ANTLR end "media_type"

	partial void EnterRule_expression();
	partial void LeaveRule_expression();

	// $ANTLR start "expression"
	// ExCSS.g:81:1: expression : LPAREN media_feature ( COLON expr )? RPAREN ;
	[GrammarRule("expression")]
	private AstParserRuleReturnScope<CommonTree, IToken> expression()
	{
		EnterRule_expression();
		EnterRule("expression", 9);
		TraceIn("expression", 9);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken LPAREN31 = default(IToken);
		IToken COLON33 = default(IToken);
		IToken RPAREN35 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> media_feature32 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr34 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree LPAREN31_tree = default(CommonTree);
		CommonTree COLON33_tree = default(CommonTree);
		CommonTree RPAREN35_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "expression");
		DebugLocation(81, 1);
		try
		{
			// ExCSS.g:82:2: ( LPAREN media_feature ( COLON expr )? RPAREN )
			DebugEnterAlt(1);
			// ExCSS.g:82:5: LPAREN media_feature ( COLON expr )? RPAREN
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(82, 5);
			LPAREN31=(IToken)Match(input,LPAREN,Follow._LPAREN_in_expression420); if (state.failed) return retval;
			if (state.backtracking == 0) {
			LPAREN31_tree = (CommonTree)adaptor.Create(LPAREN31);
			adaptor.AddChild(root_0, LPAREN31_tree);
			}
			DebugLocation(83, 4);
			PushFollow(Follow._media_feature_in_expression426);
			media_feature32=media_feature();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, media_feature32.Tree);
			DebugLocation(83, 18);
			// ExCSS.g:83:18: ( COLON expr )?
			int alt11=2;
			try { DebugEnterSubRule(11);
			try { DebugEnterDecision(11, false);
			int LA11_0 = input.LA(1);

			if ((LA11_0==COLON))
			{
				alt11 = 1;
			}
			} finally { DebugExitDecision(11); }
			switch (alt11)
			{
			case 1:
				DebugEnterAlt(1);
				// ExCSS.g:83:19: COLON expr
				{
				DebugLocation(83, 19);
				COLON33=(IToken)Match(input,COLON,Follow._COLON_in_expression429); if (state.failed) return retval;
				if (state.backtracking == 0) {
				COLON33_tree = (CommonTree)adaptor.Create(COLON33);
				adaptor.AddChild(root_0, COLON33_tree);
				}
				DebugLocation(83, 25);
				PushFollow(Follow._expr_in_expression431);
				expr34=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expr34.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(11); }

			DebugLocation(84, 3);
			RPAREN35=(IToken)Match(input,RPAREN,Follow._RPAREN_in_expression438); if (state.failed) return retval;
			if (state.backtracking == 0) {
			RPAREN35_tree = (CommonTree)adaptor.Create(RPAREN35);
			adaptor.AddChild(root_0, RPAREN35_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression", 9);
			LeaveRule("expression", 9);
			LeaveRule_expression();
		}
		DebugLocation(85, 1);
		} finally { DebugExitRule(GrammarFileName, "expression"); }
		return retval;

	}
	// $ANTLR end "expression"

	partial void EnterRule_media_feature();
	partial void LeaveRule_media_feature();

	// $ANTLR start "media_feature"
	// ExCSS.g:87:1: media_feature : IDENT ;
	[GrammarRule("media_feature")]
	private AstParserRuleReturnScope<CommonTree, IToken> media_feature()
	{
		EnterRule_media_feature();
		EnterRule("media_feature", 10);
		TraceIn("media_feature", 10);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken IDENT36 = default(IToken);

		CommonTree IDENT36_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "media_feature");
		DebugLocation(87, 1);
		try
		{
			// ExCSS.g:88:2: ( IDENT )
			DebugEnterAlt(1);
			// ExCSS.g:88:5: IDENT
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(88, 5);
			IDENT36=(IToken)Match(input,IDENT,Follow._IDENT_in_media_feature450); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENT36_tree = (CommonTree)adaptor.Create(IDENT36);
			adaptor.AddChild(root_0, IDENT36_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("media_feature", 10);
			LeaveRule("media_feature", 10);
			LeaveRule_media_feature();
		}
		DebugLocation(89, 1);
		} finally { DebugExitRule(GrammarFileName, "media_feature"); }
		return retval;

	}
	// $ANTLR end "media_feature"

	partial void EnterRule_page();
	partial void LeaveRule_page();

	// $ANTLR start "page"
	// ExCSS.g:91:1: page : PAGE_SYM ( pseudoPage )? LBRACE declaration SEMI ( declaration SEMI )* RBRACE ;
	[GrammarRule("page")]
	private AstParserRuleReturnScope<CommonTree, IToken> page()
	{
		EnterRule_page();
		EnterRule("page", 11);
		TraceIn("page", 11);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken PAGE_SYM37 = default(IToken);
		IToken LBRACE39 = default(IToken);
		IToken SEMI41 = default(IToken);
		IToken SEMI43 = default(IToken);
		IToken RBRACE44 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> pseudoPage38 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> declaration40 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> declaration42 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree PAGE_SYM37_tree = default(CommonTree);
		CommonTree LBRACE39_tree = default(CommonTree);
		CommonTree SEMI41_tree = default(CommonTree);
		CommonTree SEMI43_tree = default(CommonTree);
		CommonTree RBRACE44_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "page");
		DebugLocation(91, 4);
		try
		{
			// ExCSS.g:92:5: ( PAGE_SYM ( pseudoPage )? LBRACE declaration SEMI ( declaration SEMI )* RBRACE )
			DebugEnterAlt(1);
			// ExCSS.g:92:8: PAGE_SYM ( pseudoPage )? LBRACE declaration SEMI ( declaration SEMI )* RBRACE
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(92, 8);
			PAGE_SYM37=(IToken)Match(input,PAGE_SYM,Follow._PAGE_SYM_in_page465); if (state.failed) return retval;
			if (state.backtracking == 0) {
			PAGE_SYM37_tree = (CommonTree)adaptor.Create(PAGE_SYM37);
			adaptor.AddChild(root_0, PAGE_SYM37_tree);
			}
			DebugLocation(92, 17);
			// ExCSS.g:92:17: ( pseudoPage )?
			int alt12=2;
			try { DebugEnterSubRule(12);
			try { DebugEnterDecision(12, false);
			int LA12_0 = input.LA(1);

			if ((LA12_0==COLON))
			{
				alt12 = 1;
			}
			} finally { DebugExitDecision(12); }
			switch (alt12)
			{
			case 1:
				DebugEnterAlt(1);
				// ExCSS.g:92:18: pseudoPage
				{
				DebugLocation(92, 18);
				PushFollow(Follow._pseudoPage_in_page468);
				pseudoPage38=pseudoPage();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, pseudoPage38.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(12); }

			DebugLocation(93, 9);
			LBRACE39=(IToken)Match(input,LBRACE,Follow._LBRACE_in_page480); if (state.failed) return retval;
			if (state.backtracking == 0) {
			LBRACE39_tree = (CommonTree)adaptor.Create(LBRACE39);
			adaptor.AddChild(root_0, LBRACE39_tree);
			}
			DebugLocation(94, 13);
			PushFollow(Follow._declaration_in_page494);
			declaration40=declaration();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, declaration40.Tree);
			DebugLocation(95, 13);
			SEMI41=(IToken)Match(input,SEMI,Follow._SEMI_in_page508); if (state.failed) return retval;
			if (state.backtracking == 0) {
			SEMI41_tree = (CommonTree)adaptor.Create(SEMI41);
			adaptor.AddChild(root_0, SEMI41_tree);
			}
			DebugLocation(95, 18);
			// ExCSS.g:95:18: ( declaration SEMI )*
			try { DebugEnterSubRule(13);
			while (true)
			{
				int alt13=2;
				try { DebugEnterDecision(13, false);
				int LA13_0 = input.LA(1);

				if ((LA13_0==IDENT||LA13_0==STAR||LA13_0==102||LA13_0==106))
				{
					alt13 = 1;
				}


				} finally { DebugExitDecision(13); }
				switch ( alt13 )
				{
				case 1:
					DebugEnterAlt(1);
					// ExCSS.g:95:19: declaration SEMI
					{
					DebugLocation(95, 19);
					PushFollow(Follow._declaration_in_page511);
					declaration42=declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, declaration42.Tree);
					DebugLocation(95, 31);
					SEMI43=(IToken)Match(input,SEMI,Follow._SEMI_in_page513); if (state.failed) return retval;
					if (state.backtracking == 0) {
					SEMI43_tree = (CommonTree)adaptor.Create(SEMI43);
					adaptor.AddChild(root_0, SEMI43_tree);
					}

					}
					break;

				default:
					goto loop13;
				}
			}

			loop13:
				;

			} finally { DebugExitSubRule(13); }

			DebugLocation(96, 9);
			RBRACE44=(IToken)Match(input,RBRACE,Follow._RBRACE_in_page525); if (state.failed) return retval;
			if (state.backtracking == 0) {
			RBRACE44_tree = (CommonTree)adaptor.Create(RBRACE44);
			adaptor.AddChild(root_0, RBRACE44_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("page", 11);
			LeaveRule("page", 11);
			LeaveRule_page();
		}
		DebugLocation(97, 4);
		} finally { DebugExitRule(GrammarFileName, "page"); }
		return retval;

	}
	// $ANTLR end "page"

	partial void EnterRule_pseudoPage();
	partial void LeaveRule_pseudoPage();

	// $ANTLR start "pseudoPage"
	// ExCSS.g:99:1: pseudoPage : COLON IDENT ;
	[GrammarRule("pseudoPage")]
	private AstParserRuleReturnScope<CommonTree, IToken> pseudoPage()
	{
		EnterRule_pseudoPage();
		EnterRule("pseudoPage", 12);
		TraceIn("pseudoPage", 12);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken COLON45 = default(IToken);
		IToken IDENT46 = default(IToken);

		CommonTree COLON45_tree = default(CommonTree);
		CommonTree IDENT46_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "pseudoPage");
		DebugLocation(99, 4);
		try
		{
			// ExCSS.g:100:5: ( COLON IDENT )
			DebugEnterAlt(1);
			// ExCSS.g:100:7: COLON IDENT
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(100, 7);
			COLON45=(IToken)Match(input,COLON,Follow._COLON_in_pseudoPage542); if (state.failed) return retval;
			if (state.backtracking == 0) {
			COLON45_tree = (CommonTree)adaptor.Create(COLON45);
			adaptor.AddChild(root_0, COLON45_tree);
			}
			DebugLocation(100, 13);
			IDENT46=(IToken)Match(input,IDENT,Follow._IDENT_in_pseudoPage544); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENT46_tree = (CommonTree)adaptor.Create(IDENT46);
			adaptor.AddChild(root_0, IDENT46_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("pseudoPage", 12);
			LeaveRule("pseudoPage", 12);
			LeaveRule_pseudoPage();
		}
		DebugLocation(101, 4);
		} finally { DebugExitRule(GrammarFileName, "pseudoPage"); }
		return retval;

	}
	// $ANTLR end "pseudoPage"

	partial void EnterRule_font_face();
	partial void LeaveRule_font_face();

	// $ANTLR start "font_face"
	// ExCSS.g:103:1: font_face : FONT_FACE_SYM LBRACE ( declaration ( SEMI ( declaration )? )* )? RBRACE ;
	[GrammarRule("font_face")]
	private AstParserRuleReturnScope<CommonTree, IToken> font_face()
	{
		EnterRule_font_face();
		EnterRule("font_face", 13);
		TraceIn("font_face", 13);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken FONT_FACE_SYM47 = default(IToken);
		IToken LBRACE48 = default(IToken);
		IToken SEMI50 = default(IToken);
		IToken RBRACE52 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> declaration49 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> declaration51 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree FONT_FACE_SYM47_tree = default(CommonTree);
		CommonTree LBRACE48_tree = default(CommonTree);
		CommonTree SEMI50_tree = default(CommonTree);
		CommonTree RBRACE52_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "font_face");
		DebugLocation(103, 1);
		try
		{
			// ExCSS.g:104:2: ( FONT_FACE_SYM LBRACE ( declaration ( SEMI ( declaration )? )* )? RBRACE )
			DebugEnterAlt(1);
			// ExCSS.g:104:4: FONT_FACE_SYM LBRACE ( declaration ( SEMI ( declaration )? )* )? RBRACE
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(104, 4);
			FONT_FACE_SYM47=(IToken)Match(input,FONT_FACE_SYM,Follow._FONT_FACE_SYM_in_font_face559); if (state.failed) return retval;
			if (state.backtracking == 0) {
			FONT_FACE_SYM47_tree = (CommonTree)adaptor.Create(FONT_FACE_SYM47);
			adaptor.AddChild(root_0, FONT_FACE_SYM47_tree);
			}
			DebugLocation(105, 3);
			LBRACE48=(IToken)Match(input,LBRACE,Follow._LBRACE_in_font_face563); if (state.failed) return retval;
			if (state.backtracking == 0) {
			LBRACE48_tree = (CommonTree)adaptor.Create(LBRACE48);
			adaptor.AddChild(root_0, LBRACE48_tree);
			}
			DebugLocation(106, 4);
			// ExCSS.g:106:4: ( declaration ( SEMI ( declaration )? )* )?
			int alt16=2;
			try { DebugEnterSubRule(16);
			try { DebugEnterDecision(16, false);
			int LA16_0 = input.LA(1);

			if ((LA16_0==IDENT||LA16_0==STAR||LA16_0==102||LA16_0==106))
			{
				alt16 = 1;
			}
			} finally { DebugExitDecision(16); }
			switch (alt16)
			{
			case 1:
				DebugEnterAlt(1);
				// ExCSS.g:106:5: declaration ( SEMI ( declaration )? )*
				{
				DebugLocation(106, 5);
				PushFollow(Follow._declaration_in_font_face569);
				declaration49=declaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, declaration49.Tree);
				DebugLocation(106, 16);
				// ExCSS.g:106:16: ( SEMI ( declaration )? )*
				try { DebugEnterSubRule(15);
				while (true)
				{
					int alt15=2;
					try { DebugEnterDecision(15, false);
					int LA15_0 = input.LA(1);

					if ((LA15_0==SEMI))
					{
						alt15 = 1;
					}


					} finally { DebugExitDecision(15); }
					switch ( alt15 )
					{
					case 1:
						DebugEnterAlt(1);
						// ExCSS.g:106:17: SEMI ( declaration )?
						{
						DebugLocation(106, 17);
						SEMI50=(IToken)Match(input,SEMI,Follow._SEMI_in_font_face571); if (state.failed) return retval;
						if (state.backtracking == 0) {
						SEMI50_tree = (CommonTree)adaptor.Create(SEMI50);
						adaptor.AddChild(root_0, SEMI50_tree);
						}
						DebugLocation(106, 22);
						// ExCSS.g:106:22: ( declaration )?
						int alt14=2;
						try { DebugEnterSubRule(14);
						try { DebugEnterDecision(14, false);
						int LA14_0 = input.LA(1);

						if ((LA14_0==IDENT||LA14_0==STAR||LA14_0==102||LA14_0==106))
						{
							alt14 = 1;
						}
						} finally { DebugExitDecision(14); }
						switch (alt14)
						{
						case 1:
							DebugEnterAlt(1);
							// ExCSS.g:106:22: declaration
							{
							DebugLocation(106, 22);
							PushFollow(Follow._declaration_in_font_face573);
							declaration51=declaration();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) adaptor.AddChild(root_0, declaration51.Tree);

							}
							break;

						}
						} finally { DebugExitSubRule(14); }


						}
						break;

					default:
						goto loop15;
					}
				}

				loop15:
					;

				} finally { DebugExitSubRule(15); }


				}
				break;

			}
			} finally { DebugExitSubRule(16); }

			DebugLocation(107, 3);
			RBRACE52=(IToken)Match(input,RBRACE,Follow._RBRACE_in_font_face582); if (state.failed) return retval;
			if (state.backtracking == 0) {
			RBRACE52_tree = (CommonTree)adaptor.Create(RBRACE52);
			adaptor.AddChild(root_0, RBRACE52_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("font_face", 13);
			LeaveRule("font_face", 13);
			LeaveRule_font_face();
		}
		DebugLocation(108, 1);
		} finally { DebugExitRule(GrammarFileName, "font_face"); }
		return retval;

	}
	// $ANTLR end "font_face"

	partial void EnterRule_operator();
	partial void LeaveRule_operator();

	// $ANTLR start "operator"
	// ExCSS.g:110:1: operator : ( SOLIDUS | COMMA | OPEQ | DOT | COLON |);
	[GrammarRule("operator")]
	private AstParserRuleReturnScope<CommonTree, IToken> @operator()
	{
		EnterRule_operator();
		EnterRule("operator", 14);
		TraceIn("operator", 14);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken SOLIDUS53 = default(IToken);
		IToken COMMA54 = default(IToken);
		IToken OPEQ55 = default(IToken);
		IToken DOT56 = default(IToken);
		IToken COLON57 = default(IToken);

		CommonTree SOLIDUS53_tree = default(CommonTree);
		CommonTree COMMA54_tree = default(CommonTree);
		CommonTree OPEQ55_tree = default(CommonTree);
		CommonTree DOT56_tree = default(CommonTree);
		CommonTree COLON57_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "operator");
		DebugLocation(110, 4);
		try
		{
			// ExCSS.g:111:5: ( SOLIDUS | COMMA | OPEQ | DOT | COLON |)
			int alt17=6;
			try { DebugEnterDecision(17, false);
			switch (input.LA(1))
			{
			case SOLIDUS:
				{
				alt17 = 1;
				}
				break;
			case COMMA:
				{
				alt17 = 2;
				}
				break;
			case OPEQ:
				{
				alt17 = 3;
				}
				break;
			case DOT:
				{
				alt17 = 4;
				}
				break;
			case COLON:
				{
				alt17 = 5;
				}
				break;
			case ANGLE:
			case EMS:
			case EXS:
			case FREQ:
			case FUNCTION:
			case HASH:
			case IDENT:
			case LENGTH:
			case MINUS:
			case NUMBER:
			case PERCENTAGE:
			case PLUS:
			case STRING:
			case TIME:
			case URI:
				{
				alt17 = 6;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 17, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(17); }
			switch (alt17)
			{
			case 1:
				DebugEnterAlt(1);
				// ExCSS.g:111:10: SOLIDUS
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(111, 10);
				SOLIDUS53=(IToken)Match(input,SOLIDUS,Follow._SOLIDUS_in_operator599); if (state.failed) return retval;
				if (state.backtracking == 0) {
				SOLIDUS53_tree = (CommonTree)adaptor.Create(SOLIDUS53);
				adaptor.AddChild(root_0, SOLIDUS53_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ExCSS.g:112:5: COMMA
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(112, 5);
				COMMA54=(IToken)Match(input,COMMA,Follow._COMMA_in_operator605); if (state.failed) return retval;
				if (state.backtracking == 0) {
				COMMA54_tree = (CommonTree)adaptor.Create(COMMA54);
				adaptor.AddChild(root_0, COMMA54_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// ExCSS.g:113:5: OPEQ
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(113, 5);
				OPEQ55=(IToken)Match(input,OPEQ,Follow._OPEQ_in_operator611); if (state.failed) return retval;
				if (state.backtracking == 0) {
				OPEQ55_tree = (CommonTree)adaptor.Create(OPEQ55);
				adaptor.AddChild(root_0, OPEQ55_tree);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// ExCSS.g:114:5: DOT
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(114, 5);
				DOT56=(IToken)Match(input,DOT,Follow._DOT_in_operator617); if (state.failed) return retval;
				if (state.backtracking == 0) {
				DOT56_tree = (CommonTree)adaptor.Create(DOT56);
				adaptor.AddChild(root_0, DOT56_tree);
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// ExCSS.g:115:5: COLON
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(115, 5);
				COLON57=(IToken)Match(input,COLON,Follow._COLON_in_operator623); if (state.failed) return retval;
				if (state.backtracking == 0) {
				COLON57_tree = (CommonTree)adaptor.Create(COLON57);
				adaptor.AddChild(root_0, COLON57_tree);
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// ExCSS.g:117:5: 
				{
				root_0 = (CommonTree)adaptor.Nil();

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("operator", 14);
			LeaveRule("operator", 14);
			LeaveRule_operator();
		}
		DebugLocation(117, 4);
		} finally { DebugExitRule(GrammarFileName, "operator"); }
		return retval;

	}
	// $ANTLR end "operator"

	partial void EnterRule_combinator();
	partial void LeaveRule_combinator();

	// $ANTLR start "combinator"
	// ExCSS.g:119:1: combinator : ( PLUS | GREATER | TILDE |);
	[GrammarRule("combinator")]
	private AstParserRuleReturnScope<CommonTree, IToken> combinator()
	{
		EnterRule_combinator();
		EnterRule("combinator", 15);
		TraceIn("combinator", 15);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken PLUS58 = default(IToken);
		IToken GREATER59 = default(IToken);
		IToken TILDE60 = default(IToken);

		CommonTree PLUS58_tree = default(CommonTree);
		CommonTree GREATER59_tree = default(CommonTree);
		CommonTree TILDE60_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "combinator");
		DebugLocation(119, 15);
		try
		{
			// ExCSS.g:120:2: ( PLUS | GREATER | TILDE |)
			int alt18=4;
			try { DebugEnterDecision(18, false);
			switch (input.LA(1))
			{
			case PLUS:
				{
				alt18 = 1;
				}
				break;
			case GREATER:
				{
				alt18 = 2;
				}
				break;
			case TILDE:
				{
				alt18 = 3;
				}
				break;
			case COLON:
			case DOT:
			case HASH:
			case IDENT:
			case LBRACKET:
			case STAR:
				{
				alt18 = 4;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 18, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(18); }
			switch (alt18)
			{
			case 1:
				DebugEnterAlt(1);
				// ExCSS.g:121:5: PLUS
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(121, 5);
				PLUS58=(IToken)Match(input,PLUS,Follow._PLUS_in_combinator647); if (state.failed) return retval;
				if (state.backtracking == 0) {
				PLUS58_tree = (CommonTree)adaptor.Create(PLUS58);
				adaptor.AddChild(root_0, PLUS58_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ExCSS.g:122:5: GREATER
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(122, 5);
				GREATER59=(IToken)Match(input,GREATER,Follow._GREATER_in_combinator654); if (state.failed) return retval;
				if (state.backtracking == 0) {
				GREATER59_tree = (CommonTree)adaptor.Create(GREATER59);
				adaptor.AddChild(root_0, GREATER59_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// ExCSS.g:123:5: TILDE
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(123, 5);
				TILDE60=(IToken)Match(input,TILDE,Follow._TILDE_in_combinator661); if (state.failed) return retval;
				if (state.backtracking == 0) {
				TILDE60_tree = (CommonTree)adaptor.Create(TILDE60);
				adaptor.AddChild(root_0, TILDE60_tree);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// ExCSS.g:124:16: 
				{
				root_0 = (CommonTree)adaptor.Nil();

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("combinator", 15);
			LeaveRule("combinator", 15);
			LeaveRule_combinator();
		}
		DebugLocation(124, 15);
		} finally { DebugExitRule(GrammarFileName, "combinator"); }
		return retval;

	}
	// $ANTLR end "combinator"

	partial void EnterRule_unaryOperator();
	partial void LeaveRule_unaryOperator();

	// $ANTLR start "unaryOperator"
	// ExCSS.g:126:1: unaryOperator : ( MINUS | PLUS );
	[GrammarRule("unaryOperator")]
	private AstParserRuleReturnScope<CommonTree, IToken> unaryOperator()
	{
		EnterRule_unaryOperator();
		EnterRule("unaryOperator", 16);
		TraceIn("unaryOperator", 16);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set61 = default(IToken);

		CommonTree set61_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "unaryOperator");
		DebugLocation(126, 8);
		try
		{
			// ExCSS.g:127:2: ( MINUS | PLUS )
			DebugEnterAlt(1);
			// ExCSS.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(127, 2);

			set61=(IToken)input.LT(1);
			if (input.LA(1)==MINUS||input.LA(1)==PLUS)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set61));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("unaryOperator", 16);
			LeaveRule("unaryOperator", 16);
			LeaveRule_unaryOperator();
		}
		DebugLocation(128, 8);
		} finally { DebugExitRule(GrammarFileName, "unaryOperator"); }
		return retval;

	}
	// $ANTLR end "unaryOperator"

	partial void EnterRule_property();
	partial void LeaveRule_property();

	// $ANTLR start "property"
	// ExCSS.g:130:1: property : property_prefix IDENT ;
	[GrammarRule("property")]
	private AstParserRuleReturnScope<CommonTree, IToken> property()
	{
		EnterRule_property();
		EnterRule("property", 17);
		TraceIn("property", 17);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken IDENT63 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> property_prefix62 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree IDENT63_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "property");
		DebugLocation(130, 1);
		try
		{
			// ExCSS.g:131:2: ( property_prefix IDENT )
			DebugEnterAlt(1);
			// ExCSS.g:131:4: property_prefix IDENT
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(131, 4);
			PushFollow(Follow._property_prefix_in_property696);
			property_prefix62=property_prefix();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, property_prefix62.Tree);
			DebugLocation(131, 20);
			IDENT63=(IToken)Match(input,IDENT,Follow._IDENT_in_property698); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENT63_tree = (CommonTree)adaptor.Create(IDENT63);
			adaptor.AddChild(root_0, IDENT63_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("property", 17);
			LeaveRule("property", 17);
			LeaveRule_property();
		}
		DebugLocation(133, 1);
		} finally { DebugExitRule(GrammarFileName, "property"); }
		return retval;

	}
	// $ANTLR end "property"

	partial void EnterRule_property_prefix();
	partial void LeaveRule_property_prefix();

	// $ANTLR start "property_prefix"
	// ExCSS.g:135:1: property_prefix : ( '*' | '_' | '!' )? ;
	[GrammarRule("property_prefix")]
	private AstParserRuleReturnScope<CommonTree, IToken> property_prefix()
	{
		EnterRule_property_prefix();
		EnterRule("property_prefix", 18);
		TraceIn("property_prefix", 18);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set64 = default(IToken);

		CommonTree set64_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "property_prefix");
		DebugLocation(135, 1);
		try
		{
			// ExCSS.g:136:2: ( ( '*' | '_' | '!' )? )
			DebugEnterAlt(1);
			// ExCSS.g:136:5: ( '*' | '_' | '!' )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(136, 5);
			// ExCSS.g:136:5: ( '*' | '_' | '!' )?
			int alt19=2;
			try { DebugEnterSubRule(19);
			try { DebugEnterDecision(19, false);
			int LA19_0 = input.LA(1);

			if ((LA19_0==STAR||LA19_0==102||LA19_0==106))
			{
				alt19 = 1;
			}
			} finally { DebugExitDecision(19); }
			switch (alt19)
			{
			case 1:
				DebugEnterAlt(1);
				// ExCSS.g:
				{
				DebugLocation(136, 5);

				set64=(IToken)input.LT(1);
				if (input.LA(1)==STAR||input.LA(1)==102||input.LA(1)==106)
				{
					input.Consume();
					if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set64));
					state.errorRecovery=false;state.failed=false;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}


				}
				break;

			}
			} finally { DebugExitSubRule(19); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("property_prefix", 18);
			LeaveRule("property_prefix", 18);
			LeaveRule_property_prefix();
		}
		DebugLocation(137, 1);
		} finally { DebugExitRule(GrammarFileName, "property_prefix"); }
		return retval;

	}
	// $ANTLR end "property_prefix"

	partial void EnterRule_ruleset();
	partial void LeaveRule_ruleset();

	// $ANTLR start "ruleset"
	// ExCSS.g:139:1: ruleset : selector ( COMMA selector )* LBRACE ( declaration )? ( SEMI ( declaration )? )* RBRACE -> ^( SELECTOR ( selector )* ^( DECLARATION ( declaration )* ) ) ;
	[GrammarRule("ruleset")]
	private AstParserRuleReturnScope<CommonTree, IToken> ruleset()
	{
		EnterRule_ruleset();
		EnterRule("ruleset", 19);
		TraceIn("ruleset", 19);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken COMMA66 = default(IToken);
		IToken LBRACE68 = default(IToken);
		IToken SEMI70 = default(IToken);
		IToken RBRACE72 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> selector65 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> selector67 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> declaration69 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> declaration71 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree COMMA66_tree = default(CommonTree);
		CommonTree LBRACE68_tree = default(CommonTree);
		CommonTree SEMI70_tree = default(CommonTree);
		CommonTree RBRACE72_tree = default(CommonTree);
		RewriteRuleITokenStream stream_RBRACE=new RewriteRuleITokenStream(adaptor,"token RBRACE");
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleITokenStream stream_SEMI=new RewriteRuleITokenStream(adaptor,"token SEMI");
		RewriteRuleITokenStream stream_LBRACE=new RewriteRuleITokenStream(adaptor,"token LBRACE");
		RewriteRuleSubtreeStream stream_selector=new RewriteRuleSubtreeStream(adaptor,"rule selector");
		RewriteRuleSubtreeStream stream_declaration=new RewriteRuleSubtreeStream(adaptor,"rule declaration");
		try { DebugEnterRule(GrammarFileName, "ruleset");
		DebugLocation(139, 0);
		try
		{
			// ExCSS.g:140:2: ( selector ( COMMA selector )* LBRACE ( declaration )? ( SEMI ( declaration )? )* RBRACE -> ^( SELECTOR ( selector )* ^( DECLARATION ( declaration )* ) ) )
			DebugEnterAlt(1);
			// ExCSS.g:140:4: selector ( COMMA selector )* LBRACE ( declaration )? ( SEMI ( declaration )? )* RBRACE
			{
			DebugLocation(140, 4);
			PushFollow(Follow._selector_in_ruleset738);
			selector65=selector();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_selector.Add(selector65.Tree);
			DebugLocation(140, 13);
			// ExCSS.g:140:13: ( COMMA selector )*
			try { DebugEnterSubRule(20);
			while (true)
			{
				int alt20=2;
				try { DebugEnterDecision(20, false);
				int LA20_0 = input.LA(1);

				if ((LA20_0==COMMA))
				{
					alt20 = 1;
				}


				} finally { DebugExitDecision(20); }
				switch ( alt20 )
				{
				case 1:
					DebugEnterAlt(1);
					// ExCSS.g:140:14: COMMA selector
					{
					DebugLocation(140, 14);
					COMMA66=(IToken)Match(input,COMMA,Follow._COMMA_in_ruleset741); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_COMMA.Add(COMMA66);

					DebugLocation(140, 20);
					PushFollow(Follow._selector_in_ruleset743);
					selector67=selector();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_selector.Add(selector67.Tree);

					}
					break;

				default:
					goto loop20;
				}
			}

			loop20:
				;

			} finally { DebugExitSubRule(20); }

			DebugLocation(141, 3);
			LBRACE68=(IToken)Match(input,LBRACE,Follow._LBRACE_in_ruleset749); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_LBRACE.Add(LBRACE68);

			DebugLocation(142, 4);
			// ExCSS.g:142:4: ( declaration )?
			int alt21=2;
			try { DebugEnterSubRule(21);
			try { DebugEnterDecision(21, false);
			int LA21_0 = input.LA(1);

			if ((LA21_0==IDENT||LA21_0==STAR||LA21_0==102||LA21_0==106))
			{
				alt21 = 1;
			}
			} finally { DebugExitDecision(21); }
			switch (alt21)
			{
			case 1:
				DebugEnterAlt(1);
				// ExCSS.g:142:4: declaration
				{
				DebugLocation(142, 4);
				PushFollow(Follow._declaration_in_ruleset754);
				declaration69=declaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_declaration.Add(declaration69.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(21); }

			DebugLocation(142, 17);
			// ExCSS.g:142:17: ( SEMI ( declaration )? )*
			try { DebugEnterSubRule(23);
			while (true)
			{
				int alt23=2;
				try { DebugEnterDecision(23, false);
				int LA23_0 = input.LA(1);

				if ((LA23_0==SEMI))
				{
					alt23 = 1;
				}


				} finally { DebugExitDecision(23); }
				switch ( alt23 )
				{
				case 1:
					DebugEnterAlt(1);
					// ExCSS.g:142:18: SEMI ( declaration )?
					{
					DebugLocation(142, 18);
					SEMI70=(IToken)Match(input,SEMI,Follow._SEMI_in_ruleset758); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_SEMI.Add(SEMI70);

					DebugLocation(142, 23);
					// ExCSS.g:142:23: ( declaration )?
					int alt22=2;
					try { DebugEnterSubRule(22);
					try { DebugEnterDecision(22, false);
					int LA22_0 = input.LA(1);

					if ((LA22_0==IDENT||LA22_0==STAR||LA22_0==102||LA22_0==106))
					{
						alt22 = 1;
					}
					} finally { DebugExitDecision(22); }
					switch (alt22)
					{
					case 1:
						DebugEnterAlt(1);
						// ExCSS.g:142:23: declaration
						{
						DebugLocation(142, 23);
						PushFollow(Follow._declaration_in_ruleset760);
						declaration71=declaration();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_declaration.Add(declaration71.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(22); }


					}
					break;

				default:
					goto loop23;
				}
			}

			loop23:
				;

			} finally { DebugExitSubRule(23); }

			DebugLocation(143, 3);
			RBRACE72=(IToken)Match(input,RBRACE,Follow._RBRACE_in_ruleset767); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_RBRACE.Add(RBRACE72);



			{
			// AST REWRITE
			// elements: selector, declaration
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 144:4: -> ^( SELECTOR ( selector )* ^( DECLARATION ( declaration )* ) )
			{
				DebugLocation(144, 7);
				// ExCSS.g:144:7: ^( SELECTOR ( selector )* ^( DECLARATION ( declaration )* ) )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(144, 9);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(SELECTOR, "SELECTOR"), root_1);

				DebugLocation(144, 18);
				// ExCSS.g:144:18: ( selector )*
				while ( stream_selector.HasNext )
				{
					DebugLocation(144, 18);
					adaptor.AddChild(root_1, stream_selector.NextTree());

				}
				stream_selector.Reset();
				DebugLocation(144, 28);
				// ExCSS.g:144:28: ^( DECLARATION ( declaration )* )
				{
				CommonTree root_2 = (CommonTree)adaptor.Nil();
				DebugLocation(144, 30);
				root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(DECLARATION, "DECLARATION"), root_2);

				DebugLocation(144, 42);
				// ExCSS.g:144:42: ( declaration )*
				while ( stream_declaration.HasNext )
				{
					DebugLocation(144, 42);
					adaptor.AddChild(root_2, stream_declaration.NextTree());

				}
				stream_declaration.Reset();

				adaptor.AddChild(root_1, root_2);
				}

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("ruleset", 19);
			LeaveRule("ruleset", 19);
			LeaveRule_ruleset();
		}
		DebugLocation(145, 0);
		} finally { DebugExitRule(GrammarFileName, "ruleset"); }
		return retval;

	}
	// $ANTLR end "ruleset"

	partial void EnterRule_selector();
	partial void LeaveRule_selector();

	// $ANTLR start "selector"
	// ExCSS.g:147:1: selector : simple_selector ( combinator simple_selector )* -> ^( SIMPLESELECTOR ( simple_selector )* ) ;
	[GrammarRule("selector")]
	private AstParserRuleReturnScope<CommonTree, IToken> selector()
	{
		EnterRule_selector();
		EnterRule("selector", 20);
		TraceIn("selector", 20);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> simple_selector73 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> combinator74 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> simple_selector75 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_simple_selector=new RewriteRuleSubtreeStream(adaptor,"rule simple_selector");
		RewriteRuleSubtreeStream stream_combinator=new RewriteRuleSubtreeStream(adaptor,"rule combinator");
		try { DebugEnterRule(GrammarFileName, "selector");
		DebugLocation(147, 4);
		try
		{
			// ExCSS.g:148:5: ( simple_selector ( combinator simple_selector )* -> ^( SIMPLESELECTOR ( simple_selector )* ) )
			DebugEnterAlt(1);
			// ExCSS.g:148:8: simple_selector ( combinator simple_selector )*
			{
			DebugLocation(148, 8);
			PushFollow(Follow._simple_selector_in_selector800);
			simple_selector73=simple_selector();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_simple_selector.Add(simple_selector73.Tree);
			DebugLocation(148, 24);
			// ExCSS.g:148:24: ( combinator simple_selector )*
			try { DebugEnterSubRule(24);
			while (true)
			{
				int alt24=2;
				try { DebugEnterDecision(24, false);
				int LA24_0 = input.LA(1);

				if ((LA24_0==COLON||LA24_0==DOT||LA24_0==GREATER||LA24_0==HASH||LA24_0==IDENT||LA24_0==LBRACKET||LA24_0==PLUS||LA24_0==STAR||LA24_0==TILDE))
				{
					alt24 = 1;
				}


				} finally { DebugExitDecision(24); }
				switch ( alt24 )
				{
				case 1:
					DebugEnterAlt(1);
					// ExCSS.g:148:25: combinator simple_selector
					{
					DebugLocation(148, 25);
					PushFollow(Follow._combinator_in_selector803);
					combinator74=combinator();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_combinator.Add(combinator74.Tree);
					DebugLocation(148, 36);
					PushFollow(Follow._simple_selector_in_selector805);
					simple_selector75=simple_selector();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_simple_selector.Add(simple_selector75.Tree);

					}
					break;

				default:
					goto loop24;
				}
			}

			loop24:
				;

			} finally { DebugExitSubRule(24); }



			{
			// AST REWRITE
			// elements: simple_selector
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 149:4: -> ^( SIMPLESELECTOR ( simple_selector )* )
			{
				DebugLocation(149, 7);
				// ExCSS.g:149:7: ^( SIMPLESELECTOR ( simple_selector )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(149, 9);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(SIMPLESELECTOR, "SIMPLESELECTOR"), root_1);

				DebugLocation(149, 24);
				// ExCSS.g:149:24: ( simple_selector )*
				while ( stream_simple_selector.HasNext )
				{
					DebugLocation(149, 24);
					adaptor.AddChild(root_1, stream_simple_selector.NextTree());

				}
				stream_simple_selector.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("selector", 20);
			LeaveRule("selector", 20);
			LeaveRule_selector();
		}
		DebugLocation(150, 4);
		} finally { DebugExitRule(GrammarFileName, "selector"); }
		return retval;

	}
	// $ANTLR end "selector"

	partial void EnterRule_simple_selector();
	partial void LeaveRule_simple_selector();

	// $ANTLR start "simple_selector"
	// ExCSS.g:152:1: simple_selector : ( element_name ( ( element_predicate )=> subsequent_element )* | ( ( element_predicate )=> subsequent_element )+ );
	[GrammarRule("simple_selector")]
	private AstParserRuleReturnScope<CommonTree, IToken> simple_selector()
	{
		EnterRule_simple_selector();
		EnterRule("simple_selector", 21);
		TraceIn("simple_selector", 21);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> element_name76 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> subsequent_element77 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> subsequent_element78 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "simple_selector");
		DebugLocation(152, 4);
		try
		{
			// ExCSS.g:153:5: ( element_name ( ( element_predicate )=> subsequent_element )* | ( ( element_predicate )=> subsequent_element )+ )
			int alt27=2;
			try { DebugEnterDecision(27, false);
			int LA27_0 = input.LA(1);

			if ((LA27_0==IDENT||LA27_0==STAR))
			{
				alt27 = 1;
			}
			else if ((LA27_0==COLON||LA27_0==DOT||LA27_0==HASH||LA27_0==LBRACKET))
			{
				alt27 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 27, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(27); }
			switch (alt27)
			{
			case 1:
				DebugEnterAlt(1);
				// ExCSS.g:153:8: element_name ( ( element_predicate )=> subsequent_element )*
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(153, 8);
				PushFollow(Follow._element_name_in_simple_selector838);
				element_name76=element_name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, element_name76.Tree);
				DebugLocation(153, 21);
				// ExCSS.g:153:21: ( ( element_predicate )=> subsequent_element )*
				try { DebugEnterSubRule(25);
				while (true)
				{
					int alt25=2;
					try { DebugEnterDecision(25, false);
					switch (input.LA(1))
					{
					case HASH:
						{
						int LA25_6 = input.LA(2);

						if ((EvaluatePredicate(synpred1_ExCSS_fragment)))
						{
							alt25 = 1;
						}


						}
						break;
					case DOT:
						{
						int LA25_7 = input.LA(2);

						if ((EvaluatePredicate(synpred1_ExCSS_fragment)))
						{
							alt25 = 1;
						}


						}
						break;
					case LBRACKET:
						{
						int LA25_8 = input.LA(2);

						if ((EvaluatePredicate(synpred1_ExCSS_fragment)))
						{
							alt25 = 1;
						}


						}
						break;
					case COLON:
						{
						int LA25_9 = input.LA(2);

						if ((EvaluatePredicate(synpred1_ExCSS_fragment)))
						{
							alt25 = 1;
						}


						}
						break;
					}

					} finally { DebugExitDecision(25); }
					switch ( alt25 )
					{
					case 1:
						DebugEnterAlt(1);
						// ExCSS.g:153:22: ( element_predicate )=> subsequent_element
						{
						DebugLocation(153, 43);
						PushFollow(Follow._subsequent_element_in_simple_selector845);
						subsequent_element77=subsequent_element();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, subsequent_element77.Tree);

						}
						break;

					default:
						goto loop25;
					}
				}

				loop25:
					;

				} finally { DebugExitSubRule(25); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ExCSS.g:154:11: ( ( element_predicate )=> subsequent_element )+
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(154, 11);
				// ExCSS.g:154:11: ( ( element_predicate )=> subsequent_element )+
				int cnt26=0;
				try { DebugEnterSubRule(26);
				while (true)
				{
					int alt26=2;
					try { DebugEnterDecision(26, false);
					switch (input.LA(1))
					{
					case HASH:
						{
						int LA26_2 = input.LA(2);

						if ((EvaluatePredicate(synpred2_ExCSS_fragment)))
						{
							alt26 = 1;
						}


						}
						break;
					case DOT:
						{
						int LA26_3 = input.LA(2);

						if ((EvaluatePredicate(synpred2_ExCSS_fragment)))
						{
							alt26 = 1;
						}


						}
						break;
					case LBRACKET:
						{
						int LA26_4 = input.LA(2);

						if ((EvaluatePredicate(synpred2_ExCSS_fragment)))
						{
							alt26 = 1;
						}


						}
						break;
					case COLON:
						{
						int LA26_5 = input.LA(2);

						if ((EvaluatePredicate(synpred2_ExCSS_fragment)))
						{
							alt26 = 1;
						}


						}
						break;
					}

					} finally { DebugExitDecision(26); }
					switch (alt26)
					{
					case 1:
						DebugEnterAlt(1);
						// ExCSS.g:154:12: ( element_predicate )=> subsequent_element
						{
						DebugLocation(154, 33);
						PushFollow(Follow._subsequent_element_in_simple_selector865);
						subsequent_element78=subsequent_element();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, subsequent_element78.Tree);

						}
						break;

					default:
						if (cnt26 >= 1)
							goto loop26;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee26 = new EarlyExitException( 26, input );
						DebugRecognitionException(eee26);
						throw eee26;
					}
					cnt26++;
				}
				loop26:
					;

				} finally { DebugExitSubRule(26); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("simple_selector", 21);
			LeaveRule("simple_selector", 21);
			LeaveRule_simple_selector();
		}
		DebugLocation(155, 4);
		} finally { DebugExitRule(GrammarFileName, "simple_selector"); }
		return retval;

	}
	// $ANTLR end "simple_selector"

	partial void EnterRule_element_predicate();
	partial void LeaveRule_element_predicate();

	// $ANTLR start "element_predicate"
	// ExCSS.g:157:1: element_predicate : ( HASH | DOT | LBRACKET | COLON );
	[GrammarRule("element_predicate")]
	private AstParserRuleReturnScope<CommonTree, IToken> element_predicate()
	{
		EnterRule_element_predicate();
		EnterRule("element_predicate", 22);
		TraceIn("element_predicate", 22);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set79 = default(IToken);

		CommonTree set79_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "element_predicate");
		DebugLocation(157, 4);
		try
		{
			// ExCSS.g:158:5: ( HASH | DOT | LBRACKET | COLON )
			DebugEnterAlt(1);
			// ExCSS.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(158, 5);

			set79=(IToken)input.LT(1);
			if (input.LA(1)==COLON||input.LA(1)==DOT||input.LA(1)==HASH||input.LA(1)==LBRACKET)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set79));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("element_predicate", 22);
			LeaveRule("element_predicate", 22);
			LeaveRule_element_predicate();
		}
		DebugLocation(162, 4);
		} finally { DebugExitRule(GrammarFileName, "element_predicate"); }
		return retval;

	}
	// $ANTLR end "element_predicate"

	partial void EnterRule_subsequent_element();
	partial void LeaveRule_subsequent_element();

	// $ANTLR start "subsequent_element"
	// ExCSS.g:164:1: subsequent_element : ( HASH | cssClass | attrib | pseudo );
	[GrammarRule("subsequent_element")]
	private AstParserRuleReturnScope<CommonTree, IToken> subsequent_element()
	{
		EnterRule_subsequent_element();
		EnterRule("subsequent_element", 23);
		TraceIn("subsequent_element", 23);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken HASH80 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> cssClass81 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attrib82 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> pseudo83 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree HASH80_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "subsequent_element");
		DebugLocation(164, 4);
		try
		{
			// ExCSS.g:165:5: ( HASH | cssClass | attrib | pseudo )
			int alt28=4;
			try { DebugEnterDecision(28, false);
			switch (input.LA(1))
			{
			case HASH:
				{
				alt28 = 1;
				}
				break;
			case DOT:
				{
				alt28 = 2;
				}
				break;
			case LBRACKET:
				{
				alt28 = 3;
				}
				break;
			case COLON:
				{
				alt28 = 4;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 28, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(28); }
			switch (alt28)
			{
			case 1:
				DebugEnterAlt(1);
				// ExCSS.g:165:10: HASH
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(165, 10);
				HASH80=(IToken)Match(input,HASH,Follow._HASH_in_subsequent_element929); if (state.failed) return retval;
				if (state.backtracking == 0) {
				HASH80_tree = (CommonTree)adaptor.Create(HASH80);
				adaptor.AddChild(root_0, HASH80_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ExCSS.g:166:5: cssClass
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(166, 5);
				PushFollow(Follow._cssClass_in_subsequent_element935);
				cssClass81=cssClass();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, cssClass81.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// ExCSS.g:167:5: attrib
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(167, 5);
				PushFollow(Follow._attrib_in_subsequent_element941);
				attrib82=attrib();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, attrib82.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// ExCSS.g:168:5: pseudo
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(168, 5);
				PushFollow(Follow._pseudo_in_subsequent_element947);
				pseudo83=pseudo();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, pseudo83.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("subsequent_element", 23);
			LeaveRule("subsequent_element", 23);
			LeaveRule_subsequent_element();
		}
		DebugLocation(169, 4);
		} finally { DebugExitRule(GrammarFileName, "subsequent_element"); }
		return retval;

	}
	// $ANTLR end "subsequent_element"

	partial void EnterRule_cssClass();
	partial void LeaveRule_cssClass();

	// $ANTLR start "cssClass"
	// ExCSS.g:171:1: cssClass : DOT IDENT -> ^( CLASS IDENT ) ;
	[GrammarRule("cssClass")]
	private AstParserRuleReturnScope<CommonTree, IToken> cssClass()
	{
		EnterRule_cssClass();
		EnterRule("cssClass", 24);
		TraceIn("cssClass", 24);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken DOT84 = default(IToken);
		IToken IDENT85 = default(IToken);

		CommonTree DOT84_tree = default(CommonTree);
		CommonTree IDENT85_tree = default(CommonTree);
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleITokenStream stream_DOT=new RewriteRuleITokenStream(adaptor,"token DOT");
		try { DebugEnterRule(GrammarFileName, "cssClass");
		DebugLocation(171, 4);
		try
		{
			// ExCSS.g:172:5: ( DOT IDENT -> ^( CLASS IDENT ) )
			DebugEnterAlt(1);
			// ExCSS.g:172:8: DOT IDENT
			{
			DebugLocation(172, 8);
			DOT84=(IToken)Match(input,DOT,Follow._DOT_in_cssClass965); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_DOT.Add(DOT84);

			DebugLocation(172, 12);
			IDENT85=(IToken)Match(input,IDENT,Follow._IDENT_in_cssClass967); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_IDENT.Add(IDENT85);



			{
			// AST REWRITE
			// elements: IDENT
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 172:18: -> ^( CLASS IDENT )
			{
				DebugLocation(172, 21);
				// ExCSS.g:172:21: ^( CLASS IDENT )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(172, 23);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CLASS, "CLASS"), root_1);

				DebugLocation(172, 29);
				adaptor.AddChild(root_1, stream_IDENT.NextNode());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cssClass", 24);
			LeaveRule("cssClass", 24);
			LeaveRule_cssClass();
		}
		DebugLocation(173, 4);
		} finally { DebugExitRule(GrammarFileName, "cssClass"); }
		return retval;

	}
	// $ANTLR end "cssClass"

	partial void EnterRule_element_name();
	partial void LeaveRule_element_name();

	// $ANTLR start "element_name"
	// ExCSS.g:175:1: element_name : ( IDENT -> ^( ELEMENTNAME IDENT ) | STAR -> ^( ELEMENTNAME STAR ) );
	[GrammarRule("element_name")]
	private AstParserRuleReturnScope<CommonTree, IToken> element_name()
	{
		EnterRule_element_name();
		EnterRule("element_name", 25);
		TraceIn("element_name", 25);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken IDENT86 = default(IToken);
		IToken STAR87 = default(IToken);

		CommonTree IDENT86_tree = default(CommonTree);
		CommonTree STAR87_tree = default(CommonTree);
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleITokenStream stream_STAR=new RewriteRuleITokenStream(adaptor,"token STAR");
		try { DebugEnterRule(GrammarFileName, "element_name");
		DebugLocation(175, 4);
		try
		{
			// ExCSS.g:176:5: ( IDENT -> ^( ELEMENTNAME IDENT ) | STAR -> ^( ELEMENTNAME STAR ) )
			int alt29=2;
			try { DebugEnterDecision(29, false);
			int LA29_0 = input.LA(1);

			if ((LA29_0==IDENT))
			{
				alt29 = 1;
			}
			else if ((LA29_0==STAR))
			{
				alt29 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 29, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(29); }
			switch (alt29)
			{
			case 1:
				DebugEnterAlt(1);
				// ExCSS.g:176:10: IDENT
				{
				DebugLocation(176, 10);
				IDENT86=(IToken)Match(input,IDENT,Follow._IDENT_in_element_name995); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_IDENT.Add(IDENT86);



				{
				// AST REWRITE
				// elements: IDENT
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 176:16: -> ^( ELEMENTNAME IDENT )
				{
					DebugLocation(176, 19);
					// ExCSS.g:176:19: ^( ELEMENTNAME IDENT )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(176, 21);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ELEMENTNAME, "ELEMENTNAME"), root_1);

					DebugLocation(176, 33);
					adaptor.AddChild(root_1, stream_IDENT.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ExCSS.g:177:5: STAR
				{
				DebugLocation(177, 5);
				STAR87=(IToken)Match(input,STAR,Follow._STAR_in_element_name1009); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_STAR.Add(STAR87);



				{
				// AST REWRITE
				// elements: STAR
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 177:11: -> ^( ELEMENTNAME STAR )
				{
					DebugLocation(177, 14);
					// ExCSS.g:177:14: ^( ELEMENTNAME STAR )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(177, 16);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ELEMENTNAME, "ELEMENTNAME"), root_1);

					DebugLocation(177, 28);
					adaptor.AddChild(root_1, stream_STAR.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("element_name", 25);
			LeaveRule("element_name", 25);
			LeaveRule_element_name();
		}
		DebugLocation(178, 4);
		} finally { DebugExitRule(GrammarFileName, "element_name"); }
		return retval;

	}
	// $ANTLR end "element_name"

	partial void EnterRule_attrib();
	partial void LeaveRule_attrib();

	// $ANTLR start "attrib"
	// ExCSS.g:180:1: attrib : LBRACKET IDENT ( attribute_selector )? RBRACKET -> ^( ATTRIBUTE IDENT ( attribute_selector )? ) ;
	[GrammarRule("attrib")]
	private AstParserRuleReturnScope<CommonTree, IToken> attrib()
	{
		EnterRule_attrib();
		EnterRule("attrib", 26);
		TraceIn("attrib", 26);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken LBRACKET88 = default(IToken);
		IToken IDENT89 = default(IToken);
		IToken RBRACKET91 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_selector90 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree LBRACKET88_tree = default(CommonTree);
		CommonTree IDENT89_tree = default(CommonTree);
		CommonTree RBRACKET91_tree = default(CommonTree);
		RewriteRuleITokenStream stream_LBRACKET=new RewriteRuleITokenStream(adaptor,"token LBRACKET");
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleITokenStream stream_RBRACKET=new RewriteRuleITokenStream(adaptor,"token RBRACKET");
		RewriteRuleSubtreeStream stream_attribute_selector=new RewriteRuleSubtreeStream(adaptor,"rule attribute_selector");
		try { DebugEnterRule(GrammarFileName, "attrib");
		DebugLocation(180, 1);
		try
		{
			// ExCSS.g:181:5: ( LBRACKET IDENT ( attribute_selector )? RBRACKET -> ^( ATTRIBUTE IDENT ( attribute_selector )? ) )
			DebugEnterAlt(1);
			// ExCSS.g:181:8: LBRACKET IDENT ( attribute_selector )? RBRACKET
			{
			DebugLocation(181, 8);
			LBRACKET88=(IToken)Match(input,LBRACKET,Follow._LBRACKET_in_attrib1036); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_LBRACKET.Add(LBRACKET88);

			DebugLocation(182, 4);
			IDENT89=(IToken)Match(input,IDENT,Follow._IDENT_in_attrib1041); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_IDENT.Add(IDENT89);

			DebugLocation(182, 10);
			// ExCSS.g:182:10: ( attribute_selector )?
			int alt30=2;
			try { DebugEnterSubRule(30);
			try { DebugEnterDecision(30, false);
			int LA30_0 = input.LA(1);

			if ((LA30_0==CONTAINSMATCH||LA30_0==DASHMATCH||LA30_0==ENDSWITHMATCH||LA30_0==INCLUDES||LA30_0==OPEQ||LA30_0==STARTSWITHMATCH))
			{
				alt30 = 1;
			}
			} finally { DebugExitDecision(30); }
			switch (alt30)
			{
			case 1:
				DebugEnterAlt(1);
				// ExCSS.g:182:10: attribute_selector
				{
				DebugLocation(182, 10);
				PushFollow(Follow._attribute_selector_in_attrib1043);
				attribute_selector90=attribute_selector();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_attribute_selector.Add(attribute_selector90.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(30); }

			DebugLocation(183, 3);
			RBRACKET91=(IToken)Match(input,RBRACKET,Follow._RBRACKET_in_attrib1049); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_RBRACKET.Add(RBRACKET91);



			{
			// AST REWRITE
			// elements: attribute_selector, IDENT
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 184:4: -> ^( ATTRIBUTE IDENT ( attribute_selector )? )
			{
				DebugLocation(184, 7);
				// ExCSS.g:184:7: ^( ATTRIBUTE IDENT ( attribute_selector )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(184, 9);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ATTRIBUTE, "ATTRIBUTE"), root_1);

				DebugLocation(184, 19);
				adaptor.AddChild(root_1, stream_IDENT.NextNode());
				DebugLocation(184, 25);
				// ExCSS.g:184:25: ( attribute_selector )?
				if (stream_attribute_selector.HasNext)
				{
					DebugLocation(184, 25);
					adaptor.AddChild(root_1, stream_attribute_selector.NextTree());

				}
				stream_attribute_selector.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attrib", 26);
			LeaveRule("attrib", 26);
			LeaveRule_attrib();
		}
		DebugLocation(185, 1);
		} finally { DebugExitRule(GrammarFileName, "attrib"); }
		return retval;

	}
	// $ANTLR end "attrib"

	partial void EnterRule_attribute_selector();
	partial void LeaveRule_attribute_selector();

	// $ANTLR start "attribute_selector"
	// ExCSS.g:187:1: attribute_selector : attribute_operator ( IDENT | STRING ) ;
	[GrammarRule("attribute_selector")]
	private AstParserRuleReturnScope<CommonTree, IToken> attribute_selector()
	{
		EnterRule_attribute_selector();
		EnterRule("attribute_selector", 27);
		TraceIn("attribute_selector", 27);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set93 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_operator92 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree set93_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "attribute_selector");
		DebugLocation(187, 1);
		try
		{
			// ExCSS.g:188:2: ( attribute_operator ( IDENT | STRING ) )
			DebugEnterAlt(1);
			// ExCSS.g:188:4: attribute_operator ( IDENT | STRING )
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(188, 4);
			PushFollow(Follow._attribute_operator_in_attribute_selector1075);
			attribute_operator92=attribute_operator();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, attribute_operator92.Tree);
			DebugLocation(188, 23);

			set93=(IToken)input.LT(1);
			if (input.LA(1)==IDENT||input.LA(1)==STRING)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set93));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute_selector", 27);
			LeaveRule("attribute_selector", 27);
			LeaveRule_attribute_selector();
		}
		DebugLocation(189, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute_selector"); }
		return retval;

	}
	// $ANTLR end "attribute_selector"

	partial void EnterRule_attribute_operator();
	partial void LeaveRule_attribute_operator();

	// $ANTLR start "attribute_operator"
	// ExCSS.g:191:1: attribute_operator : ( OPEQ -> ^( ATTRIBUTEOPERATOR OPEQ ) | INCLUDES -> ^( ATTRIBUTEOPERATOR INCLUDES ) | DASHMATCH -> ^( ATTRIBUTEOPERATOR DASHMATCH ) | CONTAINSMATCH -> ^( ATTRIBUTEOPERATOR CONTAINSMATCH ) | STARTSWITHMATCH -> ^( ATTRIBUTEOPERATOR STARTSWITHMATCH ) | ENDSWITHMATCH -> ^( ATTRIBUTEOPERATOR ENDSWITHMATCH ) );
	[GrammarRule("attribute_operator")]
	private AstParserRuleReturnScope<CommonTree, IToken> attribute_operator()
	{
		EnterRule_attribute_operator();
		EnterRule("attribute_operator", 28);
		TraceIn("attribute_operator", 28);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken OPEQ94 = default(IToken);
		IToken INCLUDES95 = default(IToken);
		IToken DASHMATCH96 = default(IToken);
		IToken CONTAINSMATCH97 = default(IToken);
		IToken STARTSWITHMATCH98 = default(IToken);
		IToken ENDSWITHMATCH99 = default(IToken);

		CommonTree OPEQ94_tree = default(CommonTree);
		CommonTree INCLUDES95_tree = default(CommonTree);
		CommonTree DASHMATCH96_tree = default(CommonTree);
		CommonTree CONTAINSMATCH97_tree = default(CommonTree);
		CommonTree STARTSWITHMATCH98_tree = default(CommonTree);
		CommonTree ENDSWITHMATCH99_tree = default(CommonTree);
		RewriteRuleITokenStream stream_STARTSWITHMATCH=new RewriteRuleITokenStream(adaptor,"token STARTSWITHMATCH");
		RewriteRuleITokenStream stream_INCLUDES=new RewriteRuleITokenStream(adaptor,"token INCLUDES");
		RewriteRuleITokenStream stream_DASHMATCH=new RewriteRuleITokenStream(adaptor,"token DASHMATCH");
		RewriteRuleITokenStream stream_OPEQ=new RewriteRuleITokenStream(adaptor,"token OPEQ");
		RewriteRuleITokenStream stream_CONTAINSMATCH=new RewriteRuleITokenStream(adaptor,"token CONTAINSMATCH");
		RewriteRuleITokenStream stream_ENDSWITHMATCH=new RewriteRuleITokenStream(adaptor,"token ENDSWITHMATCH");
		try { DebugEnterRule(GrammarFileName, "attribute_operator");
		DebugLocation(191, 1);
		try
		{
			// ExCSS.g:192:2: ( OPEQ -> ^( ATTRIBUTEOPERATOR OPEQ ) | INCLUDES -> ^( ATTRIBUTEOPERATOR INCLUDES ) | DASHMATCH -> ^( ATTRIBUTEOPERATOR DASHMATCH ) | CONTAINSMATCH -> ^( ATTRIBUTEOPERATOR CONTAINSMATCH ) | STARTSWITHMATCH -> ^( ATTRIBUTEOPERATOR STARTSWITHMATCH ) | ENDSWITHMATCH -> ^( ATTRIBUTEOPERATOR ENDSWITHMATCH ) )
			int alt31=6;
			try { DebugEnterDecision(31, false);
			switch (input.LA(1))
			{
			case OPEQ:
				{
				alt31 = 1;
				}
				break;
			case INCLUDES:
				{
				alt31 = 2;
				}
				break;
			case DASHMATCH:
				{
				alt31 = 3;
				}
				break;
			case CONTAINSMATCH:
				{
				alt31 = 4;
				}
				break;
			case STARTSWITHMATCH:
				{
				alt31 = 5;
				}
				break;
			case ENDSWITHMATCH:
				{
				alt31 = 6;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 31, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(31); }
			switch (alt31)
			{
			case 1:
				DebugEnterAlt(1);
				// ExCSS.g:193:5: OPEQ
				{
				DebugLocation(193, 5);
				OPEQ94=(IToken)Match(input,OPEQ,Follow._OPEQ_in_attribute_operator1102); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_OPEQ.Add(OPEQ94);



				{
				// AST REWRITE
				// elements: OPEQ
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 193:14: -> ^( ATTRIBUTEOPERATOR OPEQ )
				{
					DebugLocation(193, 17);
					// ExCSS.g:193:17: ^( ATTRIBUTEOPERATOR OPEQ )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(193, 19);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ATTRIBUTEOPERATOR, "ATTRIBUTEOPERATOR"), root_1);

					DebugLocation(193, 37);
					adaptor.AddChild(root_1, stream_OPEQ.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ExCSS.g:194:5: INCLUDES
				{
				DebugLocation(194, 5);
				INCLUDES95=(IToken)Match(input,INCLUDES,Follow._INCLUDES_in_attribute_operator1120); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_INCLUDES.Add(INCLUDES95);



				{
				// AST REWRITE
				// elements: INCLUDES
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 194:17: -> ^( ATTRIBUTEOPERATOR INCLUDES )
				{
					DebugLocation(194, 20);
					// ExCSS.g:194:20: ^( ATTRIBUTEOPERATOR INCLUDES )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(194, 22);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ATTRIBUTEOPERATOR, "ATTRIBUTEOPERATOR"), root_1);

					DebugLocation(194, 40);
					adaptor.AddChild(root_1, stream_INCLUDES.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// ExCSS.g:195:5: DASHMATCH
				{
				DebugLocation(195, 5);
				DASHMATCH96=(IToken)Match(input,DASHMATCH,Follow._DASHMATCH_in_attribute_operator1137); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DASHMATCH.Add(DASHMATCH96);



				{
				// AST REWRITE
				// elements: DASHMATCH
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 195:17: -> ^( ATTRIBUTEOPERATOR DASHMATCH )
				{
					DebugLocation(195, 20);
					// ExCSS.g:195:20: ^( ATTRIBUTEOPERATOR DASHMATCH )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(195, 22);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ATTRIBUTEOPERATOR, "ATTRIBUTEOPERATOR"), root_1);

					DebugLocation(195, 40);
					adaptor.AddChild(root_1, stream_DASHMATCH.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// ExCSS.g:196:5: CONTAINSMATCH
				{
				DebugLocation(196, 5);
				CONTAINSMATCH97=(IToken)Match(input,CONTAINSMATCH,Follow._CONTAINSMATCH_in_attribute_operator1153); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CONTAINSMATCH.Add(CONTAINSMATCH97);



				{
				// AST REWRITE
				// elements: CONTAINSMATCH
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 196:20: -> ^( ATTRIBUTEOPERATOR CONTAINSMATCH )
				{
					DebugLocation(196, 23);
					// ExCSS.g:196:23: ^( ATTRIBUTEOPERATOR CONTAINSMATCH )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(196, 25);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ATTRIBUTEOPERATOR, "ATTRIBUTEOPERATOR"), root_1);

					DebugLocation(196, 43);
					adaptor.AddChild(root_1, stream_CONTAINSMATCH.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// ExCSS.g:197:5: STARTSWITHMATCH
				{
				DebugLocation(197, 5);
				STARTSWITHMATCH98=(IToken)Match(input,STARTSWITHMATCH,Follow._STARTSWITHMATCH_in_attribute_operator1168); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_STARTSWITHMATCH.Add(STARTSWITHMATCH98);



				{
				// AST REWRITE
				// elements: STARTSWITHMATCH
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 197:22: -> ^( ATTRIBUTEOPERATOR STARTSWITHMATCH )
				{
					DebugLocation(197, 25);
					// ExCSS.g:197:25: ^( ATTRIBUTEOPERATOR STARTSWITHMATCH )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(197, 27);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ATTRIBUTEOPERATOR, "ATTRIBUTEOPERATOR"), root_1);

					DebugLocation(197, 45);
					adaptor.AddChild(root_1, stream_STARTSWITHMATCH.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// ExCSS.g:198:5: ENDSWITHMATCH
				{
				DebugLocation(198, 5);
				ENDSWITHMATCH99=(IToken)Match(input,ENDSWITHMATCH,Follow._ENDSWITHMATCH_in_attribute_operator1183); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ENDSWITHMATCH.Add(ENDSWITHMATCH99);



				{
				// AST REWRITE
				// elements: ENDSWITHMATCH
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 198:20: -> ^( ATTRIBUTEOPERATOR ENDSWITHMATCH )
				{
					DebugLocation(198, 23);
					// ExCSS.g:198:23: ^( ATTRIBUTEOPERATOR ENDSWITHMATCH )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(198, 25);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ATTRIBUTEOPERATOR, "ATTRIBUTEOPERATOR"), root_1);

					DebugLocation(198, 43);
					adaptor.AddChild(root_1, stream_ENDSWITHMATCH.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute_operator", 28);
			LeaveRule("attribute_operator", 28);
			LeaveRule_attribute_operator();
		}
		DebugLocation(200, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute_operator"); }
		return retval;

	}
	// $ANTLR end "attribute_operator"

	partial void EnterRule_pseudo();
	partial void LeaveRule_pseudo();

	// $ANTLR start "pseudo"
	// ExCSS.g:202:1: pseudo : COLON ( COLON )? ( IDENT | FUNCTION ( IDENT )? RPAREN | LPAREN expr RPAREN ) ;
	[GrammarRule("pseudo")]
	private AstParserRuleReturnScope<CommonTree, IToken> pseudo()
	{
		EnterRule_pseudo();
		EnterRule("pseudo", 29);
		TraceIn("pseudo", 29);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken COLON100 = default(IToken);
		IToken COLON101 = default(IToken);
		IToken IDENT102 = default(IToken);
		IToken FUNCTION103 = default(IToken);
		IToken IDENT104 = default(IToken);
		IToken RPAREN105 = default(IToken);
		IToken LPAREN106 = default(IToken);
		IToken RPAREN108 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr107 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree COLON100_tree = default(CommonTree);
		CommonTree COLON101_tree = default(CommonTree);
		CommonTree IDENT102_tree = default(CommonTree);
		CommonTree FUNCTION103_tree = default(CommonTree);
		CommonTree IDENT104_tree = default(CommonTree);
		CommonTree RPAREN105_tree = default(CommonTree);
		CommonTree LPAREN106_tree = default(CommonTree);
		CommonTree RPAREN108_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "pseudo");
		DebugLocation(202, 4);
		try
		{
			// ExCSS.g:203:5: ( COLON ( COLON )? ( IDENT | FUNCTION ( IDENT )? RPAREN | LPAREN expr RPAREN ) )
			DebugEnterAlt(1);
			// ExCSS.g:203:8: COLON ( COLON )? ( IDENT | FUNCTION ( IDENT )? RPAREN | LPAREN expr RPAREN )
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(203, 8);
			COLON100=(IToken)Match(input,COLON,Follow._COLON_in_pseudo1208); if (state.failed) return retval;
			if (state.backtracking == 0) {
			COLON100_tree = (CommonTree)adaptor.Create(COLON100);
			adaptor.AddChild(root_0, COLON100_tree);
			}
			DebugLocation(203, 14);
			// ExCSS.g:203:14: ( COLON )?
			int alt32=2;
			try { DebugEnterSubRule(32);
			try { DebugEnterDecision(32, false);
			int LA32_0 = input.LA(1);

			if ((LA32_0==COLON))
			{
				alt32 = 1;
			}
			} finally { DebugExitDecision(32); }
			switch (alt32)
			{
			case 1:
				DebugEnterAlt(1);
				// ExCSS.g:203:15: COLON
				{
				DebugLocation(203, 15);
				COLON101=(IToken)Match(input,COLON,Follow._COLON_in_pseudo1211); if (state.failed) return retval;
				if (state.backtracking == 0) {
				COLON101_tree = (CommonTree)adaptor.Create(COLON101);
				adaptor.AddChild(root_0, COLON101_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(32); }

			DebugLocation(204, 3);
			// ExCSS.g:204:3: ( IDENT | FUNCTION ( IDENT )? RPAREN | LPAREN expr RPAREN )
			int alt34=3;
			try { DebugEnterSubRule(34);
			try { DebugEnterDecision(34, false);
			switch (input.LA(1))
			{
			case IDENT:
				{
				alt34 = 1;
				}
				break;
			case FUNCTION:
				{
				alt34 = 2;
				}
				break;
			case LPAREN:
				{
				alt34 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 34, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(34); }
			switch (alt34)
			{
			case 1:
				DebugEnterAlt(1);
				// ExCSS.g:204:8: IDENT
				{
				DebugLocation(204, 8);
				IDENT102=(IToken)Match(input,IDENT,Follow._IDENT_in_pseudo1222); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IDENT102_tree = (CommonTree)adaptor.Create(IDENT102);
				adaptor.AddChild(root_0, IDENT102_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ExCSS.g:205:15: FUNCTION ( IDENT )? RPAREN
				{
				DebugLocation(205, 15);
				FUNCTION103=(IToken)Match(input,FUNCTION,Follow._FUNCTION_in_pseudo1238); if (state.failed) return retval;
				if (state.backtracking == 0) {
				FUNCTION103_tree = (CommonTree)adaptor.Create(FUNCTION103);
				adaptor.AddChild(root_0, FUNCTION103_tree);
				}
				DebugLocation(205, 24);
				// ExCSS.g:205:24: ( IDENT )?
				int alt33=2;
				try { DebugEnterSubRule(33);
				try { DebugEnterDecision(33, false);
				int LA33_0 = input.LA(1);

				if ((LA33_0==IDENT))
				{
					alt33 = 1;
				}
				} finally { DebugExitDecision(33); }
				switch (alt33)
				{
				case 1:
					DebugEnterAlt(1);
					// ExCSS.g:205:24: IDENT
					{
					DebugLocation(205, 24);
					IDENT104=(IToken)Match(input,IDENT,Follow._IDENT_in_pseudo1240); if (state.failed) return retval;
					if (state.backtracking == 0) {
					IDENT104_tree = (CommonTree)adaptor.Create(IDENT104);
					adaptor.AddChild(root_0, IDENT104_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(33); }

				DebugLocation(205, 31);
				RPAREN105=(IToken)Match(input,RPAREN,Follow._RPAREN_in_pseudo1243); if (state.failed) return retval;
				if (state.backtracking == 0) {
				RPAREN105_tree = (CommonTree)adaptor.Create(RPAREN105);
				adaptor.AddChild(root_0, RPAREN105_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// ExCSS.g:206:15: LPAREN expr RPAREN
				{
				DebugLocation(206, 15);
				LPAREN106=(IToken)Match(input,LPAREN,Follow._LPAREN_in_pseudo1259); if (state.failed) return retval;
				if (state.backtracking == 0) {
				LPAREN106_tree = (CommonTree)adaptor.Create(LPAREN106);
				adaptor.AddChild(root_0, LPAREN106_tree);
				}
				DebugLocation(206, 22);
				PushFollow(Follow._expr_in_pseudo1261);
				expr107=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expr107.Tree);
				DebugLocation(206, 27);
				RPAREN108=(IToken)Match(input,RPAREN,Follow._RPAREN_in_pseudo1263); if (state.failed) return retval;
				if (state.backtracking == 0) {
				RPAREN108_tree = (CommonTree)adaptor.Create(RPAREN108);
				adaptor.AddChild(root_0, RPAREN108_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(34); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("pseudo", 29);
			LeaveRule("pseudo", 29);
			LeaveRule_pseudo();
		}
		DebugLocation(208, 4);
		} finally { DebugExitRule(GrammarFileName, "pseudo"); }
		return retval;

	}
	// $ANTLR end "pseudo"

	partial void EnterRule_declaration();
	partial void LeaveRule_declaration();

	// $ANTLR start "declaration"
	// ExCSS.g:210:1: declaration : property COLON expr ( prio )? -> ^( PROPERTY property ^( EXPRESSION expr ( prio )? ) ) ;
	[GrammarRule("declaration")]
	private AstParserRuleReturnScope<CommonTree, IToken> declaration()
	{
		EnterRule_declaration();
		EnterRule("declaration", 30);
		TraceIn("declaration", 30);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken COLON110 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> property109 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr111 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> prio112 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree COLON110_tree = default(CommonTree);
		RewriteRuleITokenStream stream_COLON=new RewriteRuleITokenStream(adaptor,"token COLON");
		RewriteRuleSubtreeStream stream_property=new RewriteRuleSubtreeStream(adaptor,"rule property");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_prio=new RewriteRuleSubtreeStream(adaptor,"rule prio");
		try { DebugEnterRule(GrammarFileName, "declaration");
		DebugLocation(210, 1);
		try
		{
			// ExCSS.g:211:2: ( property COLON expr ( prio )? -> ^( PROPERTY property ^( EXPRESSION expr ( prio )? ) ) )
			DebugEnterAlt(1);
			// ExCSS.g:211:5: property COLON expr ( prio )?
			{
			DebugLocation(211, 5);
			PushFollow(Follow._property_in_declaration1283);
			property109=property();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_property.Add(property109.Tree);
			DebugLocation(211, 14);
			COLON110=(IToken)Match(input,COLON,Follow._COLON_in_declaration1285); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_COLON.Add(COLON110);

			DebugLocation(211, 20);
			PushFollow(Follow._expr_in_declaration1287);
			expr111=expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expr.Add(expr111.Tree);
			DebugLocation(211, 25);
			// ExCSS.g:211:25: ( prio )?
			int alt35=2;
			try { DebugEnterSubRule(35);
			try { DebugEnterDecision(35, false);
			int LA35_0 = input.LA(1);

			if ((LA35_0==IMPORTANT_SYM))
			{
				alt35 = 1;
			}
			} finally { DebugExitDecision(35); }
			switch (alt35)
			{
			case 1:
				DebugEnterAlt(1);
				// ExCSS.g:211:25: prio
				{
				DebugLocation(211, 25);
				PushFollow(Follow._prio_in_declaration1289);
				prio112=prio();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_prio.Add(prio112.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(35); }



			{
			// AST REWRITE
			// elements: prio, expr, property
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 212:4: -> ^( PROPERTY property ^( EXPRESSION expr ( prio )? ) )
			{
				DebugLocation(212, 7);
				// ExCSS.g:212:7: ^( PROPERTY property ^( EXPRESSION expr ( prio )? ) )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(212, 9);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PROPERTY, "PROPERTY"), root_1);

				DebugLocation(212, 18);
				adaptor.AddChild(root_1, stream_property.NextTree());
				DebugLocation(212, 27);
				// ExCSS.g:212:27: ^( EXPRESSION expr ( prio )? )
				{
				CommonTree root_2 = (CommonTree)adaptor.Nil();
				DebugLocation(212, 29);
				root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(EXPRESSION, "EXPRESSION"), root_2);

				DebugLocation(212, 40);
				adaptor.AddChild(root_2, stream_expr.NextTree());
				DebugLocation(212, 45);
				// ExCSS.g:212:45: ( prio )?
				if (stream_prio.HasNext)
				{
					DebugLocation(212, 45);
					adaptor.AddChild(root_2, stream_prio.NextTree());

				}
				stream_prio.Reset();

				adaptor.AddChild(root_1, root_2);
				}

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("declaration", 30);
			LeaveRule("declaration", 30);
			LeaveRule_declaration();
		}
		DebugLocation(214, 1);
		} finally { DebugExitRule(GrammarFileName, "declaration"); }
		return retval;

	}
	// $ANTLR end "declaration"

	partial void EnterRule_prio();
	partial void LeaveRule_prio();

	// $ANTLR start "prio"
	// ExCSS.g:216:1: prio : IMPORTANT_SYM -> ^( IMPORTANT IMPORTANT_SYM ) ;
	[GrammarRule("prio")]
	private AstParserRuleReturnScope<CommonTree, IToken> prio()
	{
		EnterRule_prio();
		EnterRule("prio", 31);
		TraceIn("prio", 31);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken IMPORTANT_SYM113 = default(IToken);

		CommonTree IMPORTANT_SYM113_tree = default(CommonTree);
		RewriteRuleITokenStream stream_IMPORTANT_SYM=new RewriteRuleITokenStream(adaptor,"token IMPORTANT_SYM");
		try { DebugEnterRule(GrammarFileName, "prio");
		DebugLocation(216, 1);
		try
		{
			// ExCSS.g:217:2: ( IMPORTANT_SYM -> ^( IMPORTANT IMPORTANT_SYM ) )
			DebugEnterAlt(1);
			// ExCSS.g:217:5: IMPORTANT_SYM
			{
			DebugLocation(217, 5);
			IMPORTANT_SYM113=(IToken)Match(input,IMPORTANT_SYM,Follow._IMPORTANT_SYM_in_prio1327); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_IMPORTANT_SYM.Add(IMPORTANT_SYM113);



			{
			// AST REWRITE
			// elements: IMPORTANT_SYM
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 218:4: -> ^( IMPORTANT IMPORTANT_SYM )
			{
				DebugLocation(218, 7);
				// ExCSS.g:218:7: ^( IMPORTANT IMPORTANT_SYM )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(218, 9);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(IMPORTANT, "IMPORTANT"), root_1);

				DebugLocation(218, 19);
				adaptor.AddChild(root_1, stream_IMPORTANT_SYM.NextNode());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("prio", 31);
			LeaveRule("prio", 31);
			LeaveRule_prio();
		}
		DebugLocation(219, 1);
		} finally { DebugExitRule(GrammarFileName, "prio"); }
		return retval;

	}
	// $ANTLR end "prio"

	partial void EnterRule_expr();
	partial void LeaveRule_expr();

	// $ANTLR start "expr"
	// ExCSS.g:221:1: expr : term ( operator term )* ;
	[GrammarRule("expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> expr()
	{
		EnterRule_expr();
		EnterRule("expr", 32);
		TraceIn("expr", 32);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> term114 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> operator115 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> term116 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "expr");
		DebugLocation(221, 1);
		try
		{
			// ExCSS.g:222:2: ( term ( operator term )* )
			DebugEnterAlt(1);
			// ExCSS.g:222:4: term ( operator term )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(222, 4);
			PushFollow(Follow._term_in_expr1350);
			term114=term();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, term114.Tree);
			DebugLocation(222, 9);
			// ExCSS.g:222:9: ( operator term )*
			try { DebugEnterSubRule(36);
			while (true)
			{
				int alt36=2;
				try { DebugEnterDecision(36, false);
				int LA36_0 = input.LA(1);

				if ((LA36_0==ANGLE||(LA36_0>=COLON && LA36_0<=COMMA)||LA36_0==DOT||LA36_0==EMS||LA36_0==EXS||(LA36_0>=FREQ && LA36_0<=FUNCTION)||LA36_0==HASH||LA36_0==IDENT||LA36_0==LENGTH||LA36_0==MINUS||LA36_0==NUMBER||LA36_0==OPEQ||(LA36_0>=PERCENTAGE && LA36_0<=PLUS)||LA36_0==SOLIDUS||LA36_0==STRING||LA36_0==TIME||LA36_0==URI))
				{
					alt36 = 1;
				}


				} finally { DebugExitDecision(36); }
				switch ( alt36 )
				{
				case 1:
					DebugEnterAlt(1);
					// ExCSS.g:222:10: operator term
					{
					DebugLocation(222, 10);
					PushFollow(Follow._operator_in_expr1353);
					operator115=@operator();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, operator115.Tree);
					DebugLocation(222, 19);
					PushFollow(Follow._term_in_expr1355);
					term116=term();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, term116.Tree);

					}
					break;

				default:
					goto loop36;
				}
			}

			loop36:
				;

			} finally { DebugExitSubRule(36); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expr", 32);
			LeaveRule("expr", 32);
			LeaveRule_expr();
		}
		DebugLocation(224, 1);
		} finally { DebugExitRule(GrammarFileName, "expr"); }
		return retval;

	}
	// $ANTLR end "expr"

	partial void EnterRule_term();
	partial void LeaveRule_term();

	// $ANTLR start "term"
	// ExCSS.g:226:1: term : ( ( unaryOperator )? ( NUMBER | PERCENTAGE | LENGTH | EMS | EXS | ANGLE | TIME | FREQ ) | STRING | IDENT | URI | hexColor | ( FUNCTION ( expr )? RPAREN ) );
	[GrammarRule("term")]
	private AstParserRuleReturnScope<CommonTree, IToken> term()
	{
		EnterRule_term();
		EnterRule("term", 33);
		TraceIn("term", 33);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set118 = default(IToken);
		IToken STRING119 = default(IToken);
		IToken IDENT120 = default(IToken);
		IToken URI121 = default(IToken);
		IToken FUNCTION123 = default(IToken);
		IToken RPAREN125 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> unaryOperator117 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> hexColor122 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr124 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree set118_tree = default(CommonTree);
		CommonTree STRING119_tree = default(CommonTree);
		CommonTree IDENT120_tree = default(CommonTree);
		CommonTree URI121_tree = default(CommonTree);
		CommonTree FUNCTION123_tree = default(CommonTree);
		CommonTree RPAREN125_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "term");
		DebugLocation(226, 4);
		try
		{
			// ExCSS.g:227:5: ( ( unaryOperator )? ( NUMBER | PERCENTAGE | LENGTH | EMS | EXS | ANGLE | TIME | FREQ ) | STRING | IDENT | URI | hexColor | ( FUNCTION ( expr )? RPAREN ) )
			int alt39=6;
			try { DebugEnterDecision(39, false);
			switch (input.LA(1))
			{
			case ANGLE:
			case EMS:
			case EXS:
			case FREQ:
			case LENGTH:
			case MINUS:
			case NUMBER:
			case PERCENTAGE:
			case PLUS:
			case TIME:
				{
				alt39 = 1;
				}
				break;
			case STRING:
				{
				alt39 = 2;
				}
				break;
			case IDENT:
				{
				alt39 = 3;
				}
				break;
			case URI:
				{
				alt39 = 4;
				}
				break;
			case HASH:
				{
				alt39 = 5;
				}
				break;
			case FUNCTION:
				{
				alt39 = 6;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 39, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(39); }
			switch (alt39)
			{
			case 1:
				DebugEnterAlt(1);
				// ExCSS.g:227:7: ( unaryOperator )? ( NUMBER | PERCENTAGE | LENGTH | EMS | EXS | ANGLE | TIME | FREQ )
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(227, 7);
				// ExCSS.g:227:7: ( unaryOperator )?
				int alt37=2;
				try { DebugEnterSubRule(37);
				try { DebugEnterDecision(37, false);
				int LA37_0 = input.LA(1);

				if ((LA37_0==MINUS||LA37_0==PLUS))
				{
					alt37 = 1;
				}
				} finally { DebugExitDecision(37); }
				switch (alt37)
				{
				case 1:
					DebugEnterAlt(1);
					// ExCSS.g:227:7: unaryOperator
					{
					DebugLocation(227, 7);
					PushFollow(Follow._unaryOperator_in_term1375);
					unaryOperator117=unaryOperator();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, unaryOperator117.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(37); }

				DebugLocation(228, 7);

				set118=(IToken)input.LT(1);
				if (input.LA(1)==ANGLE||input.LA(1)==EMS||input.LA(1)==EXS||input.LA(1)==FREQ||input.LA(1)==LENGTH||input.LA(1)==NUMBER||input.LA(1)==PERCENTAGE||input.LA(1)==TIME)
				{
					input.Consume();
					if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set118));
					state.errorRecovery=false;state.failed=false;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ExCSS.g:238:7: STRING
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(238, 7);
				STRING119=(IToken)Match(input,STRING,Follow._STRING_in_term1521); if (state.failed) return retval;
				if (state.backtracking == 0) {
				STRING119_tree = (CommonTree)adaptor.Create(STRING119);
				adaptor.AddChild(root_0, STRING119_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// ExCSS.g:239:7: IDENT
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(239, 7);
				IDENT120=(IToken)Match(input,IDENT,Follow._IDENT_in_term1529); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IDENT120_tree = (CommonTree)adaptor.Create(IDENT120);
				adaptor.AddChild(root_0, IDENT120_tree);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// ExCSS.g:240:7: URI
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(240, 7);
				URI121=(IToken)Match(input,URI,Follow._URI_in_term1537); if (state.failed) return retval;
				if (state.backtracking == 0) {
				URI121_tree = (CommonTree)adaptor.Create(URI121);
				adaptor.AddChild(root_0, URI121_tree);
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// ExCSS.g:241:7: hexColor
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(241, 7);
				PushFollow(Follow._hexColor_in_term1545);
				hexColor122=hexColor();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, hexColor122.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// ExCSS.g:242:7: ( FUNCTION ( expr )? RPAREN )
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(242, 7);
				// ExCSS.g:242:7: ( FUNCTION ( expr )? RPAREN )
				DebugEnterAlt(1);
				// ExCSS.g:242:8: FUNCTION ( expr )? RPAREN
				{
				DebugLocation(242, 8);
				FUNCTION123=(IToken)Match(input,FUNCTION,Follow._FUNCTION_in_term1554); if (state.failed) return retval;
				if (state.backtracking == 0) {
				FUNCTION123_tree = (CommonTree)adaptor.Create(FUNCTION123);
				adaptor.AddChild(root_0, FUNCTION123_tree);
				}
				DebugLocation(242, 17);
				// ExCSS.g:242:17: ( expr )?
				int alt38=2;
				try { DebugEnterSubRule(38);
				try { DebugEnterDecision(38, false);
				int LA38_0 = input.LA(1);

				if ((LA38_0==ANGLE||LA38_0==EMS||LA38_0==EXS||(LA38_0>=FREQ && LA38_0<=FUNCTION)||LA38_0==HASH||LA38_0==IDENT||LA38_0==LENGTH||LA38_0==MINUS||LA38_0==NUMBER||(LA38_0>=PERCENTAGE && LA38_0<=PLUS)||LA38_0==STRING||LA38_0==TIME||LA38_0==URI))
				{
					alt38 = 1;
				}
				} finally { DebugExitDecision(38); }
				switch (alt38)
				{
				case 1:
					DebugEnterAlt(1);
					// ExCSS.g:242:18: expr
					{
					DebugLocation(242, 18);
					PushFollow(Follow._expr_in_term1557);
					expr124=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, expr124.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(38); }

				DebugLocation(242, 25);
				RPAREN125=(IToken)Match(input,RPAREN,Follow._RPAREN_in_term1561); if (state.failed) return retval;
				if (state.backtracking == 0) {
				RPAREN125_tree = (CommonTree)adaptor.Create(RPAREN125);
				adaptor.AddChild(root_0, RPAREN125_tree);
				}

				}


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("term", 33);
			LeaveRule("term", 33);
			LeaveRule_term();
		}
		DebugLocation(243, 4);
		} finally { DebugExitRule(GrammarFileName, "term"); }
		return retval;

	}
	// $ANTLR end "term"

	partial void EnterRule_hexColor();
	partial void LeaveRule_hexColor();

	// $ANTLR start "hexColor"
	// ExCSS.g:245:1: hexColor : HASH ;
	[GrammarRule("hexColor")]
	private AstParserRuleReturnScope<CommonTree, IToken> hexColor()
	{
		EnterRule_hexColor();
		EnterRule("hexColor", 34);
		TraceIn("hexColor", 34);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken HASH126 = default(IToken);

		CommonTree HASH126_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "hexColor");
		DebugLocation(245, 4);
		try
		{
			// ExCSS.g:246:5: ( HASH )
			DebugEnterAlt(1);
			// ExCSS.g:246:7: HASH
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(246, 7);
			HASH126=(IToken)Match(input,HASH,Follow._HASH_in_hexColor1579); if (state.failed) return retval;
			if (state.backtracking == 0) {
			HASH126_tree = (CommonTree)adaptor.Create(HASH126);
			adaptor.AddChild(root_0, HASH126_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("hexColor", 34);
			LeaveRule("hexColor", 34);
			LeaveRule_hexColor();
		}
		DebugLocation(247, 4);
		} finally { DebugExitRule(GrammarFileName, "hexColor"); }
		return retval;

	}
	// $ANTLR end "hexColor"

	partial void EnterRule_synpred1_ExCSS_fragment();
	partial void LeaveRule_synpred1_ExCSS_fragment();

	// $ANTLR start synpred1_ExCSS
	public void synpred1_ExCSS_fragment()
	{
		EnterRule_synpred1_ExCSS_fragment();
		EnterRule("synpred1_ExCSS_fragment", 35);
		TraceIn("synpred1_ExCSS_fragment", 35);
		try
		{
			// ExCSS.g:153:22: ( element_predicate )
			DebugEnterAlt(1);
			// ExCSS.g:153:23: element_predicate
			{
			DebugLocation(153, 23);
			PushFollow(Follow._element_predicate_in_synpred1_ExCSS842);
			element_predicate();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred1_ExCSS_fragment", 35);
			LeaveRule("synpred1_ExCSS_fragment", 35);
			LeaveRule_synpred1_ExCSS_fragment();
		}
	}
	// $ANTLR end synpred1_ExCSS

	partial void EnterRule_synpred2_ExCSS_fragment();
	partial void LeaveRule_synpred2_ExCSS_fragment();

	// $ANTLR start synpred2_ExCSS
	public void synpred2_ExCSS_fragment()
	{
		EnterRule_synpred2_ExCSS_fragment();
		EnterRule("synpred2_ExCSS_fragment", 36);
		TraceIn("synpred2_ExCSS_fragment", 36);
		try
		{
			// ExCSS.g:154:12: ( element_predicate )
			DebugEnterAlt(1);
			// ExCSS.g:154:13: element_predicate
			{
			DebugLocation(154, 13);
			PushFollow(Follow._element_predicate_in_synpred2_ExCSS862);
			element_predicate();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred2_ExCSS_fragment", 36);
			LeaveRule("synpred2_ExCSS_fragment", 36);
			LeaveRule_synpred2_ExCSS_fragment();
		}
	}
	// $ANTLR end synpred2_ExCSS
	#endregion Rules

	#region Synpreds
	private bool EvaluatePredicate(System.Action fragment)
	{
		bool success = false;
		state.backtracking++;
		try { DebugBeginBacktrack(state.backtracking);
		int start = input.Mark();
		try
		{
			fragment();
		}
		catch ( RecognitionException re )
		{
			System.Console.Error.WriteLine("impossible: "+re);
		}
		success = !state.failed;
		input.Rewind(start);
		} finally { DebugEndBacktrack(state.backtracking, success); }
		state.backtracking--;
		state.failed=false;
		return success;
	}
	#endregion Synpreds


	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _stylesheet_in_parse103 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _charset_in_stylesheet130 = new BitSet(new ulong[]{0x110224100808002UL,0x80010UL});
		public static readonly BitSet _imports_in_stylesheet136 = new BitSet(new ulong[]{0x110224100808002UL,0x80010UL});
		public static readonly BitSet _ruleset_in_stylesheet152 = new BitSet(new ulong[]{0x110024100808002UL,0x80010UL});
		public static readonly BitSet _media_in_stylesheet159 = new BitSet(new ulong[]{0x110024100808002UL,0x80010UL});
		public static readonly BitSet _page_in_stylesheet166 = new BitSet(new ulong[]{0x110024100808002UL,0x80010UL});
		public static readonly BitSet _font_face_in_stylesheet173 = new BitSet(new ulong[]{0x110024100808002UL,0x80010UL});
		public static readonly BitSet _CHARSET_SYM_in_charset226 = new BitSet(new ulong[]{0x0UL,0x200000UL});
		public static readonly BitSet _STRING_in_charset228 = new BitSet(new ulong[]{0x0UL,0x10000UL});
		public static readonly BitSet _SEMI_in_charset230 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IMPORT_SYM_in_imports244 = new BitSet(new ulong[]{0x0UL,0x10200000UL});
		public static readonly BitSet _set_in_imports246 = new BitSet(new ulong[]{0x40020000000000UL,0x330000010000UL});
		public static readonly BitSet _media_query_list_in_imports254 = new BitSet(new ulong[]{0x0UL,0x10000UL});
		public static readonly BitSet _SEMI_in_imports258 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _MEDIA_SYM_in_media271 = new BitSet(new ulong[]{0x40020000000000UL,0x330000000000UL});
		public static readonly BitSet _media_query_list_in_media273 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _LBRACE_in_media278 = new BitSet(new ulong[]{0x10024000808000UL,0x80400UL});
		public static readonly BitSet _ruleset_in_media284 = new BitSet(new ulong[]{0x10024000808000UL,0x80400UL});
		public static readonly BitSet _RBRACE_in_media290 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _media_query_in_media_query_list301 = new BitSet(new ulong[]{0x10002UL});
		public static readonly BitSet _COMMA_in_media_query_list304 = new BitSet(new ulong[]{0x40020000000000UL,0x330000000000UL});
		public static readonly BitSet _media_query_in_media_query_list306 = new BitSet(new ulong[]{0x10002UL});
		public static readonly BitSet _media_type_in_media_query361 = new BitSet(new ulong[]{0x2UL,0x88000000000UL});
		public static readonly BitSet _set_in_media_query364 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _expression_in_media_query372 = new BitSet(new ulong[]{0x2UL,0x88000000000UL});
		public static readonly BitSet _expression_in_media_query380 = new BitSet(new ulong[]{0x2UL,0x88000000000UL});
		public static readonly BitSet _set_in_media_query383 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _expression_in_media_query391 = new BitSet(new ulong[]{0x2UL,0x88000000000UL});
		public static readonly BitSet _IDENT_in_media_type408 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LPAREN_in_expression420 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _media_feature_in_expression426 = new BitSet(new ulong[]{0x8000UL,0x1000UL});
		public static readonly BitSet _COLON_in_expression429 = new BitSet(new ulong[]{0x220024644000020UL,0x12200061UL});
		public static readonly BitSet _expr_in_expression431 = new BitSet(new ulong[]{0x0UL,0x1000UL});
		public static readonly BitSet _RPAREN_in_expression438 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_media_feature450 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PAGE_SYM_in_page465 = new BitSet(new ulong[]{0x8000000008000UL});
		public static readonly BitSet _pseudoPage_in_page468 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _LBRACE_in_page480 = new BitSet(new ulong[]{0x20000000000UL,0x44000080000UL});
		public static readonly BitSet _declaration_in_page494 = new BitSet(new ulong[]{0x0UL,0x10000UL});
		public static readonly BitSet _SEMI_in_page508 = new BitSet(new ulong[]{0x20000000000UL,0x44000080400UL});
		public static readonly BitSet _declaration_in_page511 = new BitSet(new ulong[]{0x0UL,0x10000UL});
		public static readonly BitSet _SEMI_in_page513 = new BitSet(new ulong[]{0x20000000000UL,0x44000080400UL});
		public static readonly BitSet _RBRACE_in_page525 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _COLON_in_pseudoPage542 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _IDENT_in_pseudoPage544 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FONT_FACE_SYM_in_font_face559 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _LBRACE_in_font_face563 = new BitSet(new ulong[]{0x20000000000UL,0x44000080400UL});
		public static readonly BitSet _declaration_in_font_face569 = new BitSet(new ulong[]{0x0UL,0x10400UL});
		public static readonly BitSet _SEMI_in_font_face571 = new BitSet(new ulong[]{0x20000000000UL,0x44000090400UL});
		public static readonly BitSet _declaration_in_font_face573 = new BitSet(new ulong[]{0x0UL,0x10400UL});
		public static readonly BitSet _RBRACE_in_font_face582 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SOLIDUS_in_operator599 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _COMMA_in_operator605 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OPEQ_in_operator611 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOT_in_operator617 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _COLON_in_operator623 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PLUS_in_combinator647 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _GREATER_in_combinator654 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TILDE_in_combinator661 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _property_prefix_in_property696 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _IDENT_in_property698 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _selector_in_ruleset738 = new BitSet(new ulong[]{0x8000000010000UL});
		public static readonly BitSet _COMMA_in_ruleset741 = new BitSet(new ulong[]{0x10024000808000UL,0x80000UL});
		public static readonly BitSet _selector_in_ruleset743 = new BitSet(new ulong[]{0x8000000010000UL});
		public static readonly BitSet _LBRACE_in_ruleset749 = new BitSet(new ulong[]{0x20000000000UL,0x44000090400UL});
		public static readonly BitSet _declaration_in_ruleset754 = new BitSet(new ulong[]{0x0UL,0x10400UL});
		public static readonly BitSet _SEMI_in_ruleset758 = new BitSet(new ulong[]{0x20000000000UL,0x44000090400UL});
		public static readonly BitSet _declaration_in_ruleset760 = new BitSet(new ulong[]{0x0UL,0x10400UL});
		public static readonly BitSet _RBRACE_in_ruleset767 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _simple_selector_in_selector800 = new BitSet(new ulong[]{0x10025000808002UL,0x1080040UL});
		public static readonly BitSet _combinator_in_selector803 = new BitSet(new ulong[]{0x10024000808000UL,0x80000UL});
		public static readonly BitSet _simple_selector_in_selector805 = new BitSet(new ulong[]{0x10025000808002UL,0x1080040UL});
		public static readonly BitSet _element_name_in_simple_selector838 = new BitSet(new ulong[]{0x10004000808002UL});
		public static readonly BitSet _subsequent_element_in_simple_selector845 = new BitSet(new ulong[]{0x10004000808002UL});
		public static readonly BitSet _subsequent_element_in_simple_selector865 = new BitSet(new ulong[]{0x10004000808002UL});
		public static readonly BitSet _HASH_in_subsequent_element929 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _cssClass_in_subsequent_element935 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attrib_in_subsequent_element941 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _pseudo_in_subsequent_element947 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOT_in_cssClass965 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _IDENT_in_cssClass967 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_element_name995 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STAR_in_element_name1009 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LBRACKET_in_attrib1036 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _IDENT_in_attrib1041 = new BitSet(new ulong[]{0x400008140000UL,0x100804UL});
		public static readonly BitSet _attribute_selector_in_attrib1043 = new BitSet(new ulong[]{0x0UL,0x800UL});
		public static readonly BitSet _RBRACKET_in_attrib1049 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_operator_in_attribute_selector1075 = new BitSet(new ulong[]{0x20000000000UL,0x200000UL});
		public static readonly BitSet _set_in_attribute_selector1077 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OPEQ_in_attribute_operator1102 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INCLUDES_in_attribute_operator1120 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DASHMATCH_in_attribute_operator1137 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CONTAINSMATCH_in_attribute_operator1153 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STARTSWITHMATCH_in_attribute_operator1168 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ENDSWITHMATCH_in_attribute_operator1183 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _COLON_in_pseudo1208 = new BitSet(new ulong[]{0x40020400008000UL});
		public static readonly BitSet _COLON_in_pseudo1211 = new BitSet(new ulong[]{0x40020400000000UL});
		public static readonly BitSet _IDENT_in_pseudo1222 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FUNCTION_in_pseudo1238 = new BitSet(new ulong[]{0x20000000000UL,0x1000UL});
		public static readonly BitSet _IDENT_in_pseudo1240 = new BitSet(new ulong[]{0x0UL,0x1000UL});
		public static readonly BitSet _RPAREN_in_pseudo1243 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LPAREN_in_pseudo1259 = new BitSet(new ulong[]{0x220024644000020UL,0x12200061UL});
		public static readonly BitSet _expr_in_pseudo1261 = new BitSet(new ulong[]{0x0UL,0x1000UL});
		public static readonly BitSet _RPAREN_in_pseudo1263 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _property_in_declaration1283 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _COLON_in_declaration1285 = new BitSet(new ulong[]{0x220024644000020UL,0x12200061UL});
		public static readonly BitSet _expr_in_declaration1287 = new BitSet(new ulong[]{0x100000000002UL});
		public static readonly BitSet _prio_in_declaration1289 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IMPORTANT_SYM_in_prio1327 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _term_in_expr1350 = new BitSet(new ulong[]{0x220024644818022UL,0x12240065UL});
		public static readonly BitSet _operator_in_expr1353 = new BitSet(new ulong[]{0x220024644000020UL,0x12200061UL});
		public static readonly BitSet _term_in_expr1355 = new BitSet(new ulong[]{0x220024644818022UL,0x12240065UL});
		public static readonly BitSet _unaryOperator_in_term1375 = new BitSet(new ulong[]{0x20000244000020UL,0x2000021UL});
		public static readonly BitSet _set_in_term1384 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_term1521 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_term1529 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _URI_in_term1537 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _hexColor_in_term1545 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FUNCTION_in_term1554 = new BitSet(new ulong[]{0x220024644000020UL,0x12201061UL});
		public static readonly BitSet _expr_in_term1557 = new BitSet(new ulong[]{0x0UL,0x1000UL});
		public static readonly BitSet _RPAREN_in_term1561 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _HASH_in_hexColor1579 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _element_predicate_in_synpred1_ExCSS842 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _element_predicate_in_synpred2_ExCSS862 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}
